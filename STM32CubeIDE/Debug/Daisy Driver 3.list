
Daisy Driver 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000163c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e68  08016558  08016558  00026558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080173c0  080173c0  000306a4  2**0
                  CONTENTS
  4 .ARM          00000008  080173c0  080173c0  000273c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080173c8  080173c8  000306a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080173c8  080173c8  000273c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080173cc  080173cc  000273cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006a4  20000000  080173d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000306a4  2**0
                  CONTENTS
 10 .bss          00001e88  200006a8  200006a8  000306a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002530  20002530  000306a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000306a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000332bf  00000000  00000000  000306d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000067d9  00000000  00000000  00063993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020a0  00000000  00000000  0006a170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f70  00000000  00000000  0006c210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d82  00000000  00000000  0006e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030006  00000000  00000000  00097f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1731  00000000  00000000  000c7f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a9639  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a148  00000000  00000000  001a968c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006a8 	.word	0x200006a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801653c 	.word	0x0801653c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006ac 	.word	0x200006ac
 80001cc:	0801653c 	.word	0x0801653c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	7bfb      	ldrb	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
 8001020:	78fa      	ldrb	r2, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	2304      	movs	r3, #4
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <OD_getIndex+0x14>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	e000      	b.n	8001068 <OD_getIndex+0x16>
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <OD_extension_init+0x14>
 8001084:	2305      	movs	r3, #5
 8001086:	e003      	b.n	8001090 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	460b      	mov	r3, r1
 80010aa:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80010ac:	7af9      	ldrb	r1, [r7, #11]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2304      	movs	r3, #4
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f001 fb56 	bl	8002768 <OD_get_value>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00c      	beq.n	80010f4 <OD_read_1014_default+0x2e>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	7c5b      	ldrb	r3, [r3, #17]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d108      	bne.n	80010f4 <OD_read_1014_default+0x2e>
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d902      	bls.n	80010f4 <OD_read_1014_default+0x2e>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80010f4:	2309      	movs	r3, #9
 80010f6:	e01b      	b.n	8001130 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <OD_read_1014_default+0x44>
 8001106:	2300      	movs	r3, #0
 8001108:	e001      	b.n	800110e <OD_read_1014_default+0x48>
 800110a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800110e:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001116:	3380      	adds	r3, #128	; 0x80
 8001118:	461a      	mov	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 8001120:	6939      	ldr	r1, [r7, #16]
 8001122:	68b8      	ldr	r0, [r7, #8]
 8001124:	f7ff ff86 	bl	8001034 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2204      	movs	r2, #4
 800112c:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00f      	beq.n	800116c <OD_read_1003+0x34>
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00c      	beq.n	800116c <OD_read_1003+0x34>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d009      	beq.n	800116c <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d803      	bhi.n	8001166 <OD_read_1003+0x2e>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	7c5b      	ldrb	r3, [r3, #17]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <OD_read_1003+0x34>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 800116c:	2309      	movs	r3, #9
 800116e:	e04d      	b.n	800120c <OD_read_1003+0xd4>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	7f1b      	ldrb	r3, [r3, #28]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d801      	bhi.n	8001182 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 800117e:	2309      	movs	r3, #9
 8001180:	e044      	b.n	800120c <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	7c5b      	ldrb	r3, [r3, #17]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10b      	bne.n	80011a2 <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001190:	4619      	mov	r1, r3
 8001192:	68b8      	ldr	r0, [r7, #8]
 8001194:	f7ff ff3e 	bl	8001014 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e034      	b.n	800120c <OD_read_1003+0xd4>
    }
    else if (stream->subIndex <= em->fifoCount) {
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	7c5a      	ldrb	r2, [r3, #17]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d82c      	bhi.n	800120a <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	7f5b      	ldrb	r3, [r3, #29]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	7c5b      	ldrb	r3, [r3, #17]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 80011c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da07      	bge.n	80011da <OD_read_1003+0xa2>
            index += em->fifoSize;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	7f1b      	ldrb	r3, [r3, #28]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	8afb      	ldrh	r3, [r7, #22]
 80011d2:	4413      	add	r3, r2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	82fb      	strh	r3, [r7, #22]
 80011d8:	e007      	b.n	80011ea <OD_read_1003+0xb2>
        }
        else if (index >= (em->fifoSize)) {
 80011da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	7f12      	ldrb	r2, [r2, #28]
 80011e2:	4293      	cmp	r3, r2
 80011e4:	db01      	blt.n	80011ea <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 80011e6:	2309      	movs	r3, #9
 80011e8:	e010      	b.n	800120c <OD_read_1003+0xd4>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	699a      	ldr	r2, [r3, #24]
 80011ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	68b8      	ldr	r0, [r7, #8]
 80011fc:	f7ff ff1a 	bl	8001034 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2204      	movs	r2, #4
 8001204:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <OD_read_1003+0xd4>
    }
    else {
        return ODR_NO_DATA;
 800120a:	2319      	movs	r3, #25
    }
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <OD_write_1003+0x2e>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	7c5b      	ldrb	r3, [r3, #17]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d108      	bne.n	8001242 <OD_write_1003+0x2e>
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <OD_write_1003+0x2e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d102      	bne.n	8001242 <OD_write_1003+0x2e>
        || countWritten == NULL)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 8001242:	2309      	movs	r3, #9
 8001244:	e012      	b.n	800126c <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 8001246:	68b8      	ldr	r0, [r7, #8]
 8001248:	f7ff fed6 	bl	8000ff8 <CO_getUint8>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8001252:	230f      	movs	r3, #15
 8001254:	e00a      	b.n	800126c <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af02      	add	r7, sp, #8
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001282:	2300      	movs	r3, #0
 8001284:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d01a      	beq.n	80012c2 <CO_EM_init+0x4e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d017      	beq.n	80012c2 <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d103      	bne.n	80012a0 <CO_EM_init+0x2c>
 8001298:	f897 3020 	ldrb.w	r3, [r7, #32]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d810      	bhi.n	80012c2 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00d      	beq.n	80012c2 <CO_EM_init+0x4e>
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00a      	beq.n	80012c2 <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 80012ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <CO_EM_init+0x4e>
 80012b4:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db02      	blt.n	80012c2 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 80012bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e0a7      	b.n	8001418 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 80012c8:	2250      	movs	r2, #80	; 0x50
 80012ca:	2100      	movs	r1, #0
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f010 fb69 	bl	80119a4 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 80012d8:	2300      	movs	r3, #0
 80012da:	2201      	movs	r2, #1
 80012dc:	2100      	movs	r1, #0
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f001 faa9 	bl	8002836 <OD_getPtr>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10c      	bne.n	800130c <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 80012f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <CO_EM_init+0x92>
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff feaa 	bl	8001052 <OD_getIndex>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001304:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001306:	f06f 030b 	mvn.w	r3, #11
 800130a:	e085      	b.n	8001418 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001320:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 8001322:	f107 0210 	add.w	r2, r7, #16
 8001326:	2301      	movs	r3, #1
 8001328:	2100      	movs	r1, #0
 800132a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800132c:	f7ff feb6 	bl	800109c <OD_get_u32>
 8001330:	4603      	mov	r3, r0
 8001332:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 8001334:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d104      	bne.n	8001346 <CO_EM_init+0xd2>
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4b38      	ldr	r3, [pc, #224]	; (8001420 <CO_EM_init+0x1ac>)
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d010      	beq.n	8001368 <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8001346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <CO_EM_init+0xe6>
 800134c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800134e:	f7ff fe80 	bl	8001052 <OD_getIndex>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001358:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 800135a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 8001362:	f06f 030b 	mvn.w	r3, #11
 8001366:	e057      	b.n	8001418 <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 8001368:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800136c:	b29b      	uxth	r3, r3
 800136e:	3380      	adds	r3, #128	; 0x80
 8001370:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	0fdb      	lsrs	r3, r3, #31
 8001378:	b2db      	uxtb	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4a26      	ldr	r2, [pc, #152]	; (8001424 <CO_EM_init+0x1b0>)
 800138a:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4a26      	ldr	r2, [pc, #152]	; (8001428 <CO_EM_init+0x1b4>)
 8001390:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3330      	adds	r3, #48	; 0x30
 8001396:	4619      	mov	r1, r3
 8001398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800139a:	f7ff fe6b 	bl	8001074 <OD_extension_init>
 800139e:	4603      	mov	r3, r0
 80013a0:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80013a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00c      	beq.n	80013c4 <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80013aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <CO_EM_init+0x14a>
 80013b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013b2:	f7ff fe4e 	bl	8001052 <OD_getIndex>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013bc:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80013be:	f06f 030b 	mvn.w	r3, #11
 80013c2:	e029      	b.n	8001418 <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80013ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 80013ce:	8aba      	ldrh	r2, [r7, #20]
 80013d0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80013d2:	2300      	movs	r3, #0
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2308      	movs	r3, #8
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	68b8      	ldr	r0, [r7, #8]
 80013de:	f006 f885 	bl	80074ec <CO_CANtxBufferInit>
 80013e2:	4602      	mov	r2, r0
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	e010      	b.n	8001418 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <CO_EM_init+0x1b8>)
 8001400:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <CO_EM_init+0x1bc>)
 8001406:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3340      	adds	r3, #64	; 0x40
 800140c:	4619      	mov	r1, r3
 800140e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001410:	f7ff fe30 	bl	8001074 <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 8001414:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	7ffff800 	.word	0x7ffff800
 8001424:	080010c7 	.word	0x080010c7
 8001428:	0800239d 	.word	0x0800239d
 800142c:	08001139 	.word	0x08001139
 8001430:	08001215 	.word	0x08001215

08001434 <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af02      	add	r7, sp, #8
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	8a5b      	ldrh	r3, [r3, #18]
 8001448:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8a1b      	ldrh	r3, [r3, #16]
 800144e:	8aba      	ldrh	r2, [r7, #20]
 8001450:	429a      	cmp	r2, r3
 8001452:	f000 80a2 	beq.w	800159a <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8a1a      	ldrh	r2, [r3, #16]
 800145a:	8abb      	ldrh	r3, [r7, #20]
 800145c:	4053      	eors	r3, r2
 800145e:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8aba      	ldrh	r2, [r7, #20]
 8001464:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 8001466:	8a7a      	ldrh	r2, [r7, #18]
 8001468:	f240 1301 	movw	r3, #257	; 0x101
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d010      	beq.n	8001494 <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 8001472:	8aba      	ldrh	r2, [r7, #20]
 8001474:	f240 1301 	movw	r3, #257	; 0x101
 8001478:	4013      	ands	r3, r2
            CO_error(em,
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4619      	mov	r1, r3
 8001486:	2300      	movs	r3, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2300      	movs	r3, #0
 800148c:	2201      	movs	r2, #1
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f91a 	bl	80016c8 <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 8001494:	8a7b      	ldrh	r3, [r7, #18]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d010      	beq.n	80014c0 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 800149e:	8abb      	ldrh	r3, [r7, #20]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf14      	ite	ne
 80014a8:	2301      	movne	r3, #1
 80014aa:	2300      	moveq	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	2300      	movs	r3, #0
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	f248 1320 	movw	r3, #33056	; 0x8120
 80014b8:	2207      	movs	r2, #7
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 f904 	bl	80016c8 <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 80014c0:	8a7b      	ldrh	r3, [r7, #18]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d010      	beq.n	80014ec <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 80014ca:	8abb      	ldrh	r3, [r7, #20]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4619      	mov	r1, r3
 80014dc:	2300      	movs	r3, #0
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	f248 1340 	movw	r3, #33088	; 0x8140
 80014e4:	2212      	movs	r2, #18
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 f8ee 	bl	80016c8 <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 80014ec:	8a7b      	ldrh	r3, [r7, #18]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d010      	beq.n	8001518 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 80014f6:	8abb      	ldrh	r3, [r7, #20]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bf14      	ite	ne
 8001500:	2301      	movne	r3, #1
 8001502:	2300      	moveq	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4619      	mov	r1, r3
 8001508:	2300      	movs	r3, #0
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	f248 1310 	movw	r3, #33040	; 0x8110
 8001510:	2214      	movs	r2, #20
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f8d8 	bl	80016c8 <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 8001518:	8a7b      	ldrh	r3, [r7, #18]
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	2b00      	cmp	r3, #0
 8001520:	d010      	beq.n	8001544 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 8001522:	8abb      	ldrh	r3, [r7, #20]
 8001524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	2300      	movs	r3, #0
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800153c:	2215      	movs	r2, #21
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 f8c2 	bl	80016c8 <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 8001544:	8a7b      	ldrh	r3, [r7, #18]
 8001546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800154a:	2b00      	cmp	r3, #0
 800154c:	d010      	beq.n	8001570 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 800154e:	8abb      	ldrh	r3, [r7, #20]
 8001550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf14      	ite	ne
 8001558:	2301      	movne	r3, #1
 800155a:	2300      	moveq	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	2300      	movs	r3, #0
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	f248 1320 	movw	r3, #33056	; 0x8120
 8001568:	2206      	movs	r2, #6
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 f8ac 	bl	80016c8 <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 8001570:	8a7b      	ldrh	r3, [r7, #18]
 8001572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00f      	beq.n	800159a <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 800157a:	8abb      	ldrh	r3, [r7, #20]
 800157c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf14      	ite	ne
 8001584:	2301      	movne	r3, #1
 8001586:	2300      	moveq	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4619      	mov	r1, r3
 800158c:	2300      	movs	r3, #0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2313      	movs	r3, #19
 8001592:	2213      	movs	r2, #19
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 f897 	bl	80016c8 <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	795b      	ldrb	r3, [r3, #5]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	789b      	ldrb	r3, [r3, #2]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d103      	bne.n	80015be <CO_EM_process+0x18a>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	78db      	ldrb	r3, [r3, #3]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	7a1b      	ldrb	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <CO_EM_process+0x1a2>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	7a5b      	ldrb	r3, [r3, #9]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015dc:	75fb      	strb	r3, [r7, #23]
    *em->errorRegister = errorRegister;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	7dfa      	ldrb	r2, [r7, #23]
 80015e4:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d067      	beq.n	80016bc <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	7f1b      	ldrb	r3, [r3, #28]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d965      	bls.n	80016c0 <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	7f9b      	ldrb	r3, [r3, #30]
 80015f8:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	7f5b      	ldrb	r3, [r3, #29]
 80015fe:	7c7a      	ldrb	r2, [r7, #17]
 8001600:	429a      	cmp	r2, r3
 8001602:	d05d      	beq.n	80016c0 <CO_EM_process+0x28c>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d158      	bne.n	80016c0 <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	699a      	ldr	r2, [r3, #24]
 8001612:	7c7b      	ldrb	r3, [r7, #17]
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6998      	ldr	r0, [r3, #24]
 8001622:	7c7b      	ldrb	r3, [r7, #17]
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4403      	add	r3, r0
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	1d58      	adds	r0, r3, #5
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	7c7b      	ldrb	r3, [r7, #17]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	2208      	movs	r2, #8
 800163e:	4619      	mov	r1, r3
 8001640:	f010 f988 	bl	8011954 <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	695a      	ldr	r2, [r3, #20]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	4619      	mov	r1, r3
 800164e:	4610      	mov	r0, r2
 8001650:	f005 ffc6 	bl	80075e0 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 8001654:	7c7b      	ldrb	r3, [r7, #17]
 8001656:	3301      	adds	r3, #1
 8001658:	747b      	strb	r3, [r7, #17]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	7f1b      	ldrb	r3, [r3, #28]
 800165e:	7c7a      	ldrb	r2, [r7, #17]
 8001660:	429a      	cmp	r2, r3
 8001662:	d201      	bcs.n	8001668 <CO_EM_process+0x234>
 8001664:	7c7a      	ldrb	r2, [r7, #17]
 8001666:	e000      	b.n	800166a <CO_EM_process+0x236>
 8001668:	2200      	movs	r2, #0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	7fdb      	ldrb	r3, [r3, #31]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10c      	bne.n	8001690 <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2202      	movs	r2, #2
 800167a:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 800167c:	2300      	movs	r3, #0
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	2220      	movs	r2, #32
 8001686:	2101      	movs	r1, #1
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f81d 	bl	80016c8 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 800168e:	e017      	b.n	80016c0 <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	7fdb      	ldrb	r3, [r3, #31]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d113      	bne.n	80016c0 <CO_EM_process+0x28c>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	7f9a      	ldrb	r2, [r3, #30]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	7f5b      	ldrb	r3, [r3, #29]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d10d      	bne.n	80016c0 <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 80016aa:	2300      	movs	r3, #0
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2300      	movs	r3, #0
 80016b0:	2220      	movs	r2, #32
 80016b2:	2100      	movs	r1, #0
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f807 	bl	80016c8 <CO_error>
    return;
 80016ba:	e001      	b.n	80016c0 <CO_EM_process+0x28c>
        return;
 80016bc:	bf00      	nop
 80016be:	e000      	b.n	80016c2 <CO_EM_process+0x28e>
    return;
 80016c0:	bf00      	nop
}
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b08d      	sub	sp, #52	; 0x34
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	4611      	mov	r1, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	460b      	mov	r3, r1
 80016d8:	71fb      	strb	r3, [r7, #7]
 80016da:	4613      	mov	r3, r2
 80016dc:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80a6 	beq.w	8001832 <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	2201      	movs	r2, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 80016fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001702:	2b09      	cmp	r3, #9
 8001704:	d90a      	bls.n	800171c <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8001706:	2305      	movs	r3, #5
 8001708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 800170c:	2301      	movs	r3, #1
 800170e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8001712:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8001716:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 800171c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8001726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800172e:	4013      	ands	r3, r2
 8001730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d004      	beq.n	8001744 <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 800173a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <CO_error+0x88>
            return;
 8001742:	e079      	b.n	8001838 <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8001744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001748:	2b00      	cmp	r3, #0
 800174a:	d074      	beq.n	8001836 <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 800174c:	2300      	movs	r3, #0
 800174e:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	061a      	lsls	r2, r3, #24
 8001754:	88bb      	ldrh	r3, [r7, #4]
 8001756:	4313      	orrs	r3, r2
 8001758:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 800175a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175c:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001762:	f3ef 8210 	mrs	r2, PRIMASK
 8001766:	617a      	str	r2, [r7, #20]
  return(result);
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
    if (setError) *errorStatusBits |= bitmask;
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d008      	beq.n	8001788 <CO_error+0xc0>
 8001776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800177e:	4313      	orrs	r3, r2
 8001780:	b2da      	uxtb	r2, r3
 8001782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e00b      	b.n	80017a0 <CO_error+0xd8>
    else          *errorStatusBits &= ~bitmask;
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b25a      	sxtb	r2, r3
 800178e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8001792:	43db      	mvns	r3, r3
 8001794:	b25b      	sxtb	r3, r3
 8001796:	4013      	ands	r3, r2
 8001798:	b25b      	sxtb	r3, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	7f1b      	ldrb	r3, [r3, #28]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d93c      	bls.n	8001822 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	7f5b      	ldrb	r3, [r3, #29]
 80017ac:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 80017ae:	7efb      	ldrb	r3, [r7, #27]
 80017b0:	3301      	adds	r3, #1
 80017b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	7f1b      	ldrb	r3, [r3, #28]
 80017ba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80017be:	429a      	cmp	r2, r3
 80017c0:	d302      	bcc.n	80017c8 <CO_error+0x100>
            fifoWrPtrNext = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	7f9b      	ldrb	r3, [r3, #30]
 80017cc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d103      	bne.n	80017dc <CO_error+0x114>
            em->fifoOverflow = 1;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	77da      	strb	r2, [r3, #31]
 80017da:	e022      	b.n	8001822 <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	699a      	ldr	r2, [r3, #24]
 80017e0:	7efb      	ldrb	r3, [r7, #27]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	6a3a      	ldr	r2, [r7, #32]
 80017e8:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	7efb      	ldrb	r3, [r7, #27]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4413      	add	r3, r2
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80017fe:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	7f1b      	ldrb	r3, [r3, #28]
 800180c:	3b01      	subs	r3, #1
 800180e:	429a      	cmp	r2, r3
 8001810:	da07      	bge.n	8001822 <CO_error+0x15a>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001818:	3301      	adds	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	f383 8810 	msr	PRIMASK, r3
}
 8001830:	e002      	b.n	8001838 <CO_error+0x170>
    if (em == NULL) return;
 8001832:	bf00      	nop
 8001834:	e000      	b.n	8001838 <CO_error+0x170>
            return;
 8001836:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8001838:	3734      	adds	r7, #52	; 0x34
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <OD_getIndex+0x14>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	e000      	b.n	8001874 <OD_getIndex+0x16>
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <OD_extension_init>:
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <OD_extension_init+0x14>
 8001890:	2305      	movs	r3, #5
 8001892:	e003      	b.n	800189c <OD_extension_init+0x1c>
    entry->extension = extension;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <OD_get_u32>:
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	460b      	mov	r3, r1
 80018b6:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80018b8:	7af9      	ldrb	r1, [r7, #11]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2304      	movs	r3, #4
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 ff50 	bl	8002768 <OD_get_value>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 80018d2:	b480      	push	{r7}
 80018d4:	b087      	sub	sp, #28
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	791b      	ldrb	r3, [r3, #4]
 80018e4:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	3305      	adds	r3, #5
 80018ea:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 80018ec:	7cfb      	ldrb	r3, [r7, #19]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d107      	bne.n	8001902 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b25a      	sxtb	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2201      	movs	r2, #1
 8001900:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8001902:	bf00      	nop
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b088      	sub	sp, #32
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d012      	beq.n	800194e <OD_write_1016+0x40>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00f      	beq.n	800194e <OD_write_1016+0x40>
        || stream->subIndex < 1
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	7c5b      	ldrb	r3, [r3, #17]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	7c5a      	ldrb	r2, [r3, #17]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	7a1b      	ldrb	r3, [r3, #8]
 800193e:	429a      	cmp	r2, r3
 8001940:	d805      	bhi.n	800194e <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d102      	bne.n	800194e <OD_write_1016+0x40>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 800194e:	2309      	movs	r3, #9
 8001950:	e020      	b.n	8001994 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8001952:	68b8      	ldr	r0, [r7, #8]
 8001954:	f7ff ff75 	bl	8001842 <CO_getUint32>
 8001958:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	0c1b      	lsrs	r3, r3, #16
 800195e:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	7c5b      	ldrb	r3, [r3, #17]
 8001968:	3b01      	subs	r3, #1
 800196a:	b2d9      	uxtb	r1, r3
 800196c:	8abb      	ldrh	r3, [r7, #20]
 800196e:	7dfa      	ldrb	r2, [r7, #23]
 8001970:	69f8      	ldr	r0, [r7, #28]
 8001972:	f000 f8bf 	bl	8001af4 <CO_HBconsumer_initEntry>
 8001976:	4603      	mov	r3, r0
 8001978:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 800197a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8001982:	2308      	movs	r3, #8
 8001984:	e006      	b.n	8001994 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 fd05 	bl	800239c <OD_writeOriginal>
 8001992:	4603      	mov	r3, r0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00b      	beq.n	80019c8 <CO_HBconsumer_init+0x2c>
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d008      	beq.n	80019c8 <CO_HBconsumer_init+0x2c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 80019bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <CO_HBconsumer_init+0x2c>
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
 80019cc:	e08a      	b.n	8001ae4 <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 80019ce:	2230      	movs	r2, #48	; 0x30
 80019d0:	2100      	movs	r1, #0
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f00f ffe6 	bl	80119a4 <memset>
    HBcons->em = em;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e8:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80019ee:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f2:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d304      	bcc.n	8001a04 <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	e000      	b.n	8001a06 <CO_HBconsumer_init+0x6a>
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	77fb      	strb	r3, [r7, #31]
 8001a0e:	e041      	b.n	8001a94 <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8001a10:	7ffb      	ldrb	r3, [r7, #31]
 8001a12:	3301      	adds	r3, #1
 8001a14:	b2d9      	uxtb	r1, r3
 8001a16:	f107 0214 	add.w	r2, r7, #20
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a1e:	f7ff ff43 	bl	80018a8 <OD_get_u32>
 8001a22:	4603      	mov	r3, r0
 8001a24:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8001a26:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00c      	beq.n	8001a48 <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <CO_HBconsumer_init+0xa6>
 8001a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a36:	f7ff ff12 	bl	800185e <OD_getIndex>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a40:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8001a42:	f06f 030b 	mvn.w	r3, #11
 8001a46:	e04d      	b.n	8001ae4 <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	0c1b      	lsrs	r3, r3, #16
 8001a4c:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8001a52:	8b7b      	ldrh	r3, [r7, #26]
 8001a54:	7f7a      	ldrb	r2, [r7, #29]
 8001a56:	7ff9      	ldrb	r1, [r7, #31]
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 f84b 	bl	8001af4 <CO_HBconsumer_initEntry>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8001a62:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d011      	beq.n	8001a8e <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8001a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <CO_HBconsumer_init+0xe2>
 8001a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a72:	f7ff fef4 	bl	800185e <OD_getIndex>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 8001a7e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a82:	f113 0f0c 	cmn.w	r3, #12
 8001a86:	d002      	beq.n	8001a8e <CO_HBconsumer_init+0xf2>
                return ret;
 8001a88:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a8c:	e02a      	b.n	8001ae4 <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001a8e:	7ffb      	ldrb	r3, [r7, #31]
 8001a90:	3301      	adds	r3, #1
 8001a92:	77fb      	strb	r3, [r7, #31]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	7a1b      	ldrb	r3, [r3, #8]
 8001a98:	7ffa      	ldrb	r2, [r7, #31]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3b8      	bcc.n	8001a10 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a11      	ldr	r2, [pc, #68]	; (8001aec <CO_HBconsumer_init+0x150>)
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <CO_HBconsumer_init+0x154>)
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3320      	adds	r3, #32
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ab8:	f7ff fee2 	bl	8001880 <OD_extension_init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001ac0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00c      	beq.n	8001ae2 <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8001ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <CO_HBconsumer_init+0x140>
 8001ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ad0:	f7ff fec5 	bl	800185e <OD_getIndex>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ada:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001adc:	f06f 030b 	mvn.w	r3, #11
 8001ae0:	e000      	b.n	8001ae4 <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	080022ed 	.word	0x080022ed
 8001af0:	0800190f 	.word	0x0800190f

08001af4 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b08d      	sub	sp, #52	; 0x34
 8001af8:	af04      	add	r7, sp, #16
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	4608      	mov	r0, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4603      	mov	r3, r0
 8001b04:	70fb      	strb	r3, [r7, #3]
 8001b06:	460b      	mov	r3, r1
 8001b08:	70bb      	strb	r3, [r7, #2]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <CO_HBconsumer_initEntry+0x2e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7a1b      	ldrb	r3, [r3, #8]
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d302      	bcc.n	8001b28 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e077      	b.n	8001c18 <CO_HBconsumer_initEntry+0x124>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 8001b28:	883b      	ldrh	r3, [r7, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d024      	beq.n	8001b78 <CO_HBconsumer_initEntry+0x84>
 8001b2e:	78bb      	ldrb	r3, [r7, #2]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d021      	beq.n	8001b78 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	77bb      	strb	r3, [r7, #30]
 8001b38:	e019      	b.n	8001b6e <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	7fbb      	ldrb	r3, [r7, #30]
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4413      	add	r3, r2
 8001b44:	f107 0408 	add.w	r4, r7, #8
 8001b48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	7fbb      	ldrb	r3, [r7, #30]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d008      	beq.n	8001b68 <CO_HBconsumer_initEntry+0x74>
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <CO_HBconsumer_initEntry+0x74>
 8001b5c:	7a3b      	ldrb	r3, [r7, #8]
 8001b5e:	78ba      	ldrb	r2, [r7, #2]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d101      	bne.n	8001b68 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8001b64:	23f4      	movs	r3, #244	; 0xf4
 8001b66:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001b68:	7fbb      	ldrb	r3, [r7, #30]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	77bb      	strb	r3, [r7, #30]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7a1b      	ldrb	r3, [r3, #8]
 8001b72:	7fba      	ldrb	r2, [r7, #30]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3e0      	bcc.n	8001b3a <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8001b78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d149      	bne.n	8001c14 <CO_HBconsumer_initEntry+0x120>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4413      	add	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	78ba      	ldrb	r2, [r7, #2]
 8001b90:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8001b92:	883b      	ldrh	r3, [r7, #0]
 8001b94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	22ff      	movs	r2, #255	; 0xff
 8001ba6:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00d      	beq.n	8001bd2 <CO_HBconsumer_initEntry+0xde>
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <CO_HBconsumer_initEntry+0xde>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8001bc8:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	709a      	strb	r2, [r3, #2]
 8001bd0:	e007      	b.n	8001be2 <CO_HBconsumer_initEntry+0xee>
        }
        else {
            COB_ID = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2200      	movs	r2, #0
 8001be0:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001bfc:	8bba      	ldrh	r2, [r7, #28]
 8001bfe:	4c08      	ldr	r4, [pc, #32]	; (8001c20 <CO_HBconsumer_initEntry+0x12c>)
 8001c00:	9402      	str	r4, [sp, #8]
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c0c:	f005 fc10 	bl	8007430 <CO_CANrxBufferInit>
 8001c10:	4603      	mov	r3, r0
 8001c12:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 8001c14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3724      	adds	r7, #36	; 0x24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}
 8001c20:	080018d3 	.word	0x080018d3

08001c24 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08e      	sub	sp, #56	; 0x38
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8001c32:	2301      	movs	r3, #1
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8001c36:	2301      	movs	r3, #1
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d077      	beq.n	8001d30 <CO_HBconsumer_process+0x10c>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d073      	beq.n	8001d30 <CO_HBconsumer_process+0x10c>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c4e:	e068      	b.n	8001d22 <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	4413      	add	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	789b      	ldrb	r3, [r3, #2]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d055      	beq.n	8001d16 <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d022      	beq.n	8001cb8 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d112      	bne.n	8001ca2 <CO_HBconsumer_process+0x7e>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	789b      	ldrb	r3, [r3, #2]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d10a      	bne.n	8001c9a <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em,
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	f248 1330 	movw	r3, #33072	; 0x8130
 8001c92:	221c      	movs	r2, #28
 8001c94:	2101      	movs	r1, #1
 8001c96:	f7ff fd17 	bl	80016c8 <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	709a      	strb	r2, [r3, #2]
 8001ca0:	e007      	b.n	8001cb2 <CO_HBconsumer_process+0x8e>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2200      	movs	r2, #0
 8001cac:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	789b      	ldrb	r3, [r3, #2]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d11c      	bne.n	8001cfa <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d310      	bcc.n	8001cfa <CO_HBconsumer_process+0xd6>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	f248 1330 	movw	r3, #33072	; 0x8130
 8001ce6:	221b      	movs	r2, #27
 8001ce8:	2101      	movs	r1, #1
 8001cea:	f7ff fced 	bl	80016c8 <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	22ff      	movs	r2, #255	; 0xff
 8001cf2:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	789b      	ldrb	r3, [r3, #2]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d001      	beq.n	8001d06 <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d003      	beq.n	8001d18 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d14:	e000      	b.n	8001d18 <CO_HBconsumer_process+0xf4>
                continue;
 8001d16:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	7a1b      	ldrb	r3, [r3, #8]
 8001d26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d390      	bcc.n	8001c50 <CO_HBconsumer_process+0x2c>
 8001d2e:	e028      	b.n	8001d82 <CO_HBconsumer_process+0x15e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <CO_HBconsumer_process+0x11a>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d021      	beq.n	8001d82 <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001d3e:	2300      	movs	r3, #0
 8001d40:	77fb      	strb	r3, [r7, #31]
 8001d42:	e015      	b.n	8001d70 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	7ffb      	ldrb	r3, [r7, #31]
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	4413      	add	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	22ff      	movs	r2, #255	; 0xff
 8001d54:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	789b      	ldrb	r3, [r3, #2]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2201      	movs	r2, #1
 8001d68:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001d6a:	7ffb      	ldrb	r3, [r7, #31]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	77fb      	strb	r3, [r7, #31]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	7a1b      	ldrb	r3, [r3, #8]
 8001d74:	7ffa      	ldrb	r2, [r7, #31]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3e4      	bcc.n	8001d44 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d114      	bne.n	8001db4 <CO_HBconsumer_process+0x190>
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d011      	beq.n	8001db4 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	2300      	movs	r3, #0
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	221b      	movs	r2, #27
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	f7ff fc93 	bl	80016c8 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	2300      	movs	r3, #0
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2300      	movs	r3, #0
 8001dac:	221c      	movs	r2, #28
 8001dae:	2100      	movs	r1, #0
 8001db0:	f7ff fc8a 	bl	80016c8 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db8:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dbe:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	615a      	str	r2, [r3, #20]
}
 8001dc6:	bf00      	nop
 8001dc8:	3730      	adds	r7, #48	; 0x30
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001ddc:	81fb      	strh	r3, [r7, #14]
 8001dde:	89fb      	ldrh	r3, [r7, #14]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <OD_getIndex+0x14>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	e000      	b.n	8001e02 <OD_getIndex+0x16>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <OD_extension_init>:
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <OD_extension_init+0x14>
 8001e1e:	2305      	movs	r3, #5
 8001e20:	e003      	b.n	8001e2a <OD_extension_init+0x1c>
    entry->extension = extension;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <OD_get_u16>:
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af02      	add	r7, sp, #8
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	460b      	mov	r3, r1
 8001e44:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001e46:	7af9      	ldrb	r1, [r7, #11]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 fc89 	bl	8002768 <OD_get_value>
 8001e56:	4603      	mov	r3, r0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	08db      	lsrs	r3, r3, #3
 8001e70:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	2201      	movs	r2, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00a      	beq.n	8001e9c <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	d807      	bhi.n	8001e9c <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	5cd2      	ldrb	r2, [r2, r3]
 8001e92:	7bbb      	ldrb	r3, [r7, #14]
 8001e94:	4013      	ands	r3, r2
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <CO_isError+0x40>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <CO_isError+0x42>
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <CO_getErrorRegister+0x1e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <CO_getErrorRegister+0x1e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	e000      	b.n	8001ece <CO_getErrorRegister+0x20>
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 8001eda:	b480      	push	{r7}
 8001edc:	b087      	sub	sp, #28
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	791b      	ldrb	r3, [r3, #4]
 8001ee8:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	3305      	adds	r3, #5
 8001eee:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d10a      	bne.n	8001f1c <CO_NMT_receive+0x42>
 8001f06:	7bbb      	ldrb	r3, [r7, #14]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d004      	beq.n	8001f16 <CO_NMT_receive+0x3c>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	78db      	ldrb	r3, [r3, #3]
 8001f10:	7bba      	ldrb	r2, [r7, #14]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d102      	bne.n	8001f1c <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00c      	beq.n	8001f56 <OD_write_1017+0x2e>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	7c5b      	ldrb	r3, [r3, #17]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d108      	bne.n	8001f56 <OD_write_1017+0x2e>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d102      	bne.n	8001f56 <OD_write_1017+0x2e>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8001f56:	2309      	movs	r3, #9
 8001f58:	e017      	b.n	8001f8a <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 8001f60:	68b8      	ldr	r0, [r7, #8]
 8001f62:	f7ff ff34 	bl	8001dce <CO_getUint16>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6e:	fb03 f202 	mul.w	r2, r3, r2
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fa0a 	bl	800239c <OD_writeOriginal>
 8001f88:	4603      	mov	r3, r0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af04      	add	r7, sp, #16
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00b      	beq.n	8001fc4 <CO_NMT_init+0x30>
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <CO_NMT_init+0x30>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <CO_NMT_init+0x30>
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc8:	e098      	b.n	80020fc <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8001fca:	222c      	movs	r2, #44	; 0x2c
 8001fcc:	2100      	movs	r1, #0
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f00f fce8 	bl	80119a4 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8c3a      	ldrh	r2, [r7, #32]
 8001fea:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 8001ff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8002002:	f107 0214 	add.w	r2, r7, #20
 8002006:	2301      	movs	r3, #1
 8002008:	2100      	movs	r1, #0
 800200a:	68b8      	ldr	r0, [r7, #8]
 800200c:	f7ff ff13 	bl	8001e36 <OD_get_u16>
 8002010:	4603      	mov	r3, r0
 8002012:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8002014:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00c      	beq.n	8002036 <CO_NMT_init+0xa2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 800201c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d006      	beq.n	8002030 <CO_NMT_init+0x9c>
 8002022:	68b8      	ldr	r0, [r7, #8]
 8002024:	f7ff fee2 	bl	8001dec <OD_getIndex>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800202e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8002030:	f06f 030b 	mvn.w	r3, #11
 8002034:	e062      	b.n	80020fc <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 8002036:	8abb      	ldrh	r3, [r7, #20]
 8002038:	461a      	mov	r2, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203e:	fb03 f202 	mul.w	r2, r3, r2
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a2d      	ldr	r2, [pc, #180]	; (8002104 <CO_NMT_init+0x170>)
 8002050:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4a2c      	ldr	r2, [pc, #176]	; (8002108 <CO_NMT_init+0x174>)
 8002056:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3310      	adds	r3, #16
 800205c:	4619      	mov	r1, r3
 800205e:	68b8      	ldr	r0, [r7, #8]
 8002060:	f7ff fed5 	bl	8001e0e <OD_extension_init>
 8002064:	4603      	mov	r3, r0
 8002066:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8002068:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00c      	beq.n	800208a <CO_NMT_init+0xf6>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8002070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d006      	beq.n	8002084 <CO_NMT_init+0xf0>
 8002076:	68b8      	ldr	r0, [r7, #8]
 8002078:	f7ff feb8 	bl	8001dec <OD_getIndex>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002082:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8002084:	f06f 030b 	mvn.w	r3, #11
 8002088:	e038      	b.n	80020fc <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	429a      	cmp	r2, r3
 8002094:	d903      	bls.n	800209e <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 800209e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80020a0:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <CO_NMT_init+0x178>)
 80020a4:	9302      	str	r3, [sp, #8]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	2300      	movs	r3, #0
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020b4:	f005 f9bc 	bl	8007430 <CO_CANrxBufferInit>
 80020b8:	4603      	mov	r3, r0
 80020ba:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 80020bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <CO_NMT_init+0x136>
        return ret;
 80020c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020c8:	e018      	b.n	80020fc <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 80020d0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80020d2:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2301      	movs	r3, #1
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2300      	movs	r3, #0
 80020de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020e0:	f005 fa04 	bl	80074ec <CO_CANtxBufferInit>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	e001      	b.n	80020fc <CO_NMT_init+0x168>
    }

    return ret;
 80020f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	080022ed 	.word	0x080022ed
 8002108:	08001f29 	.word	0x08001f29
 800210c:	08001edb 	.word	0x08001edb

08002110 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8002124:	2300      	movs	r3, #0
 8002126:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 8002128:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d204      	bcs.n	800214c <CO_NMT_process+0x3c>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	e000      	b.n	800214e <CO_NMT_process+0x3e>
 800214c:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10e      	bne.n	8002176 <CO_NMT_process+0x66>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d029      	beq.n	80021b4 <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800216e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002172:	429a      	cmp	r2, r3
 8002174:	d01e      	beq.n	80021b4 <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	7ffa      	ldrb	r2, [r7, #31]
 800217c:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f005 fa29 	bl	80075e0 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 800218e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	889b      	ldrh	r3, [r3, #4]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <CO_NMT_process+0x96>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e000      	b.n	80021a8 <CO_NMT_process+0x98>
 80021a6:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 80021a8:	77fb      	strb	r3, [r7, #31]
 80021aa:	e003      	b.n	80021b4 <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	7ffa      	ldrb	r2, [r7, #31]
 80021b8:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	789b      	ldrb	r3, [r3, #2]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d025      	beq.n	800220e <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	789b      	ldrb	r3, [r3, #2]
 80021c6:	2b82      	cmp	r3, #130	; 0x82
 80021c8:	d01a      	beq.n	8002200 <CO_NMT_process+0xf0>
 80021ca:	2b82      	cmp	r3, #130	; 0x82
 80021cc:	dc1b      	bgt.n	8002206 <CO_NMT_process+0xf6>
 80021ce:	2b81      	cmp	r3, #129	; 0x81
 80021d0:	d013      	beq.n	80021fa <CO_NMT_process+0xea>
 80021d2:	2b81      	cmp	r3, #129	; 0x81
 80021d4:	dc17      	bgt.n	8002206 <CO_NMT_process+0xf6>
 80021d6:	2b80      	cmp	r3, #128	; 0x80
 80021d8:	d00c      	beq.n	80021f4 <CO_NMT_process+0xe4>
 80021da:	2b80      	cmp	r3, #128	; 0x80
 80021dc:	dc13      	bgt.n	8002206 <CO_NMT_process+0xf6>
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d002      	beq.n	80021e8 <CO_NMT_process+0xd8>
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d003      	beq.n	80021ee <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 80021e6:	e00e      	b.n	8002206 <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 80021e8:	2305      	movs	r3, #5
 80021ea:	77fb      	strb	r3, [r7, #31]
                break;
 80021ec:	e00c      	b.n	8002208 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 80021ee:	2304      	movs	r3, #4
 80021f0:	77fb      	strb	r3, [r7, #31]
                break;
 80021f2:	e009      	b.n	8002208 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 80021f4:	237f      	movs	r3, #127	; 0x7f
 80021f6:	77fb      	strb	r3, [r7, #31]
                break;
 80021f8:	e006      	b.n	8002208 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	77bb      	strb	r3, [r7, #30]
                break;
 80021fe:	e003      	b.n	8002208 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 8002200:	2301      	movs	r3, #1
 8002202:	77bb      	strb	r3, [r7, #30]
                break;
 8002204:	e000      	b.n	8002208 <CO_NMT_process+0xf8>
                break;
 8002206:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	889b      	ldrh	r3, [r3, #4]
 8002212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01c      	beq.n	8002254 <CO_NMT_process+0x144>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	2112      	movs	r1, #18
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe1d 	bl	8001e60 <CO_isError>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d111      	bne.n	8002250 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	211b      	movs	r1, #27
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fe14 	bl	8001e60 <CO_isError>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d108      	bne.n	8002250 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	211c      	movs	r1, #28
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fe0b 	bl	8001e60 <CO_isError>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <CO_NMT_process+0x146>
 8002254:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8002256:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	889b      	ldrh	r3, [r3, #4]
 800225c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <CO_NMT_process+0x170>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fe20 	bl	8001eae <CO_getErrorRegister>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	889b      	ldrh	r3, [r3, #4]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <CO_NMT_process+0x170>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <CO_NMT_process+0x172>
 8002280:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8002282:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 8002284:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d110      	bne.n	80022ae <CO_NMT_process+0x19e>
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <CO_NMT_process+0x188>
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <CO_NMT_process+0x198>
 80022a4:	2304      	movs	r3, #4
 80022a6:	e000      	b.n	80022aa <CO_NMT_process+0x19a>
 80022a8:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 80022aa:	77fb      	strb	r3, [r7, #31]
 80022ac:	e010      	b.n	80022d0 <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	889b      	ldrh	r3, [r3, #4]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	da0b      	bge.n	80022d0 <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 80022b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022bc:	2b7f      	cmp	r3, #127	; 0x7f
 80022be:	d107      	bne.n	80022d0 <CO_NMT_process+0x1c0>
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d104      	bne.n	80022d0 <CO_NMT_process+0x1c0>
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 80022cc:	2305      	movs	r3, #5
 80022ce:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	7ffa      	ldrb	r2, [r7, #31]
 80022d4:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <CO_NMT_process+0x1d2>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	7ffa      	ldrb	r2, [r7, #31]
 80022e0:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 80022e2:	7fbb      	ldrb	r3, [r7, #30]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <OD_readOriginal+0x20>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <OD_readOriginal+0x20>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800230c:	2309      	movs	r3, #9
 800230e:	e041      	b.n	8002394 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8002322:	230e      	movs	r3, #14
 8002324:	e036      	b.n	8002394 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d103      	bne.n	800233a <OD_readOriginal+0x4e>
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	d922      	bls.n	8002380 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	429a      	cmp	r2, r3
 8002342:	d801      	bhi.n	8002348 <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8002344:	2309      	movs	r3, #9
 8002346:	e025      	b.n	8002394 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4413      	add	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d90a      	bls.n	800237a <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	441a      	add	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8002374:	23ff      	movs	r3, #255	; 0xff
 8002376:	75fb      	strb	r3, [r7, #23]
 8002378:	e002      	b.n	8002380 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	69b9      	ldr	r1, [r7, #24]
 8002384:	68b8      	ldr	r0, [r7, #8]
 8002386:	f00f fae5 	bl	8011954 <memcpy>

    *countRead = dataLenToCopy;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	601a      	str	r2, [r3, #0]
    return returnCode;
 8002390:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <OD_writeOriginal+0x20>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <OD_writeOriginal+0x20>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80023bc:	2309      	movs	r3, #9
 80023be:	e047      	b.n	8002450 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80023d2:	230e      	movs	r3, #14
 80023d4:	e03c      	b.n	8002450 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d103      	bne.n	80023ea <OD_writeOriginal+0x4e>
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d922      	bls.n	8002430 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d801      	bhi.n	80023f8 <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80023f4:	2309      	movs	r3, #9
 80023f6:	e02b      	b.n	8002450 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4413      	add	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d90a      	bls.n	800242a <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	441a      	add	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8002424:	23ff      	movs	r3, #255	; 0xff
 8002426:	75fb      	strb	r3, [r7, #23]
 8002428:	e002      	b.n	8002430 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d201      	bcs.n	800243c <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8002438:	230c      	movs	r3, #12
 800243a:	e009      	b.n	8002450 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	69b8      	ldr	r0, [r7, #24]
 8002442:	f00f fa87 	bl	8011954 <memcpy>

    *countWritten = dataLenToCopy;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	601a      	str	r2, [r3, #0]
    return returnCode;
 800244c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 8002466:	2302      	movs	r3, #2
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 8002482:	2302      	movs	r3, #2
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <OD_find+0x1a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <OD_find+0x1e>
        return NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e046      	b.n	800253c <OD_find+0xac>
    }

    uint16_t min = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 80024ba:	e026      	b.n	800250a <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 80024bc:	8afa      	ldrh	r2, [r7, #22]
 80024be:	8abb      	ldrh	r3, [r7, #20]
 80024c0:	4413      	add	r3, r2
 80024c2:	105b      	asrs	r3, r3, #1
 80024c4:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6859      	ldr	r1, [r3, #4]
 80024ca:	89fa      	ldrh	r2, [r7, #14]
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	887a      	ldrh	r2, [r7, #2]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d101      	bne.n	80024e6 <OD_find+0x56>
            return entry;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	e02a      	b.n	800253c <OD_find+0xac>
        }

        if (index < entry->index) {
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d209      	bcs.n	8002504 <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 80024f0:	89fb      	ldrh	r3, [r7, #14]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <OD_find+0x6e>
 80024f6:	89fb      	ldrh	r3, [r7, #14]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	e000      	b.n	8002500 <OD_find+0x70>
 80024fe:	89fb      	ldrh	r3, [r7, #14]
 8002500:	82bb      	strh	r3, [r7, #20]
 8002502:	e002      	b.n	800250a <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	3301      	adds	r3, #1
 8002508:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 800250a:	8afa      	ldrh	r2, [r7, #22]
 800250c:	8abb      	ldrh	r3, [r7, #20]
 800250e:	429a      	cmp	r2, r3
 8002510:	d3d4      	bcc.n	80024bc <OD_find+0x2c>
        }
    }

    if (min == max) {
 8002512:	8afa      	ldrh	r2, [r7, #22]
 8002514:	8abb      	ldrh	r3, [r7, #20]
 8002516:	429a      	cmp	r2, r3
 8002518:	d10f      	bne.n	800253a <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6859      	ldr	r1, [r3, #4]
 800251e:	8afa      	ldrh	r2, [r7, #22]
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	887a      	ldrh	r2, [r7, #2]
 8002532:	429a      	cmp	r2, r3
 8002534:	d101      	bne.n	800253a <OD_find+0xaa>
            return entry;
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	e000      	b.n	800253c <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8002548:	b480      	push	{r7}
 800254a:	b08d      	sub	sp, #52	; 0x34
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	460b      	mov	r3, r1
 8002556:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <OD_getSub+0x1e>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <OD_getSub+0x22>
 8002566:	2305      	movs	r3, #5
 8002568:	e0d2      	b.n	8002710 <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <OD_getSub+0x2c>
 8002570:	2309      	movs	r3, #9
 8002572:	e0cd      	b.n	8002710 <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	78db      	ldrb	r3, [r3, #3]
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	2b03      	cmp	r3, #3
 8002582:	d050      	beq.n	8002626 <OD_getSub+0xde>
 8002584:	2b03      	cmp	r3, #3
 8002586:	f300 808c 	bgt.w	80026a2 <OD_getSub+0x15a>
 800258a:	2b01      	cmp	r3, #1
 800258c:	d002      	beq.n	8002594 <OD_getSub+0x4c>
 800258e:	2b02      	cmp	r3, #2
 8002590:	d015      	beq.n	80025be <OD_getSub+0x76>
 8002592:	e086      	b.n	80026a2 <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <OD_getSub+0x56>
 800259a:	230e      	movs	r3, #14
 800259c:	e0b8      	b.n	8002710 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	791a      	ldrb	r2, [r3, #4]
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	609a      	str	r2, [r3, #8]
        break;
 80025bc:	e073      	b.n	80026a6 <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	789b      	ldrb	r3, [r3, #2]
 80025c2:	7afa      	ldrb	r2, [r7, #11]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d301      	bcc.n	80025cc <OD_getSub+0x84>
 80025c8:	230e      	movs	r3, #14
 80025ca:	e0a1      	b.n	8002710 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 80025d2:	7afb      	ldrb	r3, [r7, #11]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	7a1a      	ldrb	r2, [r3, #8]
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	2201      	movs	r2, #1
 80025ec:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 80025ee:	e05a      	b.n	80026a6 <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	7a5a      	ldrb	r2, [r3, #9]
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	7afa      	ldrb	r2, [r7, #11]
 800260a:	3a01      	subs	r2, #1
 800260c:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4413      	add	r3, r2
 8002614:	e000      	b.n	8002618 <OD_getSub+0xd0>
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261a:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	609a      	str	r2, [r3, #8]
        break;
 8002624:	e03f      	b.n	80026a6 <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8002630:	2300      	movs	r3, #0
 8002632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002636:	e01c      	b.n	8002672 <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8002638:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	461a      	mov	r2, r3
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	4413      	add	r3, r2
 800264a:	791b      	ldrb	r3, [r3, #4]
 800264c:	7afa      	ldrb	r2, [r7, #11]
 800264e:	429a      	cmp	r2, r3
 8002650:	d10a      	bne.n	8002668 <OD_getSub+0x120>
                odo = &odoArr[i];
 8002652:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	461a      	mov	r2, r3
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	4413      	add	r3, r2
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8002666:	e00a      	b.n	800267e <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8002668:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800266c:	3301      	adds	r3, #1
 800266e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	789b      	ldrb	r3, [r3, #2]
 8002676:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800267a:	429a      	cmp	r2, r3
 800267c:	d3dc      	bcc.n	8002638 <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <OD_getSub+0x140>
 8002684:	230e      	movs	r3, #14
 8002686:	e043      	b.n	8002710 <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	795a      	ldrb	r2, [r3, #5]
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	609a      	str	r2, [r3, #8]
        break;
 80026a0:	e001      	b.n	80026a6 <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 80026a2:	2309      	movs	r3, #9
 80026a4:	e034      	b.n	8002710 <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <OD_getSub+0x16c>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <OD_getSub+0x180>
        io->read = OD_readOriginal;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a19      	ldr	r2, [pc, #100]	; (800271c <OD_getSub+0x1d4>)
 80026b8:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a18      	ldr	r2, [pc, #96]	; (8002720 <OD_getSub+0x1d8>)
 80026be:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	2200      	movs	r2, #0
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	e01c      	b.n	8002702 <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <OD_getSub+0x192>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	e000      	b.n	80026dc <OD_getSub+0x194>
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <OD_getSub+0x1aa>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	e000      	b.n	80026f4 <OD_getSub+0x1ac>
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	2200      	movs	r2, #0
 8002706:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	7afa      	ldrb	r2, [r7, #11]
 800270c:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3734      	adds	r7, #52	; 0x34
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	080022ed 	.word	0x080022ed
 8002720:	0800239d 	.word	0x0800239d
 8002724:	08002459 	.word	0x08002459
 8002728:	08002475 	.word	0x08002475

0800272c <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	2b00      	cmp	r3, #0
 800273c:	db03      	blt.n	8002746 <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b19      	cmp	r3, #25
 8002744:	dd02      	ble.n	800274c <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <OD_getSDOabCode+0x38>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	e004      	b.n	8002756 <OD_getSDOabCode+0x2a>
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <OD_getSDOabCode+0x38>)
 8002752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	08016778 	.word	0x08016778

08002768 <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b08f      	sub	sp, #60	; 0x3c
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	460b      	mov	r3, r1
 8002776:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <OD_get_value+0x1a>
 800277e:	2309      	movs	r3, #9
 8002780:	e024      	b.n	80027cc <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countRd = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 800278c:	f107 0214 	add.w	r2, r7, #20
 8002790:	7af9      	ldrb	r1, [r7, #11]
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff fed7 	bl	8002548 <OD_getSub>
 800279a:	4603      	mov	r3, r0
 800279c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 80027a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <OD_get_value+0x46>
 80027a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027ac:	e00e      	b.n	80027cc <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <OD_get_value+0x54>
 80027b8:	230b      	movs	r3, #11
 80027ba:	e007      	b.n	80027cc <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 80027bc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80027be:	f107 0310 	add.w	r3, r7, #16
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027c8:	47a0      	blx	r4
 80027ca:	4603      	mov	r3, r0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	373c      	adds	r7, #60	; 0x3c
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}

080027d4 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b08f      	sub	sp, #60	; 0x3c
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	460b      	mov	r3, r1
 80027e2:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countWritten = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 80027ee:	f107 0214 	add.w	r2, r7, #20
 80027f2:	7af9      	ldrb	r1, [r7, #11]
 80027f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff fea6 	bl	8002548 <OD_getSub>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8002802:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <OD_set_value+0x3c>
 800280a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800280e:	e00e      	b.n	800282e <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8002810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d001      	beq.n	800281e <OD_set_value+0x4a>
 800281a:	230b      	movs	r3, #11
 800281c:	e007      	b.n	800282e <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 800281e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002820:	f107 0310 	add.w	r3, r7, #16
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800282a:	47a0      	blx	r4
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	373c      	adds	r7, #60	; 0x3c
 8002832:	46bd      	mov	sp, r7
 8002834:	bd90      	pop	{r4, r7, pc}

08002836 <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b08e      	sub	sp, #56	; 0x38
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	460b      	mov	r3, r1
 8002844:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 800284c:	f107 0214 	add.w	r2, r7, #20
 8002850:	7af9      	ldrb	r1, [r7, #11]
 8002852:	2301      	movs	r3, #1
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff fe77 	bl	8002548 <OD_getSub>
 800285a:	4603      	mov	r3, r0
 800285c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8002860:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002864:	2b00      	cmp	r3, #0
 8002866:	d116      	bne.n	8002896 <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <OD_getPtr+0x42>
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8002878:	2309      	movs	r3, #9
 800287a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800287e:	e00a      	b.n	8002896 <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <OD_getPtr+0x60>
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	d002      	beq.n	8002896 <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8002890:	230b      	movs	r3, #11
 8002892:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <OD_getPtr+0x6e>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80028a2:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 80028a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <OD_getPtr+0x7c>
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	e000      	b.n	80028b4 <OD_getPtr+0x7e>
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3738      	adds	r7, #56	; 0x38
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80028e6:	81fb      	strh	r3, [r7, #14]
 80028e8:	89fb      	ldrh	r3, [r7, #14]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
 800291c:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	2304      	movs	r3, #4
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <OD_getIndex+0x14>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	e000      	b.n	8002946 <OD_getIndex+0x16>
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <OD_extension_init>:
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <OD_extension_init+0x14>
 8002962:	2305      	movs	r3, #5
 8002964:	e003      	b.n	800296e <OD_extension_init+0x1c>
    entry->extension = extension;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <OD_get_u8>:
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af02      	add	r7, sp, #8
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	460b      	mov	r3, r1
 8002988:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800298a:	7af9      	ldrb	r1, [r7, #11]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2301      	movs	r3, #1
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff fee7 	bl	8002768 <OD_get_value>
 800299a:	4603      	mov	r3, r0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <OD_get_u16>:
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	460b      	mov	r3, r1
 80029b2:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80029b4:	7af9      	ldrb	r1, [r7, #11]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2302      	movs	r3, #2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7ff fed2 	bl	8002768 <OD_get_value>
 80029c4:	4603      	mov	r3, r0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <OD_get_u32>:
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af02      	add	r7, sp, #8
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	460b      	mov	r3, r1
 80029dc:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80029de:	7af9      	ldrb	r1, [r7, #11]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2304      	movs	r3, #4
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f7ff febd 	bl	8002768 <OD_get_value>
 80029ee:	4603      	mov	r3, r0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <OD_write_dummy+0x1a>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <OD_read_dummy+0x20>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <OD_read_dummy+0x20>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002a40:	2309      	movs	r3, #9
 8002a42:	e010      	b.n	8002a66 <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d902      	bls.n	8002a54 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	2100      	movs	r1, #0
 8002a58:	68b8      	ldr	r0, [r7, #8]
 8002a5a:	f00e ffa3 	bl	80119a4 <memset>

    *countRead = count;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 8002a70:	b5b0      	push	{r4, r5, r7, lr}
 8002a72:	b092      	sub	sp, #72	; 0x48
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8002a96:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002a9a:	08db      	lsrs	r3, r3, #3
 8002a9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 8002aa0:	79fa      	ldrb	r2, [r7, #7]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	3310      	adds	r3, #16
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002ab2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d901      	bls.n	8002abe <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8002aba:	2307      	movs	r3, #7
 8002abc:	e090      	b.n	8002be0 <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8002abe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002ac2:	2b1f      	cmp	r3, #31
 8002ac4:	d81a      	bhi.n	8002afc <PDOconfigMap+0x8c>
 8002ac6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d116      	bne.n	8002afc <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 8002ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 8002ad2:	2214      	movs	r2, #20
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ad8:	f00e ff64 	bl	80119a4 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 8002adc:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae2:	60da      	str	r2, [r3, #12]
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aea:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 8002aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aee:	4a3e      	ldr	r2, [pc, #248]	; (8002be8 <PDOconfigMap+0x178>)
 8002af0:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 8002af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af4:	4a3d      	ldr	r2, [pc, #244]	; (8002bec <PDOconfigMap+0x17c>)
 8002af6:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e071      	b.n	8002be0 <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 8002afc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002b00:	4619      	mov	r1, r3
 8002b02:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002b04:	f7ff fcc4 	bl	8002490 <OD_find>
 8002b08:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8002b0a:	f107 0214 	add.w	r2, r7, #20
 8002b0e:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8002b12:	2300      	movs	r3, #0
 8002b14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b16:	f7ff fd17 	bl	8002548 <OD_getSub>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8002b20:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <PDOconfigMap+0xbe>
        return odRet;
 8002b28:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b2c:	e058      	b.n	8002be0 <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <PDOconfigMap+0xc8>
 8002b34:	2308      	movs	r3, #8
 8002b36:	e000      	b.n	8002b3a <PDOconfigMap+0xca>
 8002b38:	2304      	movs	r3, #4
 8002b3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8002b3e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002b42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002b46:	4013      	ands	r3, r2
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 8002b4e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d201      	bcs.n	8002b68 <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8002b64:	2306      	movs	r3, #6
 8002b66:	e03b      	b.n	8002be0 <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8002b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	f107 0414 	add.w	r4, r7, #20
 8002b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b74:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002b78:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8002b7c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b82:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d129      	bne.n	8002bde <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 8002b8a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002b8e:	2b1f      	cmp	r3, #31
 8002b90:	d81f      	bhi.n	8002bd2 <PDOconfigMap+0x162>
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01b      	beq.n	8002bd2 <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	6899      	ldr	r1, [r3, #8]
 8002b9e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002ba2:	08db      	lsrs	r3, r3, #3
 8002ba4:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 8002ba6:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 8002ba8:	3308      	adds	r3, #8
 8002baa:	440b      	add	r3, r1
 8002bac:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	323c      	adds	r2, #60	; 0x3c
 8002bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 8002bb6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	b2d1      	uxtb	r1, r2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4413      	add	r3, r2
 8002bca:	460a      	mov	r2, r1
 8002bcc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8002bd0:	e005      	b.n	8002bde <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002bd2:	79fa      	ldrb	r2, [r7, #7]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	323c      	adds	r2, #60	; 0x3c
 8002bd8:	2100      	movs	r1, #0
 8002bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3748      	adds	r7, #72	; 0x48
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bdb0      	pop	{r4, r5, r7, pc}
 8002be8:	08002a21 	.word	0x08002a21
 8002bec:	080029f9 	.word	0x080029f9

08002bf0 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08c      	sub	sp, #48	; 0x30
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8002c06:	f107 021b 	add.w	r2, r7, #27
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff feb3 	bl	800297a <OD_get_u8>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002c1a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00c      	beq.n	8002c3c <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff fe81 	bl	8002930 <OD_getIndex>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	021a      	lsls	r2, r3, #8
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002c36:	f06f 030b 	mvn.w	r3, #11
 8002c3a:	e082      	b.n	8002d42 <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c42:	e05e      	b.n	8002d02 <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002c44:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	3310      	adds	r3, #16
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4413      	add	r3, r2
 8002c56:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 8002c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c60:	3301      	adds	r3, #1
 8002c62:	b2d9      	uxtb	r1, r3
 8002c64:	f107 0214 	add.w	r2, r7, #20
 8002c68:	2301      	movs	r3, #1
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff feaf 	bl	80029ce <OD_get_u32>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 8002c76:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002c7a:	2b0e      	cmp	r3, #14
 8002c7c:	d03b      	beq.n	8002cf6 <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 8002c7e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00f      	beq.n	8002ca6 <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d009      	beq.n	8002ca0 <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff fe4f 	bl	8002930 <OD_getIndex>
 8002c92:	4603      	mov	r3, r0
 8002c94:	021a      	lsls	r2, r3, #8
 8002c96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002ca0:	f06f 030b 	mvn.w	r3, #11
 8002ca4:	e04d      	b.n	8002d42 <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 8002ca6:	6979      	ldr	r1, [r7, #20]
 8002ca8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f7ff fedc 	bl	8002a70 <PDOconfigMap>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8002cbe:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00c      	beq.n	8002ce0 <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	22ff      	movs	r2, #255	; 0xff
 8002cd0:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <PDO_initMapping+0xf0>
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cde:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 8002ce0:	7efb      	ldrb	r3, [r7, #27]
 8002ce2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d206      	bcs.n	8002cf8 <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf0:	4413      	add	r3, r2
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf4:	e000      	b.n	8002cf8 <PDO_initMapping+0x108>
            continue;
 8002cf6:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d06:	2b07      	cmp	r3, #7
 8002d08:	d99c      	bls.n	8002c44 <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d805      	bhi.n	8002d1c <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <PDO_initMapping+0x13a>
 8002d16:	7efb      	ldrb	r3, [r7, #27]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <PDO_initMapping+0x13a>
 8002d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002d3a:	7efa      	ldrb	r2, [r7, #27]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3728      	adds	r7, #40	; 0x28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b08e      	sub	sp, #56	; 0x38
 8002d4e:	af02      	add	r7, sp, #8
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <OD_write_PDO_mapping+0x28>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <OD_write_PDO_mapping+0x28>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	7c5b      	ldrb	r3, [r3, #17]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d901      	bls.n	8002d76 <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 8002d72:	2309      	movs	r3, #9
 8002d74:	e086      	b.n	8002e84 <OD_write_PDO_mapping+0x13a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <OD_write_PDO_mapping+0x4a>
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	7b5b      	ldrb	r3, [r3, #13]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <OD_write_PDO_mapping+0x4e>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	7c5b      	ldrb	r3, [r3, #17]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002d94:	2302      	movs	r3, #2
 8002d96:	e075      	b.n	8002e84 <OD_write_PDO_mapping+0x13a>
    }

    if (stream->subIndex == 0) {
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	7c5b      	ldrb	r3, [r3, #17]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d14d      	bne.n	8002e3c <OD_write_PDO_mapping+0xf2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002da0:	68b8      	ldr	r0, [r7, #8]
 8002da2:	f7ff fd8b 	bl	80028bc <CO_getUint8>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        size_t pdoDataLength = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002db0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d901      	bls.n	8002dbc <OD_write_PDO_mapping+0x72>
            return ODR_MAP_LEN;
 8002db8:	2307      	movs	r3, #7
 8002dba:	e063      	b.n	8002e84 <OD_write_PDO_mapping+0x13a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dc2:	e01e      	b.n	8002e02 <OD_write_PDO_mapping+0xb8>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002dc4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	3310      	adds	r3, #16
 8002dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd4:	4413      	add	r3, r2
 8002dd6:	61fb      	str	r3, [r7, #28]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	61bb      	str	r3, [r7, #24]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	617b      	str	r3, [r7, #20]

            if (mappedLength > dataLength) {
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d901      	bls.n	8002df0 <OD_write_PDO_mapping+0xa6>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002dec:	2306      	movs	r3, #6
 8002dee:	e049      	b.n	8002e84 <OD_write_PDO_mapping+0x13a>
            }
            pdoDataLength += mappedLength;
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	4413      	add	r3, r2
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002df8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e02:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002e06:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d3da      	bcc.n	8002dc4 <OD_write_PDO_mapping+0x7a>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d901      	bls.n	8002e18 <OD_write_PDO_mapping+0xce>
            return ODR_MAP_LEN;
 8002e14:	2307      	movs	r3, #7
 8002e16:	e035      	b.n	8002e84 <OD_write_PDO_mapping+0x13a>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <OD_write_PDO_mapping+0xe0>
 8002e1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <OD_write_PDO_mapping+0xe0>
            return ODR_INVALID_VALUE;
 8002e26:	230f      	movs	r3, #15
 8002e28:	e02c      	b.n	8002e84 <OD_write_PDO_mapping+0x13a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002e38:	735a      	strb	r2, [r3, #13]
 8002e3a:	e01c      	b.n	8002e76 <OD_write_PDO_mapping+0x12c>
    }
    else {
        ODR_t odRet = PDOconfigMap(PDO, CO_getUint32(buf), stream->subIndex-1,
 8002e3c:	68b8      	ldr	r0, [r7, #8]
 8002e3e:	f7ff fd5a 	bl	80028f6 <CO_getUint32>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	7c5b      	ldrb	r3, [r3, #17]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e5e:	f7ff fe07 	bl	8002a70 <PDOconfigMap>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 8002e68:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <OD_write_PDO_mapping+0x12c>
            return odRet;
 8002e70:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002e74:	e006      	b.n	8002e84 <OD_write_PDO_mapping+0x13a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f7ff fa8d 	bl	800239c <OD_writeOriginal>
 8002e82:	4603      	mov	r3, r0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3730      	adds	r7, #48	; 0x30
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f7ff fa23 	bl	80022ec <OD_readOriginal>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 8002eaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d134      	bne.n	8002f1c <OD_read_PDO_commParam+0x90>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	7c5b      	ldrb	r3, [r3, #17]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d130      	bne.n	8002f1c <OD_read_PDO_commParam+0x90>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d12c      	bne.n	8002f1c <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002ec8:	68b8      	ldr	r0, [r7, #8]
 8002eca:	f7ff fd14 	bl	80028f6 <CO_getUint32>
 8002ece:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed8:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 8002eda:	8a7b      	ldrh	r3, [r7, #18]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d011      	beq.n	8002f04 <OD_read_PDO_commParam+0x78>
 8002ee0:	8a7a      	ldrh	r2, [r7, #18]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002eee:	400b      	ands	r3, r1
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d107      	bne.n	8002f04 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	0c1b      	lsrs	r3, r3, #16
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	f8b2 2122 	ldrh.w	r2, [r2, #290]	; 0x122
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <OD_read_PDO_commParam+0x88>
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f12:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 8002f14:	69f9      	ldr	r1, [r7, #28]
 8002f16:	68b8      	ldr	r0, [r7, #8]
 8002f18:	f7ff fcfb 	bl	8002912 <CO_setUint32>
    }

    return returnCode;
 8002f1c:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	791b      	ldrb	r3, [r3, #4]
 8002f3e:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	3305      	adds	r3, #5
 8002f44:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002f4c:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d03e      	beq.n	8002fd4 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	7b1b      	ldrb	r3, [r3, #12]
 8002f5a:	7cfa      	ldrb	r2, [r7, #19]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d334      	bcc.n	8002fca <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	7b1b      	ldrb	r3, [r3, #12]
 8002f64:	7cfa      	ldrb	r2, [r7, #19]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d105      	bne.n	8002f76 <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 8002f6a:	7ffb      	ldrb	r3, [r7, #31]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <CO_PDO_receive+0x58>
 8002f70:	230b      	movs	r3, #11
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e004      	b.n	8002f80 <CO_PDO_receive+0x58>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <CO_PDO_receive+0x58>
 8002f7c:	230d      	movs	r3, #13
 8002f7e:	77fb      	strb	r3, [r7, #31]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	77bb      	strb	r3, [r7, #30]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00c      	beq.n	8002fa8 <CO_PDO_receive+0x80>
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <CO_PDO_receive+0x80>
                && RPDO->SYNC->CANrxToggle
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <CO_PDO_receive+0x80>
            ) {
                bufNo = 1;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 8002fa8:	7fbb      	ldrb	r3, [r7, #30]
 8002faa:	332a      	adds	r3, #42	; 0x2a
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f00e fccc 	bl	8011954 <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 8002fbc:	7fba      	ldrb	r2, [r7, #30]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	3252      	adds	r2, #82	; 0x52
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002fc8:	e004      	b.n	8002fd4 <CO_PDO_receive+0xac>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8002fca:	7ffb      	ldrb	r3, [r7, #31]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002fd0:	230c      	movs	r3, #12
 8002fd2:	77fb      	strb	r3, [r7, #31]
        }
    }

    RPDO->receiveError = err;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	7ffa      	ldrb	r2, [r7, #31]
 8002fd8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
}
 8002fdc:	bf00      	nop
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b092      	sub	sp, #72	; 0x48
 8002fe8:	af04      	add	r7, sp, #16
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <OD_write_14xx+0x26>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <OD_write_14xx+0x26>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <OD_write_14xx+0x26>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b04      	cmp	r3, #4
 8003008:	d901      	bls.n	800300e <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 800300a:	2309      	movs	r3, #9
 800300c:	e0ff      	b.n	800320e <OD_write_14xx+0x22a>
    }

    CO_RPDO_t *RPDO = stream->object;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f00e fc97 	bl	8011954 <memcpy>

    switch (stream->subIndex) {
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	7c5b      	ldrb	r3, [r3, #17]
 800302a:	2b05      	cmp	r3, #5
 800302c:	f000 80d4 	beq.w	80031d8 <OD_write_14xx+0x1f4>
 8003030:	2b05      	cmp	r3, #5
 8003032:	f300 80e4 	bgt.w	80031fe <OD_write_14xx+0x21a>
 8003036:	2b01      	cmp	r3, #1
 8003038:	d003      	beq.n	8003042 <OD_write_14xx+0x5e>
 800303a:	2b02      	cmp	r3, #2
 800303c:	f000 80a5 	beq.w	800318a <OD_write_14xx+0x1a6>
 8003040:	e0dd      	b.n	80031fe <OD_write_14xx+0x21a>
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8003042:	68b8      	ldr	r0, [r7, #8]
 8003044:	f7ff fc57 	bl	80028f6 <CO_getUint32>
 8003048:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	b29b      	uxth	r3, r3
 800304e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003052:	86fb      	strh	r3, [r7, #54]	; 0x36
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	43db      	mvns	r3, r3
 8003058:	0fdb      	lsrs	r3, r3, #31
 800305a:	b2db      	uxtb	r3, r3
 800305c:	61bb      	str	r3, [r7, #24]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	4b6d      	ldr	r3, [pc, #436]	; (8003218 <OD_write_14xx+0x234>)
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d13d      	bne.n	80030e4 <OD_write_14xx+0x100>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <OD_write_14xx+0x9e>
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <OD_write_14xx+0x9e>
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 800307c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800307e:	429a      	cmp	r2, r3
 8003080:	d130      	bne.n	80030e4 <OD_write_14xx+0x100>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d026      	beq.n	80030d6 <OD_write_14xx+0xf2>
 8003088:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800308a:	2b7f      	cmp	r3, #127	; 0x7f
 800308c:	d92a      	bls.n	80030e4 <OD_write_14xx+0x100>
 800308e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003094:	d903      	bls.n	800309e <OD_write_14xx+0xba>
 8003096:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003098:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800309c:	d922      	bls.n	80030e4 <OD_write_14xx+0x100>
 800309e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030a0:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80030a4:	d903      	bls.n	80030ae <OD_write_14xx+0xca>
 80030a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030ac:	d31a      	bcc.n	80030e4 <OD_write_14xx+0x100>
 80030ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030b4:	d903      	bls.n	80030be <OD_write_14xx+0xda>
 80030b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030b8:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80030bc:	d312      	bcc.n	80030e4 <OD_write_14xx+0x100>
 80030be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030c0:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80030c4:	d303      	bcc.n	80030ce <OD_write_14xx+0xea>
 80030c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030cc:	d30a      	bcc.n	80030e4 <OD_write_14xx+0x100>
 80030ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030d4:	d806      	bhi.n	80030e4 <OD_write_14xx+0x100>
            || (valid && PDO->mappedObjectsCount == 0)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <OD_write_14xx+0x104>
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	7b5b      	ldrb	r3, [r3, #13]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <OD_write_14xx+0x104>
        ) {
            return ODR_INVALID_VALUE;
 80030e4:	230f      	movs	r3, #15
 80030e6:	e092      	b.n	800320e <OD_write_14xx+0x22a>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d105      	bne.n	80030fe <OD_write_14xx+0x11a>
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80030f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d07e      	beq.n	80031fc <OD_write_14xx+0x218>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8003104:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003106:	429a      	cmp	r2, r3
 8003108:	d108      	bne.n	800311c <OD_write_14xx+0x138>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003110:	f107 0310 	add.w	r3, r7, #16
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fbfb 	bl	8002912 <CO_setUint32>
            }
            if (!valid) {
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <OD_write_14xx+0x142>
                CAN_ID = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	86fb      	strh	r3, [r7, #54]	; 0x36
            }

            CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	6858      	ldr	r0, [r3, #4]
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8003130:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003132:	4b3a      	ldr	r3, [pc, #232]	; (800321c <OD_write_14xx+0x238>)
 8003134:	9302      	str	r3, [sp, #8]
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	2300      	movs	r3, #0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003142:	f004 f975 	bl	8007430 <CO_CANrxBufferInit>
 8003146:	4603      	mov	r3, r0
 8003148:	75fb      	strb	r3, [r7, #23]
                    0x7FF,              /* mask */
                    0,                  /* rtr */
                    (void*)RPDO,        /* object passed to receive function */
                    CO_PDO_receive);    /* this function will process rx msg */

            if (valid && ret == CO_ERROR_NO) {
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <OD_write_14xx+0x184>
 8003150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <OD_write_14xx+0x184>
                PDO->valid = true;
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	2201      	movs	r2, #1
 800315c:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003162:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
                if (ret != CO_ERROR_NO) {
                    return ODR_DEV_INCOMPAT;
                }
            }
        }
        break;
 8003166:	e049      	b.n	80031fc <OD_write_14xx+0x218>
                PDO->valid = false;
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	2200      	movs	r2, #0
 8003172:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	2200      	movs	r2, #0
 800317a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
                if (ret != CO_ERROR_NO) {
 800317e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d03a      	beq.n	80031fc <OD_write_14xx+0x218>
                    return ODR_DEV_INCOMPAT;
 8003186:	2309      	movs	r3, #9
 8003188:	e041      	b.n	800320e <OD_write_14xx+0x22a>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 800318a:	68b8      	ldr	r0, [r7, #8]
 800318c:	f7ff fb96 	bl	80028bc <CO_getUint8>
 8003190:	4603      	mov	r3, r0
 8003192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8003196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800319a:	2bf0      	cmp	r3, #240	; 0xf0
 800319c:	d905      	bls.n	80031aa <OD_write_14xx+0x1c6>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 800319e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031a2:	2bfd      	cmp	r3, #253	; 0xfd
 80031a4:	d801      	bhi.n	80031aa <OD_write_14xx+0x1c6>
        ) {
            return ODR_INVALID_VALUE;
 80031a6:	230f      	movs	r3, #15
 80031a8:	e031      	b.n	800320e <OD_write_14xx+0x22a>
        }

        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 80031aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ae:	2bf0      	cmp	r3, #240	; 0xf0
 80031b0:	bf94      	ite	ls
 80031b2:	2301      	movls	r3, #1
 80031b4:	2300      	movhi	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	623b      	str	r3, [r7, #32]
        /* Remove old message from the second buffer. */
        if (RPDO->synchronous != synchronous) {
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d003      	beq.n	80031ce <OD_write_14xx+0x1ea>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        }

        RPDO->synchronous = synchronous;
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        break;
 80031d6:	e012      	b.n	80031fe <OD_write_14xx+0x21a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 80031d8:	68b8      	ldr	r0, [r7, #8]
 80031da:	f7ff fb7d 	bl	80028d8 <CO_getUint16>
 80031de:	4603      	mov	r3, r0
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031e8:	fb03 f202 	mul.w	r2, r3, r2
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        RPDO->timeoutTimer = 0;
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        break;
 80031fa:	e000      	b.n	80031fe <OD_write_14xx+0x21a>
        break;
 80031fc:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80031fe:	f107 0110 	add.w	r1, r7, #16
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff f8c8 	bl	800239c <OD_writeOriginal>
 800320c:	4603      	mov	r3, r0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3738      	adds	r7, #56	; 0x38
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	3ffff800 	.word	0x3ffff800
 800321c:	08002f29 	.word	0x08002f29

08003220 <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b090      	sub	sp, #64	; 0x40
 8003224:	af04      	add	r7, sp, #16
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00e      	beq.n	8003256 <CO_RPDO_init+0x36>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <CO_RPDO_init+0x36>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <CO_RPDO_init+0x36>
 8003244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 800324a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <CO_RPDO_init+0x36>
 8003250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003252:	2b00      	cmp	r3, #0
 8003254:	d102      	bne.n	800325c <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003256:	f04f 33ff 	mov.w	r3, #4294967295
 800325a:	e118      	b.n	800348e <CO_RPDO_init+0x26e>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 800325c:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8003260:	2100      	movs	r1, #0
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f00e fb9e 	bl	80119a4 <memset>

    /* Configure object variables */
    PDO->em = em;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003272:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 8003278:	f107 031c 	add.w	r3, r7, #28
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2301      	movs	r3, #1
 8003284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800328a:	f7ff fcb1 	bl	8002bf0 <PDO_initMapping>
 800328e:	4603      	mov	r3, r0
 8003290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8003294:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <CO_RPDO_init+0x82>
        return ret;
 800329c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80032a0:	e0f5      	b.n	800348e <CO_RPDO_init+0x26e>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 80032a6:	f107 0218 	add.w	r2, r7, #24
 80032aa:	2301      	movs	r3, #1
 80032ac:	2101      	movs	r1, #1
 80032ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80032b0:	f7ff fb8d 	bl	80029ce <OD_get_u32>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80032ba:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00e      	beq.n	80032e0 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 80032c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 80032c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80032ca:	f7ff fb31 	bl	8002930 <OD_getIndex>
 80032ce:	4603      	mov	r3, r0
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80032da:	f06f 030b 	mvn.w	r3, #11
 80032de:	e0d6      	b.n	800348e <CO_RPDO_init+0x26e>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	0fdb      	lsrs	r3, r3, #31
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f2:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <CO_RPDO_init+0xf6>
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	7b5b      	ldrb	r3, [r3, #13]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <CO_RPDO_init+0xe8>
 8003302:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003304:	2b00      	cmp	r3, #0
 8003306:	d106      	bne.n	8003316 <CO_RPDO_init+0xf6>
        valid = false;
 8003308:	2300      	movs	r3, #0
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <CO_RPDO_init+0xf6>
 8003312:	2301      	movs	r3, #1
 8003314:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em,
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d001      	beq.n	800332a <CO_RPDO_init+0x10a>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	e000      	b.n	800332c <CO_RPDO_init+0x10c>
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8003332:	221a      	movs	r2, #26
 8003334:	2101      	movs	r1, #1
 8003336:	f7fe f9c7 	bl	80016c8 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8003344:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <CO_RPDO_init+0x13c>
 800334a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800334c:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800334e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003352:	400b      	ands	r3, r1
 8003354:	429a      	cmp	r2, r3
 8003356:	d101      	bne.n	800335c <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 8003358:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800335a:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    ret = CO_CANrxBufferInit(
 800335c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800335e:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8003362:	4b4d      	ldr	r3, [pc, #308]	; (8003498 <CO_RPDO_init+0x278>)
 8003364:	9302      	str	r3, [sp, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	2300      	movs	r3, #0
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003372:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003374:	f004 f85c 	bl	8007430 <CO_CANrxBufferInit>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 800337e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <CO_RPDO_init+0x16c>
        return ret;
 8003386:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800338a:	e080      	b.n	800348e <CO_RPDO_init+0x26e>
    }

    PDO->valid = valid;
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003390:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8003392:	23fe      	movs	r3, #254	; 0xfe
 8003394:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 8003396:	f107 0217 	add.w	r2, r7, #23
 800339a:	2301      	movs	r3, #1
 800339c:	2102      	movs	r1, #2
 800339e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033a0:	f7ff faeb 	bl	800297a <OD_get_u8>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80033aa:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00e      	beq.n	80033d0 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 80033b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 80033b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033ba:	f7ff fab9 	bl	8002930 <OD_getIndex>
 80033be:	4603      	mov	r3, r0
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	f043 0202 	orr.w	r2, r3, #2
 80033c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80033ca:	f06f 030b 	mvn.w	r3, #11
 80033ce:	e05e      	b.n	800348e <CO_RPDO_init+0x26e>
    }

    RPDO->SYNC = SYNC;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2bf0      	cmp	r3, #240	; 0xf0
 80033dc:	bf94      	ite	ls
 80033de:	2301      	movls	r3, #1
 80033e0:	2300      	movhi	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	82bb      	strh	r3, [r7, #20]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 80033f0:	f107 0214 	add.w	r2, r7, #20
 80033f4:	2301      	movs	r3, #1
 80033f6:	2105      	movs	r1, #5
 80033f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033fa:	f7ff fad3 	bl	80029a4 <OD_get_u16>
 80033fe:	4603      	mov	r3, r0
 8003400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 8003404:	8abb      	ldrh	r3, [r7, #20]
 8003406:	461a      	mov	r2, r3
 8003408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340c:	fb03 f202 	mul.w	r2, r3, r2
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	2201      	movs	r2, #1
 800341a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevRxIdx;
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800342c:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003434:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800343c:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = RPDO;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <CO_RPDO_init+0x27c>)
 800344c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <CO_RPDO_init+0x280>)
 8003454:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = RPDO;
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <CO_RPDO_init+0x284>)
 8003464:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	4a0f      	ldr	r2, [pc, #60]	; (80034a8 <CO_RPDO_init+0x288>)
 800346c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003476:	4619      	mov	r1, r3
 8003478:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800347a:	f7ff fa6a 	bl	8002952 <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003484:	4619      	mov	r1, r3
 8003486:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003488:	f7ff fa63 	bl	8002952 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3730      	adds	r7, #48	; 0x30
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	08002f29 	.word	0x08002f29
 800349c:	08002e8d 	.word	0x08002e8d
 80034a0:	08002fe5 	.word	0x08002fe5
 80034a4:	080022ed 	.word	0x080022ed
 80034a8:	08002d4b 	.word	0x08002d4b

080034ac <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b093      	sub	sp, #76	; 0x4c
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <OD_write_18xx+0x26>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <OD_write_18xx+0x26>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <OD_write_18xx+0x26>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d901      	bls.n	80034d6 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 80034d2:	2309      	movs	r3, #9
 80034d4:	e136      	b.n	8003744 <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f00e fa33 	bl	8011954 <memcpy>

    switch (stream->subIndex) {
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	7c5b      	ldrb	r3, [r3, #17]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	2b05      	cmp	r3, #5
 80034f6:	f200 811d 	bhi.w	8003734 <OD_write_18xx+0x288>
 80034fa:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <OD_write_18xx+0x54>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003519 	.word	0x08003519
 8003504:	0800364f 	.word	0x0800364f
 8003508:	080036b5 	.word	0x080036b5
 800350c:	08003735 	.word	0x08003735
 8003510:	080036e3 	.word	0x080036e3
 8003514:	08003707 	.word	0x08003707
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8003518:	68b8      	ldr	r0, [r7, #8]
 800351a:	f7ff f9ec 	bl	80028f6 <CO_getUint32>
 800351e:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003528:	87fb      	strh	r3, [r7, #62]	; 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	43db      	mvns	r3, r3
 800352e:	0fdb      	lsrs	r3, r3, #31
 8003530:	b2db      	uxtb	r3, r3
 8003532:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	4b85      	ldr	r3, [pc, #532]	; (800374c <OD_write_18xx+0x2a0>)
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d13d      	bne.n	80035ba <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d009      	beq.n	8003558 <OD_write_18xx+0xac>
 8003544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <OD_write_18xx+0xac>
 800354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8003552:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003554:	429a      	cmp	r2, r3
 8003556:	d130      	bne.n	80035ba <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d026      	beq.n	80035ac <OD_write_18xx+0x100>
 800355e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003560:	2b7f      	cmp	r3, #127	; 0x7f
 8003562:	d92a      	bls.n	80035ba <OD_write_18xx+0x10e>
 8003564:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356a:	d903      	bls.n	8003574 <OD_write_18xx+0xc8>
 800356c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800356e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003572:	d922      	bls.n	80035ba <OD_write_18xx+0x10e>
 8003574:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003576:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800357a:	d903      	bls.n	8003584 <OD_write_18xx+0xd8>
 800357c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800357e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003582:	d31a      	bcc.n	80035ba <OD_write_18xx+0x10e>
 8003584:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003586:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800358a:	d903      	bls.n	8003594 <OD_write_18xx+0xe8>
 800358c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800358e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003592:	d312      	bcc.n	80035ba <OD_write_18xx+0x10e>
 8003594:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003596:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800359a:	d303      	bcc.n	80035a4 <OD_write_18xx+0xf8>
 800359c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800359e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035a2:	d30a      	bcc.n	80035ba <OD_write_18xx+0x10e>
 80035a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80035a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035aa:	d806      	bhi.n	80035ba <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <OD_write_18xx+0x112>
 80035b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b4:	7b5b      	ldrb	r3, [r3, #13]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 80035ba:	230f      	movs	r3, #15
 80035bc:	e0c2      	b.n	8003744 <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 80035be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d106      	bne.n	80035d6 <OD_write_18xx+0x12a>
 80035c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ca:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80035ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f000 80ae 	beq.w	8003732 <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 80035dc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80035de:	429a      	cmp	r2, r3
 80035e0:	d108      	bne.n	80035f4 <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f98f 	bl	8002912 <CO_setUint32>
            }
            if (!valid) {
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <OD_write_18xx+0x152>
                CAN_ID = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 80035fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003600:	6858      	ldr	r0, [r3, #4]
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360a:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 800360c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800360e:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8003612:	2af0      	cmp	r2, #240	; 0xf0
 8003614:	bf94      	ite	ls
 8003616:	2201      	movls	r2, #1
 8003618:	2200      	movhi	r2, #0
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	4614      	mov	r4, r2
 800361e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003620:	9401      	str	r4, [sp, #4]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2300      	movs	r3, #0
 8003626:	f003 ff61 	bl	80074ec <CO_CANtxBufferInit>
 800362a:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 8003632:	2309      	movs	r3, #9
 8003634:	e086      	b.n	8003744 <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            PDO->valid = valid;
 800363e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 8003644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003646:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003648:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        }
        break;
 800364c:	e071      	b.n	8003732 <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 800364e:	68b8      	ldr	r0, [r7, #8]
 8003650:	f7ff f934 	bl	80028bc <CO_getUint8>
 8003654:	4603      	mov	r3, r0
 8003656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 800365a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800365e:	2bf0      	cmp	r3, #240	; 0xf0
 8003660:	d905      	bls.n	800366e <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003666:	2bfd      	cmp	r3, #253	; 0xfd
 8003668:	d801      	bhi.n	800366e <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 800366a:	230f      	movs	r3, #15
 800366c:	e06a      	b.n	8003744 <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 800366e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003672:	2bf0      	cmp	r3, #240	; 0xf0
 8003674:	bf94      	ite	ls
 8003676:	2301      	movls	r3, #1
 8003678:	2300      	movhi	r3, #0
 800367a:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003682:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 8003684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003686:	22ff      	movs	r2, #255	; 0xff
 8003688:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003692:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
        TPDO->sendRequest = true;
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	2201      	movs	r2, #1
 800369a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 80036ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ae:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
        break;
 80036b2:	e03f      	b.n	8003734 <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 80036bc:	230f      	movs	r3, #15
 80036be:	e041      	b.n	8003744 <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 80036c0:	68b8      	ldr	r0, [r7, #8]
 80036c2:	f7ff f909 	bl	80028d8 <CO_getUint16>
 80036c6:	4603      	mov	r3, r0
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	2264      	movs	r2, #100	; 0x64
 80036ce:	fb03 f202 	mul.w	r2, r3, r2
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        TPDO->inhibitTimer = 0;
 80036d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        break;
 80036e0:	e028      	b.n	8003734 <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 80036e2:	68b8      	ldr	r0, [r7, #8]
 80036e4:	f7ff f8f8 	bl	80028d8 <CO_getUint16>
 80036e8:	4603      	mov	r3, r0
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036f2:	fb03 f202 	mul.w	r2, r3, r2
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        TPDO->eventTimer = 0;
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        break;
 8003704:	e016      	b.n	8003734 <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 8003706:	68b8      	ldr	r0, [r7, #8]
 8003708:	f7ff f8d8 	bl	80028bc <CO_getUint8>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (PDO->valid || syncStartValue > 240) {
 8003712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <OD_write_18xx+0x276>
 800371a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800371e:	2bf0      	cmp	r3, #240	; 0xf0
 8003720:	d901      	bls.n	8003726 <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 8003722:	230f      	movs	r3, #15
 8003724:	e00e      	b.n	8003744 <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800372c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        break;
 8003730:	e000      	b.n	8003734 <OD_write_18xx+0x288>
        break;
 8003732:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8003734:	f107 0114 	add.w	r1, r7, #20
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7fe fe2d 	bl	800239c <OD_writeOriginal>
 8003742:	4603      	mov	r3, r0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3744      	adds	r7, #68	; 0x44
 8003748:	46bd      	mov	sp, r7
 800374a:	bd90      	pop	{r4, r7, pc}
 800374c:	3ffff800 	.word	0x3ffff800

08003750 <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08e      	sub	sp, #56	; 0x38
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00e      	beq.n	8003786 <CO_TPDO_init+0x36>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <CO_TPDO_init+0x36>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <CO_TPDO_init+0x36>
 8003774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 800377a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <CO_TPDO_init+0x36>
 8003780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
 800378a:	e14f      	b.n	8003a2c <CO_TPDO_init+0x2dc>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 800378c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8003790:	2100      	movs	r1, #0
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f00e f906 	bl	80119a4 <memset>

    /* Configure object variables */
    PDO->em = em;
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037a2:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 80037a8:	f107 031c 	add.w	r3, r7, #28
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	2300      	movs	r3, #0
 80037b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ba:	f7ff fa19 	bl	8002bf0 <PDO_initMapping>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 80037c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <CO_TPDO_init+0x82>
        return ret;
 80037cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80037d0:	e12c      	b.n	8003a2c <CO_TPDO_init+0x2dc>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80037d2:	23fe      	movs	r3, #254	; 0xfe
 80037d4:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 80037d6:	f107 021b 	add.w	r2, r7, #27
 80037da:	2301      	movs	r3, #1
 80037dc:	2102      	movs	r1, #2
 80037de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037e0:	f7ff f8cb 	bl	800297a <OD_get_u8>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80037ea:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00e      	beq.n	8003810 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 80037f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 80037f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037fa:	f7ff f899 	bl	8002930 <OD_getIndex>
 80037fe:	4603      	mov	r3, r0
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	f043 0202 	orr.w	r2, r3, #2
 8003806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003808:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800380a:	f06f 030b 	mvn.w	r3, #11
 800380e:	e10d      	b.n	8003a2c <CO_TPDO_init+0x2dc>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003810:	7efb      	ldrb	r3, [r7, #27]
 8003812:	2bfd      	cmp	r3, #253	; 0xfd
 8003814:	d804      	bhi.n	8003820 <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8003816:	7efb      	ldrb	r3, [r7, #27]
 8003818:	2bf0      	cmp	r3, #240	; 0xf0
 800381a:	d901      	bls.n	8003820 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 800381c:	23fe      	movs	r3, #254	; 0xfe
 800381e:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 8003820:	7efa      	ldrb	r2, [r7, #27]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
    TPDO->sendRequest = true;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8003834:	f107 0214 	add.w	r2, r7, #20
 8003838:	2301      	movs	r3, #1
 800383a:	2101      	movs	r1, #1
 800383c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800383e:	f7ff f8c6 	bl	80029ce <OD_get_u32>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8003848:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00e      	beq.n	800386e <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8003850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8003856:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003858:	f7ff f86a 	bl	8002930 <OD_getIndex>
 800385c:	4603      	mov	r3, r0
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	f043 0201 	orr.w	r2, r3, #1
 8003864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003866:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003868:	f06f 030b 	mvn.w	r3, #11
 800386c:	e0de      	b.n	8003a2c <CO_TPDO_init+0x2dc>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	43db      	mvns	r3, r3
 8003872:	0fdb      	lsrs	r3, r3, #31
 8003874:	b2db      	uxtb	r3, r3
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003880:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <CO_TPDO_init+0x154>
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	7b5b      	ldrb	r3, [r3, #13]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <CO_TPDO_init+0x146>
 8003890:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <CO_TPDO_init+0x154>
        valid = false;
 8003896:	2300      	movs	r3, #0
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <CO_TPDO_init+0x154>
 80038a0:	2301      	movs	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00e      	beq.n	80038c8 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d001      	beq.n	80038b8 <CO_TPDO_init+0x168>
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	e000      	b.n	80038ba <CO_TPDO_init+0x16a>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80038c0:	221a      	movs	r2, #26
 80038c2:	2101      	movs	r1, #1
 80038c4:	f7fd ff00 	bl	80016c8 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 80038d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <CO_TPDO_init+0x19a>
 80038d8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80038da:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80038dc:	f64f 7380 	movw	r3, #65408	; 0xff80
 80038e0:	400b      	ands	r3, r1
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d101      	bne.n	80038ea <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 80038e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038e8:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80038f4:	2af0      	cmp	r2, #240	; 0xf0
 80038f6:	bf94      	ite	ls
 80038f8:	2201      	movls	r2, #1
 80038fa:	2200      	movhi	r2, #0
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	4610      	mov	r0, r2
 8003900:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003902:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8003906:	9001      	str	r0, [sp, #4]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800390e:	f003 fded 	bl	80074ec <CO_CANtxBufferInit>
 8003912:	4602      	mov	r2, r0
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003924:	f04f 33ff 	mov.w	r3, #4294967295
 8003928:	e080      	b.n	8003a2c <CO_TPDO_init+0x2dc>
    }

    PDO->valid = valid;
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800392e:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8003938:	f107 0212 	add.w	r2, r7, #18
 800393c:	2301      	movs	r3, #1
 800393e:	2103      	movs	r1, #3
 8003940:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003942:	f7ff f82f 	bl	80029a4 <OD_get_u16>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 800394c:	f107 0210 	add.w	r2, r7, #16
 8003950:	2301      	movs	r3, #1
 8003952:	2105      	movs	r1, #5
 8003954:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003956:	f7ff f825 	bl	80029a4 <OD_get_u16>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->inhibitTime_us = inhibitTime * 100;
 8003960:	8a7b      	ldrh	r3, [r7, #18]
 8003962:	461a      	mov	r2, r3
 8003964:	2364      	movs	r3, #100	; 0x64
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    TPDO->eventTime_us = eventTime * 1000;
 8003972:	8a3b      	ldrh	r3, [r7, #16]
 8003974:	461a      	mov	r2, r3
 8003976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	461a      	mov	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8003994:	2301      	movs	r3, #1
 8003996:	2106      	movs	r1, #6
 8003998:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800399a:	f7fe ffee 	bl	800297a <OD_get_u8>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->SYNC = SYNC;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    TPDO->syncCounter = 255;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	22ff      	movs	r2, #255	; 0xff
 80039b0:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80039ca:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80039d2:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80039da:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <CO_TPDO_init+0x2e4>)
 80039ea:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <CO_TPDO_init+0x2e8>)
 80039f2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <CO_TPDO_init+0x2ec>)
 8003a02:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <CO_TPDO_init+0x2f0>)
 8003a0a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a14:	4619      	mov	r1, r3
 8003a16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003a18:	f7fe ff9b 	bl	8002952 <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003a22:	4619      	mov	r1, r3
 8003a24:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003a26:	f7fe ff94 	bl	8002952 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3730      	adds	r7, #48	; 0x30
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	08002e8d 	.word	0x08002e8d
 8003a38:	080034ad 	.word	0x080034ad
 8003a3c:	080022ed 	.word	0x080022ed
 8003a40:	08002d4b 	.word	0x08002d4b

08003a44 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003a50:	73fb      	strb	r3, [r7, #15]
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <OD_getIndex+0x14>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	e000      	b.n	8003a92 <OD_getIndex+0x16>
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <OD_mappable>:
static inline bool_t OD_mappable(OD_stream_t *stream) {
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <OD_mappable+0x1e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	7c1b      	ldrb	r3, [r3, #16]
 8003ab0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <OD_mappable+0x1e>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <OD_mappable+0x20>
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <OD_extension_init>:
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <OD_extension_init+0x14>
 8003ada:	2305      	movs	r3, #5
 8003adc:	e003      	b.n	8003ae6 <OD_extension_init+0x1c>
    entry->extension = extension;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <OD_get_u8>:
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af02      	add	r7, sp, #8
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	460b      	mov	r3, r1
 8003b00:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003b02:	7af9      	ldrb	r1, [r7, #11]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2301      	movs	r3, #1
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7fe fe2b 	bl	8002768 <OD_get_value>
 8003b12:	4603      	mov	r3, r0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <OD_get_u32>:
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003b2c:	7af9      	ldrb	r1, [r7, #11]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2304      	movs	r3, #4
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f7fe fe16 	bl	8002768 <OD_get_value>
 8003b3c:	4603      	mov	r3, r0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af02      	add	r7, sp, #8
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	460b      	mov	r3, r1
 8003b54:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8003b56:	1d3a      	adds	r2, r7, #4
 8003b58:	7af9      	ldrb	r1, [r7, #11]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2304      	movs	r3, #4
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7fe fe37 	bl	80027d4 <OD_set_value>
 8003b66:	4603      	mov	r3, r0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	791b      	ldrb	r3, [r3, #4]
 8003b82:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	3305      	adds	r3, #5
 8003b88:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d115      	bne.n	8003bbc <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d103      	bne.n	8003ba0 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8003b9e:	e00d      	b.n	8003bbc <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	333c      	adds	r3, #60	; 0x3c
 8003bac:	7cfa      	ldrb	r2, [r7, #19]
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f00d fecf 	bl	8011954 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003bbc:	bf00      	nop
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08a      	sub	sp, #40	; 0x28
 8003bc8:	af04      	add	r7, sp, #16
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	4611      	mov	r1, r2
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	80fb      	strh	r3, [r7, #6]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	6a3a      	ldr	r2, [r7, #32]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d106      	bne.n	8003bf2 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d101      	bne.n	8003bf2 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e04e      	b.n	8003c90 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	db02      	blt.n	8003c0a <CO_SDOserver_init_canRxTx+0x46>
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	e000      	b.n	8003c0c <CO_SDOserver_init_canRxTx+0x48>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	db02      	blt.n	8003c1a <CO_SDOserver_init_canRxTx+0x56>
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	e000      	b.n	8003c1c <CO_SDOserver_init_canRxTx+0x58>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8003c1e:	8afb      	ldrh	r3, [r7, #22]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d006      	beq.n	8003c32 <CO_SDOserver_init_canRxTx+0x6e>
 8003c24:	8abb      	ldrh	r3, [r7, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	611a      	str	r2, [r3, #16]
 8003c30:	e006      	b.n	8003c40 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003c40:	8afa      	ldrh	r2, [r7, #22]
 8003c42:	88f9      	ldrh	r1, [r7, #6]
 8003c44:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <CO_SDOserver_init_canRxTx+0xd4>)
 8003c46:	9302      	str	r3, [sp, #8]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003c54:	68b8      	ldr	r0, [r7, #8]
 8003c56:	f003 fbeb 	bl	8007430 <CO_CANrxBufferInit>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	8aba      	ldrh	r2, [r7, #20]
 8003c64:	88b9      	ldrh	r1, [r7, #4]
 8003c66:	2300      	movs	r3, #0
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f003 fc3c 	bl	80074ec <CO_CANtxBufferInit>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003c82:	23ff      	movs	r3, #255	; 0xff
 8003c84:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8003c8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	08003b71 	.word	0x08003b71

08003c9c <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b08f      	sub	sp, #60	; 0x3c
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <OD_write_1201_additional+0x20>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <OD_write_1201_additional+0x20>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8003cbc:	2309      	movs	r3, #9
 8003cbe:	e0f9      	b.n	8003eb4 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	7c5b      	ldrb	r3, [r3, #17]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	f200 80e8 	bhi.w	8003ea0 <OD_write_1201_additional+0x204>
 8003cd0:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <OD_write_1201_additional+0x3c>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003db1 	.word	0x08003db1
 8003ce4:	08003e77 	.word	0x08003e77
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 8003ce8:	2304      	movs	r3, #4
 8003cea:	e0e3      	b.n	8003eb4 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8003cec:	68b8      	ldr	r0, [r7, #8]
 8003cee:	f7ff feb7 	bl	8003a60 <CO_getUint32>
 8003cf2:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cfc:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d08:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	0fdb      	lsrs	r3, r3, #31
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4b69      	ldr	r3, [pc, #420]	; (8003ebc <OD_write_1201_additional+0x220>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d134      	bne.n	8003d88 <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <OD_write_1201_additional+0x98>
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <OD_write_1201_additional+0x98>
 8003d2c:	8afa      	ldrh	r2, [r7, #22]
 8003d2e:	8abb      	ldrh	r3, [r7, #20]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d129      	bne.n	8003d88 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d028      	beq.n	8003d8c <OD_write_1201_additional+0xf0>
 8003d3a:	8afb      	ldrh	r3, [r7, #22]
 8003d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d3e:	d923      	bls.n	8003d88 <OD_write_1201_additional+0xec>
 8003d40:	8afb      	ldrh	r3, [r7, #22]
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d46:	d903      	bls.n	8003d50 <OD_write_1201_additional+0xb4>
 8003d48:	8afb      	ldrh	r3, [r7, #22]
 8003d4a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003d4e:	d91b      	bls.n	8003d88 <OD_write_1201_additional+0xec>
 8003d50:	8afb      	ldrh	r3, [r7, #22]
 8003d52:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003d56:	d903      	bls.n	8003d60 <OD_write_1201_additional+0xc4>
 8003d58:	8afb      	ldrh	r3, [r7, #22]
 8003d5a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d5e:	d313      	bcc.n	8003d88 <OD_write_1201_additional+0xec>
 8003d60:	8afb      	ldrh	r3, [r7, #22]
 8003d62:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d66:	d903      	bls.n	8003d70 <OD_write_1201_additional+0xd4>
 8003d68:	8afb      	ldrh	r3, [r7, #22]
 8003d6a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003d6e:	d30b      	bcc.n	8003d88 <OD_write_1201_additional+0xec>
 8003d70:	8afb      	ldrh	r3, [r7, #22]
 8003d72:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003d76:	d303      	bcc.n	8003d80 <OD_write_1201_additional+0xe4>
 8003d78:	8afb      	ldrh	r3, [r7, #22]
 8003d7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d7e:	d303      	bcc.n	8003d88 <OD_write_1201_additional+0xec>
 8003d80:	8afb      	ldrh	r3, [r7, #22]
 8003d82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d86:	d901      	bls.n	8003d8c <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 8003d88:	230f      	movs	r3, #15
 8003d8a:	e093      	b.n	8003eb4 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
 8003d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	4603      	mov	r3, r0
 8003da8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003daa:	f7ff ff0b 	bl	8003bc4 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 8003dae:	e07a      	b.n	8003ea6 <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8003db0:	68b8      	ldr	r0, [r7, #8]
 8003db2:	f7ff fe55 	bl	8003a60 <CO_getUint32>
 8003db6:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dc0:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dcc:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	0fdb      	lsrs	r3, r3, #31
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8003dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <OD_write_1201_additional+0x220>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d134      	bne.n	8003e4c <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <OD_write_1201_additional+0x15c>
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <OD_write_1201_additional+0x15c>
 8003df0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003df2:	8c3b      	ldrh	r3, [r7, #32]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d129      	bne.n	8003e4c <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d028      	beq.n	8003e50 <OD_write_1201_additional+0x1b4>
 8003dfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e00:	2b7f      	cmp	r3, #127	; 0x7f
 8003e02:	d923      	bls.n	8003e4c <OD_write_1201_additional+0x1b0>
 8003e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0a:	d903      	bls.n	8003e14 <OD_write_1201_additional+0x178>
 8003e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e0e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003e12:	d91b      	bls.n	8003e4c <OD_write_1201_additional+0x1b0>
 8003e14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e16:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003e1a:	d903      	bls.n	8003e24 <OD_write_1201_additional+0x188>
 8003e1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e1e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e22:	d313      	bcc.n	8003e4c <OD_write_1201_additional+0x1b0>
 8003e24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e26:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e2a:	d903      	bls.n	8003e34 <OD_write_1201_additional+0x198>
 8003e2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e2e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003e32:	d30b      	bcc.n	8003e4c <OD_write_1201_additional+0x1b0>
 8003e34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e36:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003e3a:	d303      	bcc.n	8003e44 <OD_write_1201_additional+0x1a8>
 8003e3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e42:	d303      	bcc.n	8003e4c <OD_write_1201_additional+0x1b0>
 8003e44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e4a:	d901      	bls.n	8003e50 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 8003e4c:	230f      	movs	r3, #15
 8003e4e:	e031      	b.n	8003eb4 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e56:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e66:	9201      	str	r2, [sp, #4]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e70:	f7ff fea8 	bl	8003bc4 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 8003e74:	e017      	b.n	8003ea6 <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d001      	beq.n	8003e80 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8003e7c:	230b      	movs	r3, #11
 8003e7e:	e019      	b.n	8003eb4 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8003e80:	68b8      	ldr	r0, [r7, #8]
 8003e82:	f7ff fddf 	bl	8003a44 <CO_getUint8>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId < 1 || nodeId > 127) {
 8003e8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <OD_write_1201_additional+0x200>
 8003e94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	da03      	bge.n	8003ea4 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8003e9c:	230f      	movs	r3, #15
 8003e9e:	e009      	b.n	8003eb4 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 8003ea0:	230e      	movs	r3, #14
 8003ea2:	e007      	b.n	8003eb4 <OD_write_1201_additional+0x218>
            break;
 8003ea4:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7fe fa75 	bl	800239c <OD_writeOriginal>
 8003eb2:	4603      	mov	r3, r0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3734      	adds	r7, #52	; 0x34
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd90      	pop	{r4, r7, pc}
 8003ebc:	3ffff800 	.word	0x3ffff800

08003ec0 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08c      	sub	sp, #48	; 0x30
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <CO_SDOserver_init+0x26>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <CO_SDOserver_init+0x26>
 8003eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <CO_SDOserver_init+0x26>
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eea:	e0f5      	b.n	80040d8 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 8003ef8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003efa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003efe:	fb03 f202 	mul.w	r2, r3, r2
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d117      	bne.n	8003f42 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <CO_SDOserver_init+0x60>
 8003f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	da02      	bge.n	8003f26 <CO_SDOserver_init+0x66>
 8003f20:	f04f 33ff 	mov.w	r3, #4294967295
 8003f24:	e0d8      	b.n	80040d8 <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8003f38:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	611a      	str	r2, [r3, #16]
 8003f40:	e0a4      	b.n	800408c <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fd9a 	bl	8003a7c <OD_getIndex>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 8003f4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f4e:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8003f52:	d123      	bne.n	8003f9c <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <CO_SDOserver_init+0xa2>
 8003f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	da02      	bge.n	8003f68 <CO_SDOserver_init+0xa8>
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295
 8003f66:	e0b7      	b.n	80040d8 <CO_SDOserver_init+0x218>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003f70:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003f72:	78fb      	ldrb	r3, [r7, #3]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8003f7a:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8003f82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f84:	2301      	movs	r3, #1
 8003f86:	2101      	movs	r1, #1
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff fddc 	bl	8003b46 <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8003f8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f90:	2301      	movs	r3, #1
 8003f92:	2102      	movs	r1, #2
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff fdd6 	bl	8003b46 <OD_set_u32>
 8003f9a:	e077      	b.n	800408c <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 8003f9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f9e:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8003fa2:	d96f      	bls.n	8004084 <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8003fa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fa6:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8003faa:	d26b      	bcs.n	8004084 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003fac:	f107 021d 	add.w	r2, r7, #29
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff fd9c 	bl	8003af2 <OD_get_u8>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8003fc0:	f107 0218 	add.w	r2, r7, #24
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff fda7 	bl	8003b1c <OD_get_u32>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8003fd4:	f107 0214 	add.w	r2, r7, #20
 8003fd8:	2301      	movs	r3, #1
 8003fda:	2102      	movs	r1, #2
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff fd9d 	bl	8003b1c <OD_get_u32>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 8003fe6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10d      	bne.n	800400a <CO_SDOserver_init+0x14a>
 8003fee:	7f7b      	ldrb	r3, [r7, #29]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d002      	beq.n	8003ffa <CO_SDOserver_init+0x13a>
 8003ff4:	7f7b      	ldrb	r3, [r7, #29]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d107      	bne.n	800400a <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 8003ffa:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d103      	bne.n	800400a <CO_SDOserver_init+0x14a>
 8004002:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 800400a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <CO_SDOserver_init+0x156>
 8004010:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004014:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8004016:	f06f 030b 	mvn.w	r3, #11
 800401a:	e05d      	b.n	80040d8 <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	db05      	blt.n	800402e <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8004026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800402a:	b29b      	uxth	r3, r3
 800402c:	e000      	b.n	8004030 <CO_SDOserver_init+0x170>
 800402e:	2300      	movs	r3, #0
 8004030:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	db05      	blt.n	8004044 <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 800403c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004040:	b29b      	uxth	r3, r3
 8004042:	e000      	b.n	8004046 <CO_SDOserver_init+0x186>
 8004044:	2300      	movs	r3, #0
 8004046:	84bb      	strh	r3, [r7, #36]	; 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <CO_SDOserver_init+0x220>)
 8004052:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a23      	ldr	r2, [pc, #140]	; (80040e4 <CO_SDOserver_init+0x224>)
 8004058:	65da      	str	r2, [r3, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3354      	adds	r3, #84	; 0x54
 800405e:	4619      	mov	r1, r3
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff fd32 	bl	8003aca <OD_extension_init>
 8004066:	4603      	mov	r3, r0
 8004068:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 800406a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8004072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <CO_SDOserver_init+0x1be>
 8004078:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800407a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407c:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 800407e:	f06f 030b 	mvn.w	r3, #11
 8004082:	e029      	b.n	80040d8 <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8004084:	f04f 33ff 	mov.w	r3, #4294967295
 8004088:	e026      	b.n	80040d8 <CO_SDOserver_init+0x218>
        ) {
 800408a:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	639a      	str	r2, [r3, #56]	; 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004096:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800409c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80040a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040ba:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 80040bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040c0:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 80040c4:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80040c6:	9201      	str	r2, [sp, #4]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	4603      	mov	r3, r0
 80040cc:	460a      	mov	r2, r1
 80040ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7ff fd77 	bl	8003bc4 <CO_SDOserver_init_canRxTx>
 80040d6:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3728      	adds	r7, #40	; 0x28
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	080022ed 	.word	0x080022ed
 80040e4:	08003c9d 	.word	0x08003c9d

080040e8 <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b08d      	sub	sp, #52	; 0x34
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	4611      	mov	r1, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	460b      	mov	r3, r1
 80040f8:	71fb      	strb	r3, [r7, #7]
 80040fa:	4613      	mov	r3, r2
 80040fc:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (SDO->finished) {
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	2b00      	cmp	r3, #0
 800410c:	d07b      	beq.n	8004206 <validateAndWriteToOD+0x11e>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004112:	2b00      	cmp	r3, #0
 8004114:	d015      	beq.n	8004142 <validateAndWriteToOD+0x5a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411e:	429a      	cmp	r2, r3
 8004120:	d00f      	beq.n	8004142 <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800412a:	429a      	cmp	r2, r3
 800412c:	d901      	bls.n	8004132 <validateAndWriteToOD+0x4a>
 800412e:	4a77      	ldr	r2, [pc, #476]	; (800430c <validateAndWriteToOD+0x224>)
 8004130:	e000      	b.n	8004134 <validateAndWriteToOD+0x4c>
 8004132:	4a77      	ldr	r2, [pc, #476]	; (8004310 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	751a      	strb	r2, [r3, #20]
            return false;
 800413e:	2300      	movs	r3, #0
 8004140:	e0df      	b.n	8004302 <validateAndWriteToOD+0x21a>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800414e:	b25b      	sxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	da3c      	bge.n	80041ce <validateAndWriteToOD+0xe6>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	2b00      	cmp	r3, #0
 8004158:	d004      	beq.n	8004164 <validateAndWriteToOD+0x7c>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004160:	429a      	cmp	r2, r3
 8004162:	d934      	bls.n	80041ce <validateAndWriteToOD+0xe6>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800416a:	3302      	adds	r3, #2
 800416c:	2b20      	cmp	r3, #32
 800416e:	d82e      	bhi.n	80041ce <validateAndWriteToOD+0xe6>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004176:	1c59      	adds	r1, r3, #1
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	2200      	movs	r2, #0
 8004184:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            SDO->sizeTran++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	669a      	str	r2, [r3, #104]	; 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <validateAndWriteToOD+0xba>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800419e:	429a      	cmp	r2, r3
 80041a0:	d910      	bls.n	80041c4 <validateAndWriteToOD+0xdc>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041a8:	1c59      	adds	r1, r3, #1
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                SDO->sizeTran++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	669a      	str	r2, [r3, #104]	; 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	621a      	str	r2, [r3, #32]
 80041cc:	e02d      	b.n	800422a <validateAndWriteToOD+0x142>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d104      	bne.n	80041de <validateAndWriteToOD+0xf6>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	621a      	str	r2, [r3, #32]
 80041dc:	e025      	b.n	800422a <validateAndWriteToOD+0x142>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d020      	beq.n	800422a <validateAndWriteToOD+0x142>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80041ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d201      	bcs.n	80041f6 <validateAndWriteToOD+0x10e>
 80041f2:	4a46      	ldr	r2, [pc, #280]	; (800430c <validateAndWriteToOD+0x224>)
 80041f4:	e000      	b.n	80041f8 <validateAndWriteToOD+0x110>
 80041f6:	4a46      	ldr	r2, [pc, #280]	; (8004310 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	751a      	strb	r2, [r3, #20]
            return false;
 8004202:	2300      	movs	r3, #0
 8004204:	e07d      	b.n	8004302 <validateAndWriteToOD+0x21a>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <validateAndWriteToOD+0x142>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004216:	429a      	cmp	r2, r3
 8004218:	d907      	bls.n	800422a <validateAndWriteToOD+0x142>
            *abortCode = CO_SDO_AB_DATA_LONG;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4a3b      	ldr	r2, [pc, #236]	; (800430c <validateAndWriteToOD+0x224>)
 800421e:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	751a      	strb	r2, [r3, #20]
            return false;
 8004226:	2300      	movs	r3, #0
 8004228:	e06b      	b.n	8004302 <validateAndWriteToOD+0x21a>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
    bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3318      	adds	r3, #24
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fc33 	bl	8003a9e <OD_mappable>
 8004238:	6278      	str	r0, [r7, #36]	; 0x24

    if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <validateAndWriteToOD+0x16a>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004244:	f3ef 8210 	mrs	r2, PRIMASK
 8004248:	61fa      	str	r2, [r7, #28]
  return(result);
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800424e:	b672      	cpsid	i
}
 8004250:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f103 0018 	add.w	r0, r3, #24
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	47a0      	blx	r4
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                   SDO->bufOffsetWr, &countWritten);
    if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <validateAndWriteToOD+0x1a2>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004280:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f383 8810 	msr	PRIMASK, r3
}
 8004288:	bf00      	nop

    SDO->bufOffsetWr = 0;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8004292:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004296:	2b00      	cmp	r3, #0
 8004298:	d011      	beq.n	80042be <validateAndWriteToOD+0x1d6>
 800429a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d00c      	beq.n	80042be <validateAndWriteToOD+0x1d6>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80042a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe fa3f 	bl	800272c <OD_getSDOabCode>
 80042ae:	4602      	mov	r2, r0
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	751a      	strb	r2, [r3, #20]
        return false;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e021      	b.n	8004302 <validateAndWriteToOD+0x21a>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00c      	beq.n	80042e0 <validateAndWriteToOD+0x1f8>
 80042c6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d107      	bne.n	80042e0 <validateAndWriteToOD+0x1f8>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <validateAndWriteToOD+0x228>)
 80042d4:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	751a      	strb	r2, [r3, #20]
        return false;
 80042dc:	2300      	movs	r3, #0
 80042de:	e010      	b.n	8004302 <validateAndWriteToOD+0x21a>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <validateAndWriteToOD+0x218>
 80042e8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d107      	bne.n	8004300 <validateAndWriteToOD+0x218>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a06      	ldr	r2, [pc, #24]	; (800430c <validateAndWriteToOD+0x224>)
 80042f4:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	751a      	strb	r2, [r3, #20]
        return false;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e000      	b.n	8004302 <validateAndWriteToOD+0x21a>
    }

    return true;
 8004300:	2301      	movs	r3, #1
}
 8004302:	4618      	mov	r0, r3
 8004304:	3734      	adds	r7, #52	; 0x34
 8004306:	46bd      	mov	sp, r7
 8004308:	bd90      	pop	{r4, r7, pc}
 800430a:	bf00      	nop
 800430c:	06070012 	.word	0x06070012
 8004310:	06070013 	.word	0x06070013

08004314 <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b08f      	sub	sp, #60	; 0x3c
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (!SDO->finished && countRemain < countMinimum) {
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	2b00      	cmp	r3, #0
 8004338:	f040 80b1 	bne.w	800449e <readFromOd+0x18a>
 800433c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	429a      	cmp	r2, r3
 8004342:	f080 80ac 	bcs.w	800449e <readFromOd+0x18a>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004358:	4413      	add	r3, r2
 800435a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435c:	4619      	mov	r1, r3
 800435e:	f00d fb07 	bl	8011970 <memmove>
        SDO->bufOffsetRd = 0;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        SDO->bufOffsetWr = countRemain;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	f1c3 0320 	rsb	r3, r3, #32
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
        uint8_t *bufShifted = SDO->buf + countRemain;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	4413      	add	r3, r2
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
        bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3318      	adds	r3, #24
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fb85 	bl	8003a9e <OD_mappable>
 8004394:	6238      	str	r0, [r7, #32]

        if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <readFromOd+0x9a>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a0:	f3ef 8210 	mrs	r2, PRIMASK
 80043a4:	61fa      	str	r2, [r7, #28]
  return(result);
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80043aa:	b672      	cpsid	i
}
 80043ac:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f103 0018 	add.w	r0, r3, #24
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043c0:	47a0      	blx	r4
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                      countRdRequest, &countRd);
        if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <readFromOd+0xca>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	f383 8810 	msr	PRIMASK, r3
}
 80043dc:	bf00      	nop

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 80043de:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <readFromOd+0xf6>
 80043e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d00c      	beq.n	800440a <readFromOd+0xf6>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80043f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe f999 	bl	800272c <OD_getSDOabCode>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	751a      	strb	r2, [r3, #20]
            return false;
 8004406:	2300      	movs	r3, #0
 8004408:	e04a      	b.n	80044a0 <readFromOd+0x18c>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d022      	beq.n	8004456 <readFromOd+0x142>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004416:	b25b      	sxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	da1c      	bge.n	8004456 <readFromOd+0x142>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	4413      	add	r3, r2
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 8004426:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004428:	f7fb fed2 	bl	80001d0 <strlen>
 800442c:	6338      	str	r0, [r7, #48]	; 0x30
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <readFromOd+0x124>
 8004434:	2301      	movs	r3, #1
 8004436:	633b      	str	r3, [r7, #48]	; 0x30
            if (countStr < countRd) {
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443c:	429a      	cmp	r2, r3
 800443e:	d20a      	bcs.n	8004456 <readFromOd+0x142>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	617b      	str	r3, [r7, #20]
                odRet = ODR_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	441a      	add	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	441a      	add	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <readFromOd+0x162>
 800446c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d110      	bne.n	8004498 <readFromOd+0x184>
            SDO->finished = false;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	671a      	str	r2, [r3, #112]	; 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	d90a      	bls.n	800449e <readFromOd+0x18a>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4a07      	ldr	r2, [pc, #28]	; (80044a8 <readFromOd+0x194>)
 800448c:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	751a      	strb	r2, [r3, #20]
                return false;
 8004494:	2300      	movs	r3, #0
 8004496:	e003      	b.n	80044a0 <readFromOd+0x18c>
            }
        }
        else {
            SDO->finished = true;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	671a      	str	r2, [r3, #112]	; 0x70
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 800449e:	2301      	movs	r3, #1
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	373c      	adds	r7, #60	; 0x3c
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	06040047 	.word	0x06040047

080044ac <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b09b      	sub	sp, #108	; 0x6c
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 80044c0:	f06f 0301 	mvn.w	r3, #1
 80044c4:	f000 bcfe 	b.w	8004ec4 <CO_SDOserver_process+0xa18>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	62bb      	str	r3, [r7, #40]	; 0x28
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	657b      	str	r3, [r7, #84]	; 0x54


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <CO_SDOserver_process+0x56>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	7d1b      	ldrb	r3, [r3, #20]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <CO_SDOserver_process+0x56>
 80044f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004500:	e2d3      	b.n	8004aaa <CO_SDOserver_process+0x5fe>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <CO_SDOserver_process+0x64>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d109      	bne.n	8004524 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 800451c:	2300      	movs	r3, #0
 800451e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004522:	e2c2      	b.n	8004aaa <CO_SDOserver_process+0x5fe>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8004524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 82bf 	beq.w	8004aaa <CO_SDOserver_process+0x5fe>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	7d1b      	ldrb	r3, [r3, #20]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	f040 80ce 	bne.w	80046d4 <CO_SDOserver_process+0x228>
            bool_t upload = false;
 8004538:	2300      	movs	r3, #0
 800453a:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004546:	2b20      	cmp	r3, #32
 8004548:	d103      	bne.n	8004552 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2211      	movs	r2, #17
 800454e:	751a      	strb	r2, [r3, #20]
 8004550:	e00f      	b.n	8004572 <CO_SDOserver_process+0xc6>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004558:	2b40      	cmp	r3, #64	; 0x40
 800455a:	d105      	bne.n	8004568 <CO_SDOserver_process+0xbc>
                upload = true;
 800455c:	2301      	movs	r3, #1
 800455e:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2221      	movs	r2, #33	; 0x21
 8004564:	751a      	strb	r2, [r3, #20]
 8004566:	e004      	b.n	8004572 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8004568:	4ba5      	ldr	r3, [pc, #660]	; (8004800 <CO_SDOserver_process+0x354>)
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	2b00      	cmp	r3, #0
 8004576:	d162      	bne.n	800463e <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800457e:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 8004580:	b21a      	sxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	b21b      	sxth	r3, r3
 800458a:	4313      	orrs	r3, r2
 800458c:	b21b      	sxth	r3, r3
 800458e:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	869a      	strh	r2, [r3, #52]	; 0x34
                SDO->subIndex = SDO->CANrxData[3];
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f7fd ff70 	bl	8002490 <OD_find>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f103 0218 	add.w	r2, r3, #24
 80045bc:	2300      	movs	r3, #0
 80045be:	f7fd ffc3 	bl	8002548 <OD_getSub>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 80045c8:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80045d0:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe f8a9 	bl	800272c <OD_getSDOabCode>
 80045da:	4603      	mov	r3, r0
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	751a      	strb	r2, [r3, #20]
 80045e4:	e02b      	b.n	800463e <CO_SDOserver_process+0x192>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 80045f4:	4b83      	ldr	r3, [pc, #524]	; (8004804 <CO_SDOserver_process+0x358>)
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	751a      	strb	r2, [r3, #20]
 80045fe:	e01e      	b.n	800463e <CO_SDOserver_process+0x192>
                    }
                    else if (upload
 8004600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00c      	beq.n	8004620 <CO_SDOserver_process+0x174>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d105      	bne.n	8004620 <CO_SDOserver_process+0x174>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 8004614:	4b7c      	ldr	r3, [pc, #496]	; (8004808 <CO_SDOserver_process+0x35c>)
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	751a      	strb	r2, [r3, #20]
 800461e:	e00e      	b.n	800463e <CO_SDOserver_process+0x192>
                    }
                    else if (!upload
 8004620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <CO_SDOserver_process+0x192>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <CO_SDOserver_process+0x192>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 8004634:	4b75      	ldr	r3, [pc, #468]	; (800480c <CO_SDOserver_process+0x360>)
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 800463e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004640:	2b00      	cmp	r3, #0
 8004642:	d047      	beq.n	80046d4 <CO_SDOserver_process+0x228>
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d144      	bne.n	80046d4 <CO_SDOserver_process+0x228>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->finished = false;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	671a      	str	r2, [r3, #112]	; 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 800466a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800466e:	2300      	movs	r3, #0
 8004670:	2207      	movs	r2, #7
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7ff fe4e 	bl	8004314 <readFromOd>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d02a      	beq.n	80046d4 <CO_SDOserver_process+0x228>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01a      	beq.n	80046bc <CO_SDOserver_process+0x210>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	665a      	str	r2, [r3, #100]	; 0x64

                        if (SDO->sizeInd == 0) {
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004692:	2b00      	cmp	r3, #0
 8004694:	d105      	bne.n	80046a2 <CO_SDOserver_process+0x1f6>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	665a      	str	r2, [r3, #100]	; 0x64
 80046a0:	e018      	b.n	80046d4 <CO_SDOserver_process+0x228>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d011      	beq.n	80046d4 <CO_SDOserver_process+0x228>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80046b0:	4b57      	ldr	r3, [pc, #348]	; (8004810 <CO_SDOserver_process+0x364>)
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	751a      	strb	r2, [r3, #20]
 80046ba:	e00b      	b.n	80046d4 <CO_SDOserver_process+0x228>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c2:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db02      	blt.n	80046ce <CO_SDOserver_process+0x222>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	e000      	b.n	80046d0 <CO_SDOserver_process+0x224>
 80046ce:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	6653      	str	r3, [r2, #100]	; 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	7d1b      	ldrb	r3, [r3, #20]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 81d1 	beq.w	8004a82 <CO_SDOserver_process+0x5d6>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	7d1b      	ldrb	r3, [r3, #20]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	f000 81cb 	beq.w	8004a82 <CO_SDOserver_process+0x5d6>
        switch (SDO->state) {
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	7d1b      	ldrb	r3, [r3, #20]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	3b11      	subs	r3, #17
 80046f4:	2b12      	cmp	r3, #18
 80046f6:	f200 81be 	bhi.w	8004a76 <CO_SDOserver_process+0x5ca>
 80046fa:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <CO_SDOserver_process+0x254>)
 80046fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004700:	0800474d 	.word	0x0800474d
 8004704:	08004a77 	.word	0x08004a77
 8004708:	0800492f 	.word	0x0800492f
 800470c:	08004a77 	.word	0x08004a77
 8004710:	08004a77 	.word	0x08004a77
 8004714:	08004a77 	.word	0x08004a77
 8004718:	08004a77 	.word	0x08004a77
 800471c:	08004a77 	.word	0x08004a77
 8004720:	08004a77 	.word	0x08004a77
 8004724:	08004a77 	.word	0x08004a77
 8004728:	08004a77 	.word	0x08004a77
 800472c:	08004a77 	.word	0x08004a77
 8004730:	08004a77 	.word	0x08004a77
 8004734:	08004a77 	.word	0x08004a77
 8004738:	08004a77 	.word	0x08004a77
 800473c:	08004a77 	.word	0x08004a77
 8004740:	08004a25 	.word	0x08004a25
 8004744:	08004a77 	.word	0x08004a77
 8004748:	08004a2d 	.word	0x08004a2d
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80af 	beq.w	80048ba <CO_SDOserver_process+0x40e>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	647b      	str	r3, [r7, #68]	; 0x44

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 8004762:	2304      	movs	r3, #4
 8004764:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (SDO->CANrxData[0] & 0x01)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <CO_SDOserver_process+0x2de>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477a:	089b      	lsrs	r3, r3, #2
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004788:	e007      	b.n	800479a <CO_SDOserver_process+0x2ee>
                else if (sizeInOd > 0 && sizeInOd < 4)
 800478a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <CO_SDOserver_process+0x2ee>
 8004790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004792:	2b03      	cmp	r3, #3
 8004794:	d801      	bhi.n	800479a <CO_SDOserver_process+0x2ee>
                    dataSizeToWrite = sizeInOd;
 8004796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004798:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 800479a:	2300      	movs	r3, #0
 800479c:	623b      	str	r3, [r7, #32]
 800479e:	2300      	movs	r3, #0
 80047a0:	84bb      	strh	r3, [r7, #36]	; 0x24
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80047a8:	f107 0320 	add.w	r3, r7, #32
 80047ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047ae:	4618      	mov	r0, r3
 80047b0:	f00d f8d0 	bl	8011954 <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	da17      	bge.n	80047f0 <CO_SDOserver_process+0x344>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 80047c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <CO_SDOserver_process+0x322>
 80047c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d210      	bcs.n	80047f0 <CO_SDOserver_process+0x344>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 80047ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	643b      	str	r3, [r7, #64]	; 0x40
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 80047d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <CO_SDOserver_process+0x334>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <CO_SDOserver_process+0x336>
 80047e0:	2302      	movs	r3, #2
 80047e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047e4:	4413      	add	r3, r2
 80047e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047ec:	621a      	str	r2, [r3, #32]
                ) {
 80047ee:	e021      	b.n	8004834 <CO_SDOserver_process+0x388>
                }
                else if (sizeInOd == 0) {
 80047f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10e      	bne.n	8004814 <CO_SDOserver_process+0x368>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047fa:	621a      	str	r2, [r3, #32]
 80047fc:	e01a      	b.n	8004834 <CO_SDOserver_process+0x388>
 80047fe:	bf00      	nop
 8004800:	05040001 	.word	0x05040001
 8004804:	06010000 	.word	0x06010000
 8004808:	06010001 	.word	0x06010001
 800480c:	06010002 	.word	0x06010002
 8004810:	06040047 	.word	0x06040047
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 8004814:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004818:	429a      	cmp	r2, r3
 800481a:	d00b      	beq.n	8004834 <CO_SDOserver_process+0x388>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800481c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800481e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004820:	429a      	cmp	r2, r3
 8004822:	d901      	bls.n	8004828 <CO_SDOserver_process+0x37c>
 8004824:	4b98      	ldr	r3, [pc, #608]	; (8004a88 <CO_SDOserver_process+0x5dc>)
 8004826:	e000      	b.n	800482a <CO_SDOserver_process+0x37e>
 8004828:	4b98      	ldr	r3, [pc, #608]	; (8004a8c <CO_SDOserver_process+0x5e0>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	751a      	strb	r2, [r3, #20]
                    break;
 8004832:	e132      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	61fb      	str	r3, [r7, #28]
                bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3318      	adds	r3, #24
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff f92e 	bl	8003a9e <OD_mappable>
 8004842:	63f8      	str	r0, [r7, #60]	; 0x3c

                if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 8004844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <CO_SDOserver_process+0x3b0>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484e:	f3ef 8210 	mrs	r2, PRIMASK
 8004852:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8004854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004856:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004858:	b672      	cpsid	i
}
 800485a:	bf00      	nop
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f103 0018 	add.w	r0, r3, #24
 8004866:	f107 031c 	add.w	r3, r7, #28
 800486a:	f107 0120 	add.w	r1, r7, #32
 800486e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004870:	47a0      	blx	r4
 8004872:	4603      	mov	r3, r0
 8004874:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                                               dataSizeToWrite, &countWritten);
                if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8004878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <CO_SDOserver_process+0x3e2>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	f383 8810 	msr	PRIMASK, r3
}
 800488c:	bf00      	nop

                if (odRet != ODR_OK) {
 800488e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <CO_SDOserver_process+0x400>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004896:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800489a:	4618      	mov	r0, r3
 800489c:	f7fd ff46 	bl	800272c <OD_getSDOabCode>
 80048a0:	4603      	mov	r3, r0
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	751a      	strb	r2, [r3, #20]
                    break;
 80048aa:	e0f6      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2212      	movs	r2, #18
 80048b0:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	671a      	str	r2, [r3, #112]	; 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 80048b8:	e0ef      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
                if (SDO->CANrxData[0] & 0x01) {
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d028      	beq.n	800491a <CO_SDOserver_process+0x46e>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	64bb      	str	r3, [r7, #72]	; 0x48
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3340      	adds	r3, #64	; 0x40
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	61bb      	str	r3, [r7, #24]
                    SDO->sizeInd = CO_SWAP_32(size);
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	665a      	str	r2, [r3, #100]	; 0x64
                    if (sizeInOd > 0) {
 80048dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01e      	beq.n	8004920 <CO_SDOserver_process+0x474>
                        if (SDO->sizeInd > sizeInOd) {
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d205      	bcs.n	80048f8 <CO_SDOserver_process+0x44c>
                            abortCode = CO_SDO_AB_DATA_LONG;
 80048ec:	4b66      	ldr	r3, [pc, #408]	; (8004a88 <CO_SDOserver_process+0x5dc>)
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	751a      	strb	r2, [r3, #20]
                            break;
 80048f6:	e0d0      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
                        else if (SDO->sizeInd < sizeInOd
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048fe:	429a      	cmp	r2, r3
 8004900:	d90e      	bls.n	8004920 <CO_SDOserver_process+0x474>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004908:	b25b      	sxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	db08      	blt.n	8004920 <CO_SDOserver_process+0x474>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 800490e:	4b5f      	ldr	r3, [pc, #380]	; (8004a8c <CO_SDOserver_process+0x5e0>)
 8004910:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	751a      	strb	r2, [r3, #20]
                            break;
 8004918:	e0bf      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
                    SDO->sizeInd = 0;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	665a      	str	r2, [r3, #100]	; 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2212      	movs	r2, #18
 8004924:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	671a      	str	r2, [r3, #112]	; 0x70
            break;
 800492c:	e0b5      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004934:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d16d      	bne.n	8004a18 <CO_SDOserver_process+0x56c>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf14      	ite	ne
 800494a:	2301      	movne	r3, #1
 800494c:	2300      	moveq	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	671a      	str	r2, [r3, #112]	; 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                if (toggle != SDO->toggle) {
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800496a:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 800496e:	429a      	cmp	r2, r3
 8004970:	d005      	beq.n	800497e <CO_SDOserver_process+0x4d2>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004972:	4b47      	ldr	r3, [pc, #284]	; (8004a90 <CO_SDOserver_process+0x5e4>)
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	751a      	strb	r2, [r3, #20]
                    break;
 800497c:	e08d      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	b2db      	uxtb	r3, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800499c:	18d0      	adds	r0, r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	333d      	adds	r3, #61	; 0x3d
 80049a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049a4:	4619      	mov	r1, r3
 80049a6:	f00c ffd5 	bl	8011954 <memcpy>
                SDO->bufOffsetWr += count;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80049b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b2:	441a      	add	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->sizeTran += count;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c0:	441a      	add	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	669a      	str	r2, [r3, #104]	; 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <CO_SDOserver_process+0x53a>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d905      	bls.n	80049e6 <CO_SDOserver_process+0x53a>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 80049da:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <CO_SDOserver_process+0x5dc>)
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	751a      	strb	r2, [r3, #20]
                    break;
 80049e4:	e059      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <CO_SDOserver_process+0x550>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049f4:	f1c3 0320 	rsb	r3, r3, #32
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d809      	bhi.n	8004a10 <CO_SDOserver_process+0x564>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 80049fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004a00:	2300      	movs	r3, #0
 8004a02:	2200      	movs	r2, #0
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff fb6f 	bl	80040e8 <validateAndWriteToOD>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d043      	beq.n	8004a98 <CO_SDOserver_process+0x5ec>
                        break;
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2214      	movs	r2, #20
 8004a14:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004a16:	e040      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
                abortCode = CO_SDO_AB_CMD;
 8004a18:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <CO_SDOserver_process+0x5e8>)
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	751a      	strb	r2, [r3, #20]
            break;
 8004a22:	e03a      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2222      	movs	r2, #34	; 0x22
 8004a28:	751a      	strb	r2, [r3, #20]
            break;
 8004a2a:	e036      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a32:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004a36:	2b60      	cmp	r3, #96	; 0x60
 8004a38:	d117      	bne.n	8004a6a <CO_SDOserver_process+0x5be>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                if (toggle != SDO->toggle) {
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004a4e:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d005      	beq.n	8004a62 <CO_SDOserver_process+0x5b6>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004a56:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <CO_SDOserver_process+0x5e4>)
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	751a      	strb	r2, [r3, #20]
                    break;
 8004a60:	e01b      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2224      	movs	r2, #36	; 0x24
 8004a66:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004a68:	e017      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
                abortCode = CO_SDO_AB_CMD;
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <CO_SDOserver_process+0x5e8>)
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	751a      	strb	r2, [r3, #20]
            break;
 8004a74:	e011      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <CO_SDOserver_process+0x5e8>)
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	751a      	strb	r2, [r3, #20]
 8004a80:	e00b      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 8004a82:	bf00      	nop
 8004a84:	e009      	b.n	8004a9a <CO_SDOserver_process+0x5ee>
 8004a86:	bf00      	nop
 8004a88:	06070012 	.word	0x06070012
 8004a8c:	06070013 	.word	0x06070013
 8004a90:	05030000 	.word	0x05030000
 8004a94:	05040001 	.word	0x05040001
                        break;
 8004a98:	bf00      	nop
        SDO->timeoutTimer = 0;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	679a      	str	r2, [r3, #120]	; 0x78
#endif
        timeDifference_us = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 8004aaa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d11e      	bne.n	8004af0 <CO_SDOserver_process+0x644>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d205      	bcs.n	8004aca <CO_SDOserver_process+0x61e>
            SDO->timeoutTimer += timeDifference_us;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	441a      	add	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	679a      	str	r2, [r3, #120]	; 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d304      	bcc.n	8004ae0 <CO_SDOserver_process+0x634>
            abortCode = CO_SDO_AB_TIMEOUT;
 8004ad6:	4b9c      	ldr	r3, [pc, #624]	; (8004d48 <CO_SDOserver_process+0x89c>)
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <CO_SDOserver_process+0x644>
            ret = CO_SDO_RT_transmittBufferFull;
 8004aea:	2304      	movs	r3, #4
 8004aec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8004af0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	f040 81a8 	bne.w	8004e4a <CO_SDOserver_process+0x99e>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	3305      	adds	r3, #5
 8004b00:	2208      	movs	r2, #8
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f00c ff4d 	bl	80119a4 <memset>

        switch (SDO->state) {
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	7d1b      	ldrb	r3, [r3, #20]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	3b12      	subs	r3, #18
 8004b12:	2b12      	cmp	r3, #18
 8004b14:	f200 819b 	bhi.w	8004e4e <CO_SDOserver_process+0x9a2>
 8004b18:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <CO_SDOserver_process+0x674>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b6d 	.word	0x08004b6d
 8004b24:	08004e4f 	.word	0x08004e4f
 8004b28:	08004bef 	.word	0x08004bef
 8004b2c:	08004e4f 	.word	0x08004e4f
 8004b30:	08004e4f 	.word	0x08004e4f
 8004b34:	08004e4f 	.word	0x08004e4f
 8004b38:	08004e4f 	.word	0x08004e4f
 8004b3c:	08004e4f 	.word	0x08004e4f
 8004b40:	08004e4f 	.word	0x08004e4f
 8004b44:	08004e4f 	.word	0x08004e4f
 8004b48:	08004e4f 	.word	0x08004e4f
 8004b4c:	08004e4f 	.word	0x08004e4f
 8004b50:	08004e4f 	.word	0x08004e4f
 8004b54:	08004e4f 	.word	0x08004e4f
 8004b58:	08004e4f 	.word	0x08004e4f
 8004b5c:	08004e4f 	.word	0x08004e4f
 8004b60:	08004c4b 	.word	0x08004c4b
 8004b64:	08004e4f 	.word	0x08004e4f
 8004b68:	08004d19 	.word	0x08004d19
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2260      	movs	r2, #96	; 0x60
 8004b72:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004b84:	0a1b      	lsrs	r3, r3, #8
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004b9a:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	679a      	str	r2, [r3, #120]	; 0x78
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f002 fd17 	bl	80075e0 <CO_CANsend>
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d006      	beq.n	8004bc8 <CO_SDOserver_process+0x71c>
                SDO->state = CO_SDO_ST_IDLE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 8004bc6:	e145      	b.n	8004e54 <CO_SDOserver_process+0x9a8>
                SDO->toggle = 0x00;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->sizeTran = 0;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->bufOffsetWr = 0;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->bufOffsetRd = 0;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2213      	movs	r2, #19
 8004bea:	751a      	strb	r2, [r3, #20]
            break;
 8004bec:	e132      	b.n	8004e54 <CO_SDOserver_process+0x9a8>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f042 0220 	orr.w	r2, r2, #32
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <CO_SDOserver_process+0x762>
 8004c0a:	2210      	movs	r2, #16
 8004c0c:	e000      	b.n	8004c10 <CO_SDOserver_process+0x764>
 8004c0e:	2200      	movs	r2, #0
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f002 fcda 	bl	80075e0 <CO_CANsend>
            if (SDO->finished) {
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d006      	beq.n	8004c42 <CO_SDOserver_process+0x796>
                SDO->state = CO_SDO_ST_IDLE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 8004c40:	e108      	b.n	8004e54 <CO_SDOserver_process+0x9a8>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2213      	movs	r2, #19
 8004c46:	751a      	strb	r2, [r3, #20]
            break;
 8004c48:	e104      	b.n	8004e54 <CO_SDOserver_process+0x9a8>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d024      	beq.n	8004c9c <CO_SDOserver_process+0x7f0>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d820      	bhi.n	8004c9c <CO_SDOserver_process+0x7f0>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f1c3 0304 	rsb	r3, r3, #4
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f103 0009 	add.w	r0, r3, #9
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f00c fe63 	bl	8011954 <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004c94:	2300      	movs	r3, #0
 8004c96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004c9a:	e020      	b.n	8004cde <CO_SDOserver_process+0x832>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00e      	beq.n	8004cc2 <CO_SDOserver_process+0x816>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	617b      	str	r3, [r7, #20]
                    SDO->CANtxBuff->data[0] = 0x41;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2241      	movs	r2, #65	; 0x41
 8004cb4:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	3309      	adds	r3, #9
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e003      	b.n	8004cca <CO_SDOserver_process+0x81e>
                           &sizeIndSw, sizeof(sizeIndSw));
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2240      	movs	r2, #64	; 0x40
 8004cc8:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->timeoutTimer = 0;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2223      	movs	r2, #35	; 0x23
 8004cdc:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004d04:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f002 fc65 	bl	80075e0 <CO_CANsend>
            break;
 8004d16:	e09d      	b.n	8004e54 <CO_SDOserver_process+0x9a8>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false))
 8004d18:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2207      	movs	r2, #7
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff faf7 	bl	8004314 <readFromOd>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8092 	beq.w	8004e52 <CO_SDOserver_process+0x9a6>
                break;

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 8004d38:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d103      	bne.n	8004d4c <CO_SDOserver_process+0x8a0>
 8004d44:	2210      	movs	r2, #16
 8004d46:	e002      	b.n	8004d4e <CO_SDOserver_process+0x8a2>
 8004d48:	05040000 	.word	0x05040000
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	65bb      	str	r3, [r7, #88]	; 0x58
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 8004d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d66:	2b06      	cmp	r3, #6
 8004d68:	d906      	bls.n	8004d78 <CO_SDOserver_process+0x8cc>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01b      	beq.n	8004daa <CO_SDOserver_process+0x8fe>
 8004d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d74:	2b07      	cmp	r3, #7
 8004d76:	d118      	bne.n	8004daa <CO_SDOserver_process+0x8fe>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	795a      	ldrb	r2, [r3, #5]
 8004d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	f1c3 0307 	rsb	r3, r3, #7
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004da2:	2300      	movs	r3, #0
 8004da4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004da8:	e007      	b.n	8004dba <CO_SDOserver_process+0x90e>
            }
            else {
                SDO->timeoutTimer = 0;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2223      	movs	r2, #35	; 0x23
 8004db4:	751a      	strb	r2, [r3, #20]
                count = 7;
 8004db6:	2307      	movs	r3, #7
 8004db8:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	1d98      	adds	r0, r3, #6
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004dcc:	4413      	add	r3, r2
 8004dce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f00c fdbf 	bl	8011954 <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004ddc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dde:	441a      	add	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran += count;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dec:	441a      	add	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	669a      	str	r2, [r3, #104]	; 0x68

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01e      	beq.n	8004e38 <CO_SDOserver_process+0x98c>
                if (SDO->sizeTran > SDO->sizeInd) {
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d905      	bls.n	8004e12 <CO_SDOserver_process+0x966>
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004e06:	4b31      	ldr	r3, [pc, #196]	; (8004ecc <CO_SDOserver_process+0xa20>)
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	751a      	strb	r2, [r3, #20]
                    break;
 8004e10:	e020      	b.n	8004e54 <CO_SDOserver_process+0x9a8>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 8004e12:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10e      	bne.n	8004e38 <CO_SDOserver_process+0x98c>
                         && SDO->sizeTran < SDO->sizeInd
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d208      	bcs.n	8004e38 <CO_SDOserver_process+0x98c>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 8004e26:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <CO_SDOserver_process+0xa24>)
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28
                    ret = CO_SDO_RT_waitingResponse;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                    SDO->state = CO_SDO_ST_ABORT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	751a      	strb	r2, [r3, #20]
                    break;
 8004e36:	e00d      	b.n	8004e54 <CO_SDOserver_process+0x9a8>
                }
            }

            /* send message */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f002 fbcc 	bl	80075e0 <CO_CANsend>
            break;
 8004e48:	e004      	b.n	8004e54 <CO_SDOserver_process+0x9a8>

        default: {
            break;
        }
        } /* switch (SDO->state) */
    }
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <CO_SDOserver_process+0x9a8>
            break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <CO_SDOserver_process+0x9a8>
                break;
 8004e52:	bf00      	nop

    if (ret == CO_SDO_RT_waitingResponse) {
 8004e54:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d131      	bne.n	8004ec0 <CO_SDOserver_process+0xa14>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	7d1b      	ldrb	r3, [r3, #20]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d12c      	bne.n	8004ec0 <CO_SDOserver_process+0xa14>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2280      	movs	r2, #128	; 0x80
 8004e70:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004e98:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	3309      	adds	r3, #9
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f002 fb96 	bl	80075e0 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8004eba:	23f6      	movs	r3, #246	; 0xf6
 8004ebc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8004ec0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	376c      	adds	r7, #108	; 0x6c
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd90      	pop	{r4, r7, pc}
 8004ecc:	06070012 	.word	0x06070012
 8004ed0:	06070013 	.word	0x06070013

08004ed4 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8004ee0:	73fb      	strb	r3, [r7, #15]
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <OD_getIndex+0x14>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	e000      	b.n	8004f22 <OD_getIndex+0x16>
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <OD_extension_init>:
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <OD_extension_init+0x14>
 8004f3e:	2305      	movs	r3, #5
 8004f40:	e003      	b.n	8004f4a <OD_extension_init+0x1c>
    entry->extension = extension;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <OD_get_u8>:
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af02      	add	r7, sp, #8
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	460b      	mov	r3, r1
 8004f64:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004f66:	7af9      	ldrb	r1, [r7, #11]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7fd fbf9 	bl	8002768 <OD_get_value>
 8004f76:	4603      	mov	r3, r0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <OD_get_u32>:
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	607a      	str	r2, [r7, #4]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004f90:	7af9      	ldrb	r1, [r7, #11]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	2304      	movs	r3, #4
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7fd fbe4 	bl	8002768 <OD_get_value>
 8004fa0:	4603      	mov	r3, r0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8004faa:	b480      	push	{r7}
 8004fac:	b087      	sub	sp, #28
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	791b      	ldrb	r3, [r3, #4]
 8004fbc:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	7c5b      	ldrb	r3, [r3, #17]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10c      	bne.n	8004fe4 <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	e019      	b.n	800500a <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	721a      	strb	r2, [r3, #8]
 8004fe2:	e012      	b.n	800500a <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d109      	bne.n	8004ffe <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	3305      	adds	r3, #5
 8004fee:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e005      	b.n	800500a <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005004:	b2da      	uxtb	r2, r3
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00c      	beq.n	800502a <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf0c      	ite	eq
 8005018:	2301      	moveq	r3, #1
 800501a:	2300      	movne	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2201      	movs	r2, #1
 8005028:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005038:	b590      	push	{r4, r7, lr}
 800503a:	b08f      	sub	sp, #60	; 0x3c
 800503c:	af04      	add	r7, sp, #16
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00c      	beq.n	8005066 <OD_write_1005+0x2e>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	7c5b      	ldrb	r3, [r3, #17]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d108      	bne.n	8005066 <OD_write_1005+0x2e>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d102      	bne.n	8005066 <OD_write_1005+0x2e>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8005066:	2309      	movs	r3, #9
 8005068:	e0a3      	b.n	80051b2 <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8005070:	68b8      	ldr	r0, [r7, #8]
 8005072:	f7ff ff3d 	bl	8004ef0 <CO_getUint32>
 8005076:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	b29b      	uxth	r3, r3
 800507c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005080:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	bf14      	ite	ne
 800508c:	2301      	movne	r3, #1
 800508e:	2300      	moveq	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8005094:	6a3a      	ldr	r2, [r7, #32]
 8005096:	4b49      	ldr	r3, [pc, #292]	; (80051bc <OD_write_1005+0x184>)
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d133      	bne.n	8005106 <OD_write_1005+0xce>
 800509e:	8bfb      	ldrh	r3, [r7, #30]
 80050a0:	2b7f      	cmp	r3, #127	; 0x7f
 80050a2:	d930      	bls.n	8005106 <OD_write_1005+0xce>
 80050a4:	8bfb      	ldrh	r3, [r7, #30]
 80050a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050aa:	d903      	bls.n	80050b4 <OD_write_1005+0x7c>
 80050ac:	8bfb      	ldrh	r3, [r7, #30]
 80050ae:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80050b2:	d928      	bls.n	8005106 <OD_write_1005+0xce>
 80050b4:	8bfb      	ldrh	r3, [r7, #30]
 80050b6:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80050ba:	d903      	bls.n	80050c4 <OD_write_1005+0x8c>
 80050bc:	8bfb      	ldrh	r3, [r7, #30]
 80050be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80050c2:	d320      	bcc.n	8005106 <OD_write_1005+0xce>
 80050c4:	8bfb      	ldrh	r3, [r7, #30]
 80050c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80050ca:	d903      	bls.n	80050d4 <OD_write_1005+0x9c>
 80050cc:	8bfb      	ldrh	r3, [r7, #30]
 80050ce:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80050d2:	d318      	bcc.n	8005106 <OD_write_1005+0xce>
 80050d4:	8bfb      	ldrh	r3, [r7, #30]
 80050d6:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80050da:	d303      	bcc.n	80050e4 <OD_write_1005+0xac>
 80050dc:	8bfb      	ldrh	r3, [r7, #30]
 80050de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050e2:	d310      	bcc.n	8005106 <OD_write_1005+0xce>
 80050e4:	8bfb      	ldrh	r3, [r7, #30]
 80050e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050ea:	d80c      	bhi.n	8005106 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <OD_write_1005+0xd2>
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <OD_write_1005+0xd2>
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005100:	8bfa      	ldrh	r2, [r7, #30]
 8005102:	429a      	cmp	r2, r3
 8005104:	d001      	beq.n	800510a <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 8005106:	230f      	movs	r3, #15
 8005108:	e053      	b.n	80051b2 <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005110:	8bfa      	ldrh	r2, [r7, #30]
 8005112:	429a      	cmp	r2, r3
 8005114:	d03a      	beq.n	800518c <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 800511e:	8bfa      	ldrh	r2, [r7, #30]
 8005120:	4b27      	ldr	r3, [pc, #156]	; (80051c0 <OD_write_1005+0x188>)
 8005122:	9302      	str	r3, [sp, #8]
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	2300      	movs	r3, #0
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005130:	f002 f97e 	bl	8007430 <CO_CANrxBufferInit>
 8005134:	4603      	mov	r3, r0
 8005136:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 8005138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8005140:	2309      	movs	r3, #9
 8005142:	e036      	b.n	80051b2 <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005152:	2b00      	cmp	r3, #0
 8005154:	bf14      	ite	ne
 8005156:	2301      	movne	r3, #1
 8005158:	2300      	moveq	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	461c      	mov	r4, r3
 800515e:	8bfa      	ldrh	r2, [r7, #30]
 8005160:	2300      	movs	r3, #0
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	9400      	str	r4, [sp, #0]
 8005166:	2300      	movs	r3, #0
 8005168:	f002 f9c0 	bl	80074ec <CO_CANtxBufferInit>
 800516c:	4602      	mov	r2, r0
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	629a      	str	r2, [r3, #40]	; 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d104      	bne.n	8005184 <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	2200      	movs	r2, #0
 800517e:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8005180:	2309      	movs	r3, #9
 8005182:	e016      	b.n	80051b2 <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	8bfa      	ldrh	r2, [r7, #30]
 8005188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <OD_write_1005+0x16c>
        SYNC->counter = 0;
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	2200      	movs	r2, #0
 800519c:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	2200      	movs	r2, #0
 80051a2:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7fd f8f6 	bl	800239c <OD_writeOriginal>
 80051b0:	4603      	mov	r3, r0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	372c      	adds	r7, #44	; 0x2c
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd90      	pop	{r4, r7, pc}
 80051ba:	bf00      	nop
 80051bc:	bffff800 	.word	0xbffff800
 80051c0:	08004fab 	.word	0x08004fab

080051c4 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80051c4:	b590      	push	{r4, r7, lr}
 80051c6:	b089      	sub	sp, #36	; 0x24
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00c      	beq.n	80051f2 <OD_write_1019+0x2e>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	7c5b      	ldrb	r3, [r3, #17]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d108      	bne.n	80051f2 <OD_write_1019+0x2e>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d102      	bne.n	80051f2 <OD_write_1019+0x2e>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80051f2:	2309      	movs	r3, #9
 80051f4:	e041      	b.n	800527a <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 80051fc:	68b8      	ldr	r0, [r7, #8]
 80051fe:	f7ff fe69 	bl	8004ed4 <CO_getUint8>
 8005202:	4603      	mov	r3, r0
 8005204:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 8005206:	7cfb      	ldrb	r3, [r7, #19]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d002      	beq.n	8005212 <OD_write_1019+0x4e>
 800520c:	7cfb      	ldrb	r3, [r7, #19]
 800520e:	2bf0      	cmp	r3, #240	; 0xf0
 8005210:	d901      	bls.n	8005216 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8005212:	230f      	movs	r3, #15
 8005214:	e031      	b.n	800527a <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8005220:	2317      	movs	r3, #23
 8005222:	e02a      	b.n	800527a <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005234:	7cfb      	ldrb	r3, [r7, #19]
 8005236:	2b00      	cmp	r3, #0
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	461c      	mov	r4, r3
 8005242:	2300      	movs	r3, #0
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	9400      	str	r4, [sp, #0]
 8005248:	2300      	movs	r3, #0
 800524a:	f002 f94f 	bl	80074ec <CO_CANtxBufferInit>
 800524e:	4602      	mov	r2, r0
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2200      	movs	r2, #0
 8005260:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 8005262:	2309      	movs	r3, #9
 8005264:	e009      	b.n	800527a <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	7cfa      	ldrb	r2, [r7, #19]
 800526a:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7fd f892 	bl	800239c <OD_writeOriginal>
 8005278:	4603      	mov	r3, r0
}
 800527a:	4618      	mov	r0, r3
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	bd90      	pop	{r4, r7, pc}
	...

08005284 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08c      	sub	sp, #48	; 0x30
 8005288:	af04      	add	r7, sp, #16
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00e      	beq.n	80052b6 <CO_SYNC_init+0x32>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <CO_SYNC_init+0x32>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <CO_SYNC_init+0x32>
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d102      	bne.n	80052bc <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ba:	e0fe      	b.n	80054ba <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 80052bc:	2260      	movs	r2, #96	; 0x60
 80052be:	2100      	movs	r1, #0
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f00c fb6f 	bl	80119a4 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 80052ca:	f107 0218 	add.w	r2, r7, #24
 80052ce:	2301      	movs	r3, #1
 80052d0:	2100      	movs	r1, #0
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff fe54 	bl	8004f80 <OD_get_u32>
 80052d8:	4603      	mov	r3, r0
 80052da:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80052dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00c      	beq.n	80052fe <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 80052e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d006      	beq.n	80052f8 <CO_SYNC_init+0x74>
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff fe0e 	bl	8004f0c <OD_getIndex>
 80052f0:	4603      	mov	r3, r0
 80052f2:	461a      	mov	r2, r3
 80052f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f6:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80052f8:	f06f 030b 	mvn.w	r3, #11
 80052fc:	e0dd      	b.n	80054ba <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a6f      	ldr	r2, [pc, #444]	; (80054c4 <CO_SYNC_init+0x240>)
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a6e      	ldr	r2, [pc, #440]	; (80054c8 <CO_SYNC_init+0x244>)
 800530e:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3334      	adds	r3, #52	; 0x34
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff fe09 	bl	8004f2e <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 800531c:	2300      	movs	r3, #0
 800531e:	2204      	movs	r2, #4
 8005320:	2100      	movs	r1, #0
 8005322:	6838      	ldr	r0, [r7, #0]
 8005324:	f7fd fa87 	bl	8002836 <OD_getPtr>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10c      	bne.n	8005350 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8005336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d006      	beq.n	800534a <CO_SYNC_init+0xc6>
 800533c:	6838      	ldr	r0, [r7, #0]
 800533e:	f7ff fde5 	bl	8004f0c <OD_getIndex>
 8005342:	4603      	mov	r3, r0
 8005344:	461a      	mov	r2, r3
 8005346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005348:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800534a:	f06f 030b 	mvn.w	r3, #11
 800534e:	e0b4      	b.n	80054ba <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 8005350:	2300      	movs	r3, #0
 8005352:	2204      	movs	r2, #4
 8005354:	2100      	movs	r1, #0
 8005356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005358:	f7fd fa6d 	bl	8002836 <OD_getPtr>
 800535c:	4602      	mov	r2, r0
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	2b00      	cmp	r3, #0
 8005366:	d010      	beq.n	800538a <CO_SYNC_init+0x106>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10c      	bne.n	800538a <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8005370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d006      	beq.n	8005384 <CO_SYNC_init+0x100>
 8005376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005378:	f7ff fdc8 	bl	8004f0c <OD_getIndex>
 800537c:	4603      	mov	r3, r0
 800537e:	461a      	mov	r2, r3
 8005380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005382:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8005384:	f06f 030b 	mvn.w	r3, #11
 8005388:	e097      	b.n	80054ba <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d033      	beq.n	80053fc <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8005394:	f107 0217 	add.w	r2, r7, #23
 8005398:	2301      	movs	r3, #1
 800539a:	2100      	movs	r1, #0
 800539c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800539e:	f7ff fdda 	bl	8004f56 <OD_get_u8>
 80053a2:	4603      	mov	r3, r0
 80053a4:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 80053a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00c      	beq.n	80053c8 <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 80053ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d006      	beq.n	80053c2 <CO_SYNC_init+0x13e>
 80053b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053b6:	f7ff fda9 	bl	8004f0c <OD_getIndex>
 80053ba:	4603      	mov	r3, r0
 80053bc:	461a      	mov	r2, r3
 80053be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c0:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 80053c2:	f06f 030b 	mvn.w	r3, #11
 80053c6:	e078      	b.n	80054ba <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d102      	bne.n	80053d4 <CO_SYNC_init+0x150>
 80053ce:	2302      	movs	r3, #2
 80053d0:	75fb      	strb	r3, [r7, #23]
 80053d2:	e004      	b.n	80053de <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
 80053d6:	2bf0      	cmp	r3, #240	; 0xf0
 80053d8:	d901      	bls.n	80053de <CO_SYNC_init+0x15a>
 80053da:	23f0      	movs	r3, #240	; 0xf0
 80053dc:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4a37      	ldr	r2, [pc, #220]	; (80054c4 <CO_SYNC_init+0x240>)
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4a37      	ldr	r2, [pc, #220]	; (80054cc <CO_SYNC_init+0x248>)
 80053ee:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3350      	adds	r3, #80	; 0x50
 80053f4:	4619      	mov	r1, r3
 80053f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053f8:	f7ff fd99 	bl	8004f2e <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 80053fc:	7dfa      	ldrb	r2, [r7, #23]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	bf14      	ite	ne
 8005412:	2301      	movne	r3, #1
 8005414:	2300      	moveq	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	b29b      	uxth	r3, r3
 8005422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005432:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005438:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800543e:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005444:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005450:	b29a      	uxth	r2, r3
 8005452:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8005454:	4b1e      	ldr	r3, [pc, #120]	; (80054d0 <CO_SYNC_init+0x24c>)
 8005456:	9302      	str	r3, [sp, #8]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	2300      	movs	r3, #0
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005466:	f001 ffe3 	bl	8007430 <CO_CANrxBufferInit>
 800546a:	4603      	mov	r3, r0
 800546c:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 800546e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <CO_SYNC_init+0x1f8>
        return ret;
 8005476:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800547a:	e01e      	b.n	80054ba <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005484:	b29a      	uxth	r2, r3
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf14      	ite	ne
 800548c:	2301      	movne	r3, #1
 800548e:	2300      	moveq	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	4618      	mov	r0, r3
 8005494:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8005496:	2300      	movs	r3, #0
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	9000      	str	r0, [sp, #0]
 800549c:	2300      	movs	r3, #0
 800549e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054a0:	f002 f824 	bl	80074ec <CO_CANtxBufferInit>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
 80054b6:	e000      	b.n	80054ba <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	080022ed 	.word	0x080022ed
 80054c8:	08005039 	.word	0x08005039
 80054cc:	080051c5 	.word	0x080051c5
 80054d0:	08004fab 	.word	0x08004fab

080054d4 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80054e2:	81fb      	strh	r3, [r7, #14]
 80054e4:	89fb      	ldrh	r3, [r7, #14]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <OD_getIndex+0x14>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	e000      	b.n	8005524 <OD_getIndex+0x16>
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <OD_extension_init>:
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <OD_extension_init+0x14>
 8005540:	2305      	movs	r3, #5
 8005542:	e003      	b.n	800554c <OD_extension_init+0x1c>
    entry->extension = extension;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <OD_get_u32>:
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	460b      	mov	r3, r1
 8005566:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005568:	7af9      	ldrb	r1, [r7, #11]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	2304      	movs	r3, #4
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7fd f8f8 	bl	8002768 <OD_get_value>
 8005578:	4603      	mov	r3, r0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8005582:	b580      	push	{r7, lr}
 8005584:	b086      	sub	sp, #24
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	791b      	ldrb	r3, [r3, #4]
 8005594:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	3305      	adds	r3, #5
 800559a:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	2b06      	cmp	r3, #6
 80055a0:	d108      	bne.n	80055b4 <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2206      	movs	r2, #6
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f00c f9d3 	bl	8011954 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2201      	movs	r2, #1
 80055b2:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 80055b4:	bf00      	nop
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00c      	beq.n	80055ea <OD_write_1012+0x2e>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	7c5b      	ldrb	r3, [r3, #17]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d108      	bne.n	80055ea <OD_write_1012+0x2e>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d102      	bne.n	80055ea <OD_write_1012+0x2e>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80055ea:	2309      	movs	r3, #9
 80055ec:	e051      	b.n	8005692 <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 80055f4:	68b8      	ldr	r0, [r7, #8]
 80055f6:	f7ff ff7c 	bl	80054f2 <CO_getUint32>
 80055fa:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005604:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	4b24      	ldr	r3, [pc, #144]	; (800569c <OD_write_1012+0xe0>)
 800560a:	4013      	ands	r3, r2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d126      	bne.n	800565e <OD_write_1012+0xa2>
 8005610:	8afb      	ldrh	r3, [r7, #22]
 8005612:	2b7f      	cmp	r3, #127	; 0x7f
 8005614:	d923      	bls.n	800565e <OD_write_1012+0xa2>
 8005616:	8afb      	ldrh	r3, [r7, #22]
 8005618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561c:	d903      	bls.n	8005626 <OD_write_1012+0x6a>
 800561e:	8afb      	ldrh	r3, [r7, #22]
 8005620:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8005624:	d91b      	bls.n	800565e <OD_write_1012+0xa2>
 8005626:	8afb      	ldrh	r3, [r7, #22]
 8005628:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800562c:	d903      	bls.n	8005636 <OD_write_1012+0x7a>
 800562e:	8afb      	ldrh	r3, [r7, #22]
 8005630:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005634:	d313      	bcc.n	800565e <OD_write_1012+0xa2>
 8005636:	8afb      	ldrh	r3, [r7, #22]
 8005638:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800563c:	d903      	bls.n	8005646 <OD_write_1012+0x8a>
 800563e:	8afb      	ldrh	r3, [r7, #22]
 8005640:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8005644:	d30b      	bcc.n	800565e <OD_write_1012+0xa2>
 8005646:	8afb      	ldrh	r3, [r7, #22]
 8005648:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800564c:	d303      	bcc.n	8005656 <OD_write_1012+0x9a>
 800564e:	8afb      	ldrh	r3, [r7, #22]
 8005650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005654:	d303      	bcc.n	800565e <OD_write_1012+0xa2>
 8005656:	8afb      	ldrh	r3, [r7, #22]
 8005658:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800565c:	d901      	bls.n	8005662 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 800565e:	230f      	movs	r3, #15
 8005660:	e017      	b.n	8005692 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	0fdb      	lsrs	r3, r3, #31
 8005666:	b2db      	uxtb	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7fc fe86 	bl	800239c <OD_writeOriginal>
 8005690:	4603      	mov	r3, r0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	3ffff800 	.word	0x3ffff800

080056a0 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08c      	sub	sp, #48	; 0x30
 80056a4:	af04      	add	r7, sp, #16
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <CO_TIME_init+0x20>
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <CO_TIME_init+0x20>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295
 80056c4:	e061      	b.n	800578a <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 80056c6:	222c      	movs	r2, #44	; 0x2c
 80056c8:	2100      	movs	r1, #0
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f00c f96a 	bl	80119a4 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 80056d0:	f107 0214 	add.w	r2, r7, #20
 80056d4:	2301      	movs	r3, #1
 80056d6:	2100      	movs	r1, #0
 80056d8:	68b8      	ldr	r0, [r7, #8]
 80056da:	f7ff ff3d 	bl	8005558 <OD_get_u32>
 80056de:	4603      	mov	r3, r0
 80056e0:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80056e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00c      	beq.n	8005704 <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d006      	beq.n	80056fe <CO_TIME_init+0x5e>
 80056f0:	68b8      	ldr	r0, [r7, #8]
 80056f2:	f7ff ff0c 	bl	800550e <OD_getIndex>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80056fe:	f06f 030b 	mvn.w	r3, #11
 8005702:	e042      	b.n	800578a <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4a21      	ldr	r2, [pc, #132]	; (8005794 <CO_TIME_init+0xf4>)
 800570e:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a21      	ldr	r2, [pc, #132]	; (8005798 <CO_TIME_init+0xf8>)
 8005714:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	331c      	adds	r3, #28
 800571a:	4619      	mov	r1, r3
 800571c:	68b8      	ldr	r0, [r7, #8]
 800571e:	f7ff ff07 	bl	8005530 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800572a:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	0fdb      	lsrs	r3, r3, #31
 8005730:	b2db      	uxtb	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	bf14      	ite	ne
 8005742:	2301      	movne	r3, #1
 8005744:	2300      	moveq	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 800575c:	8bba      	ldrh	r2, [r7, #28]
 800575e:	8879      	ldrh	r1, [r7, #2]
 8005760:	4b0e      	ldr	r3, [pc, #56]	; (800579c <CO_TIME_init+0xfc>)
 8005762:	9302      	str	r3, [sp, #8]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	2300      	movs	r3, #0
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 fe5d 	bl	8007430 <CO_CANrxBufferInit>
 8005776:	4603      	mov	r3, r0
 8005778:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 800577a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <CO_TIME_init+0xe8>
            return ret;
 8005782:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005786:	e000      	b.n	800578a <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	080022ed 	.word	0x080022ed
 8005798:	080055bd 	.word	0x080055bd
 800579c:	08005583 	.word	0x08005583

080057a0 <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 80057ac:	2300      	movs	r3, #0
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d024      	beq.n	8005800 <CO_TIME_process+0x60>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d020      	beq.n	8005800 <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01f      	beq.n	8005806 <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fe92 	bl	80054f2 <CO_getUint32>
 80057ce:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fe7d 	bl	80054d4 <CO_getUint16>
 80057da:	4603      	mov	r3, r0
 80057dc:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8bfa      	ldrh	r2, [r7, #30]
 80057ec:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 80057f4:	2301      	movs	r3, #1
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 80057fe:	e002      	b.n	8005806 <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d132      	bne.n	8005876 <CO_TIME_process+0xd6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d02f      	beq.n	8005876 <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	89db      	ldrh	r3, [r3, #14]
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4413      	add	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <CO_TIME_process+0xe0>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	099b      	lsrs	r3, r3, #6
 800582c:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4b13      	ldr	r3, [pc, #76]	; (8005880 <CO_TIME_process+0xe0>)
 8005832:	fba3 1302 	umull	r1, r3, r3, r2
 8005836:	099b      	lsrs	r3, r3, #6
 8005838:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	441a      	add	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <CO_TIME_process+0xe4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d90b      	bls.n	8005876 <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	4b09      	ldr	r3, [pc, #36]	; (8005888 <CO_TIME_process+0xe8>)
 8005864:	4413      	add	r3, r2
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	899b      	ldrh	r3, [r3, #12]
 800586e:	3301      	adds	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005878:	4618      	mov	r0, r3
 800587a:	3728      	adds	r7, #40	; 0x28
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	10624dd3 	.word	0x10624dd3
 8005884:	05265bff 	.word	0x05265bff
 8005888:	fad9a400 	.word	0xfad9a400

0800588c <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005894:	2300      	movs	r3, #0
 8005896:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800589e:	f04f 33ff 	mov.w	r3, #4294967295
 80058a2:	e006      	b.n	80058b2 <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 80058a4:	220c      	movs	r2, #12
 80058a6:	2100      	movs	r1, #0
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f00c f87b 	bl	80119a4 <memset>

    return ret;
 80058ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 80058bc:	b480      	push	{r7}
 80058be:	b089      	sub	sp, #36	; 0x24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	441a      	add	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 80058e4:	e100      	b.n	8005ae8 <CO_LEDs_process+0x22c>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	7a5b      	ldrb	r3, [r3, #9]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	613b      	str	r3, [r7, #16]

        tick = true;
 80058fa:	2301      	movs	r3, #1
 80058fc:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8005906:	3b50      	subs	r3, #80	; 0x50
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	791b      	ldrb	r3, [r3, #4]
 8005910:	3301      	adds	r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	711a      	strb	r2, [r3, #4]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	791b      	ldrb	r3, [r3, #4]
 800591c:	2b03      	cmp	r3, #3
 800591e:	f240 80cb 	bls.w	8005ab8 <CO_LEDs_process+0x1fc>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	77bb      	strb	r3, [r7, #30]
 800592c:	7fbb      	ldrb	r3, [r7, #30]
 800592e:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	7a5b      	ldrb	r3, [r3, #9]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <CO_LEDs_process+0x8a>
 800593c:	7ffb      	ldrb	r3, [r7, #31]
 800593e:	f043 0302 	orr.w	r3, r3, #2
 8005942:	77fb      	strb	r3, [r7, #31]
 8005944:	e003      	b.n	800594e <CO_LEDs_process+0x92>
            else                                    gr |= CO_LED_blink;
 8005946:	7fbb      	ldrb	r3, [r7, #30]
 8005948:	f043 0302 	orr.w	r3, r3, #2
 800594c:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	795b      	ldrb	r3, [r3, #5]
 8005952:	3301      	adds	r3, #1
 8005954:	b2da      	uxtb	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	715a      	strb	r2, [r3, #5]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	795b      	ldrb	r3, [r3, #5]
 800595e:	2b06      	cmp	r3, #6
 8005960:	d010      	beq.n	8005984 <CO_LEDs_process+0xc8>
 8005962:	2b06      	cmp	r3, #6
 8005964:	dc12      	bgt.n	800598c <CO_LEDs_process+0xd0>
 8005966:	2b01      	cmp	r3, #1
 8005968:	d002      	beq.n	8005970 <CO_LEDs_process+0xb4>
 800596a:	2b02      	cmp	r3, #2
 800596c:	d005      	beq.n	800597a <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 800596e:	e00d      	b.n	800598c <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 8005970:	7ffb      	ldrb	r3, [r7, #31]
 8005972:	f043 0304 	orr.w	r3, r3, #4
 8005976:	77fb      	strb	r3, [r7, #31]
 8005978:	e009      	b.n	800598e <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 800597a:	7fbb      	ldrb	r3, [r7, #30]
 800597c:	f043 0304 	orr.w	r3, r3, #4
 8005980:	77bb      	strb	r3, [r7, #30]
 8005982:	e004      	b.n	800598e <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	715a      	strb	r2, [r3, #5]
 800598a:	e000      	b.n	800598e <CO_LEDs_process+0xd2>
                default: break;
 800598c:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	799b      	ldrb	r3, [r3, #6]
 8005992:	3301      	adds	r3, #1
 8005994:	b2da      	uxtb	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	719a      	strb	r2, [r3, #6]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	799b      	ldrb	r3, [r3, #6]
 800599e:	3b01      	subs	r3, #1
 80059a0:	2b07      	cmp	r3, #7
 80059a2:	d821      	bhi.n	80059e8 <CO_LEDs_process+0x12c>
 80059a4:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <CO_LEDs_process+0xf0>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	080059cd 	.word	0x080059cd
 80059b0:	080059d7 	.word	0x080059d7
 80059b4:	080059cd 	.word	0x080059cd
 80059b8:	080059d7 	.word	0x080059d7
 80059bc:	080059e9 	.word	0x080059e9
 80059c0:	080059e9 	.word	0x080059e9
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059e1 	.word	0x080059e1
                case 1: case 3: rd |= CO_LED_flash_2; break;
 80059cc:	7ffb      	ldrb	r3, [r7, #31]
 80059ce:	f043 0308 	orr.w	r3, r3, #8
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e009      	b.n	80059ea <CO_LEDs_process+0x12e>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 80059d6:	7fbb      	ldrb	r3, [r7, #30]
 80059d8:	f043 0308 	orr.w	r3, r3, #8
 80059dc:	77bb      	strb	r3, [r7, #30]
 80059de:	e004      	b.n	80059ea <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	719a      	strb	r2, [r3, #6]
 80059e6:	e000      	b.n	80059ea <CO_LEDs_process+0x12e>
                default: break;
 80059e8:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	79db      	ldrb	r3, [r3, #7]
 80059ee:	3301      	adds	r3, #1
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	71da      	strb	r2, [r3, #7]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	79db      	ldrb	r3, [r3, #7]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	2b09      	cmp	r3, #9
 80059fe:	d825      	bhi.n	8005a4c <CO_LEDs_process+0x190>
 8005a00:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <CO_LEDs_process+0x14c>)
 8005a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a06:	bf00      	nop
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a3b 	.word	0x08005a3b
 8005a10:	08005a31 	.word	0x08005a31
 8005a14:	08005a3b 	.word	0x08005a3b
 8005a18:	08005a31 	.word	0x08005a31
 8005a1c:	08005a3b 	.word	0x08005a3b
 8005a20:	08005a4d 	.word	0x08005a4d
 8005a24:	08005a4d 	.word	0x08005a4d
 8005a28:	08005a4d 	.word	0x08005a4d
 8005a2c:	08005a45 	.word	0x08005a45
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 8005a30:	7ffb      	ldrb	r3, [r7, #31]
 8005a32:	f043 0310 	orr.w	r3, r3, #16
 8005a36:	77fb      	strb	r3, [r7, #31]
 8005a38:	e009      	b.n	8005a4e <CO_LEDs_process+0x192>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 8005a3a:	7fbb      	ldrb	r3, [r7, #30]
 8005a3c:	f043 0310 	orr.w	r3, r3, #16
 8005a40:	77bb      	strb	r3, [r7, #30]
 8005a42:	e004      	b.n	8005a4e <CO_LEDs_process+0x192>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	71da      	strb	r2, [r3, #7]
 8005a4a:	e000      	b.n	8005a4e <CO_LEDs_process+0x192>
                default: break;
 8005a4c:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	7a1b      	ldrb	r3, [r3, #8]
 8005a52:	3301      	adds	r3, #1
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	721a      	strb	r2, [r3, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	7a1b      	ldrb	r3, [r3, #8]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	2b0b      	cmp	r3, #11
 8005a62:	d834      	bhi.n	8005ace <CO_LEDs_process+0x212>
 8005a64:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <CO_LEDs_process+0x1b0>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005a9d 	.word	0x08005a9d
 8005a70:	08005aa7 	.word	0x08005aa7
 8005a74:	08005a9d 	.word	0x08005a9d
 8005a78:	08005aa7 	.word	0x08005aa7
 8005a7c:	08005a9d 	.word	0x08005a9d
 8005a80:	08005aa7 	.word	0x08005aa7
 8005a84:	08005a9d 	.word	0x08005a9d
 8005a88:	08005aa7 	.word	0x08005aa7
 8005a8c:	08005acf 	.word	0x08005acf
 8005a90:	08005acf 	.word	0x08005acf
 8005a94:	08005acf 	.word	0x08005acf
 8005a98:	08005ab1 	.word	0x08005ab1
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 8005a9c:	7ffb      	ldrb	r3, [r7, #31]
 8005a9e:	f043 0320 	orr.w	r3, r3, #32
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e014      	b.n	8005ad0 <CO_LEDs_process+0x214>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 8005aa6:	7fbb      	ldrb	r3, [r7, #30]
 8005aa8:	f043 0320 	orr.w	r3, r3, #32
 8005aac:	77bb      	strb	r3, [r7, #30]
 8005aae:	e00f      	b.n	8005ad0 <CO_LEDs_process+0x214>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	721a      	strb	r2, [r3, #8]
 8005ab6:	e00b      	b.n	8005ad0 <CO_LEDs_process+0x214>
                default: break;
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	7a5b      	ldrb	r3, [r3, #9]
 8005abc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005ac0:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	7a9b      	ldrb	r3, [r3, #10]
 8005ac6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005aca:	77bb      	strb	r3, [r7, #30]
 8005acc:	e000      	b.n	8005ad0 <CO_LEDs_process+0x214>
                default: break;
 8005ace:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d004      	beq.n	8005ae0 <CO_LEDs_process+0x224>
 8005ad6:	7ffb      	ldrb	r3, [r7, #31]
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	77fb      	strb	r3, [r7, #31]
 8005ade:	e003      	b.n	8005ae8 <CO_LEDs_process+0x22c>
        else               gr |= CO_LED_flicker;
 8005ae0:	7fbb      	ldrb	r3, [r7, #30]
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000) {
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8005af0:	4293      	cmp	r3, r2
 8005af2:	f63f aef8 	bhi.w	80058e6 <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d077      	beq.n	8005bec <CO_LEDs_process+0x330>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <CO_LEDs_process+0x24c>
 8005b02:	2301      	movs	r3, #1
 8005b04:	75fb      	strb	r3, [r7, #23]
 8005b06:	e032      	b.n	8005b6e <CO_LEDs_process+0x2b2>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 8005b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <CO_LEDs_process+0x25e>
 8005b10:	7ffb      	ldrb	r3, [r7, #31]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	75fb      	strb	r3, [r7, #23]
 8005b18:	e029      	b.n	8005b6e <CO_LEDs_process+0x2b2>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <CO_LEDs_process+0x26e>
 8005b20:	7ffb      	ldrb	r3, [r7, #31]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	75fb      	strb	r3, [r7, #23]
 8005b28:	e021      	b.n	8005b6e <CO_LEDs_process+0x2b2>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d004      	beq.n	8005b3a <CO_LEDs_process+0x27e>
 8005b30:	7ffb      	ldrb	r3, [r7, #31]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	75fb      	strb	r3, [r7, #23]
 8005b38:	e019      	b.n	8005b6e <CO_LEDs_process+0x2b2>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <CO_LEDs_process+0x28e>
 8005b40:	7ffb      	ldrb	r3, [r7, #31]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	75fb      	strb	r3, [r7, #23]
 8005b48:	e011      	b.n	8005b6e <CO_LEDs_process+0x2b2>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <CO_LEDs_process+0x29e>
 8005b50:	7ffb      	ldrb	r3, [r7, #31]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	75fb      	strb	r3, [r7, #23]
 8005b58:	e009      	b.n	8005b6e <CO_LEDs_process+0x2b2>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <CO_LEDs_process+0x2ae>
 8005b60:	7ffb      	ldrb	r3, [r7, #31]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	75fb      	strb	r3, [r7, #23]
 8005b68:	e001      	b.n	8005b6e <CO_LEDs_process+0x2b2>
        else                                        rd_co = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <CO_LEDs_process+0x2c2>
 8005b74:	7fbb      	ldrb	r3, [r7, #30]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	75bb      	strb	r3, [r7, #22]
 8005b7c:	e022      	b.n	8005bc4 <CO_LEDs_process+0x308>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 8005b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <CO_LEDs_process+0x2d2>
 8005b84:	7fbb      	ldrb	r3, [r7, #30]
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	75bb      	strb	r3, [r7, #22]
 8005b8c:	e01a      	b.n	8005bc4 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 8005b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d104      	bne.n	8005ba0 <CO_LEDs_process+0x2e4>
 8005b96:	7fbb      	ldrb	r3, [r7, #30]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	75bb      	strb	r3, [r7, #22]
 8005b9e:	e011      	b.n	8005bc4 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 8005ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba6:	d104      	bne.n	8005bb2 <CO_LEDs_process+0x2f6>
 8005ba8:	7fbb      	ldrb	r3, [r7, #30]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	75bb      	strb	r3, [r7, #22]
 8005bb0:	e008      	b.n	8005bc4 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 8005bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bb6:	2b05      	cmp	r3, #5
 8005bb8:	d102      	bne.n	8005bc0 <CO_LEDs_process+0x304>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	75bb      	strb	r3, [r7, #22]
 8005bbe:	e001      	b.n	8005bc4 <CO_LEDs_process+0x308>
        else                                        gr_co = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <CO_LEDs_process+0x316>
 8005bca:	7ffb      	ldrb	r3, [r7, #31]
 8005bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bd0:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) gr |= CO_LED_CANopen;
 8005bd2:	7dbb      	ldrb	r3, [r7, #22]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <CO_LEDs_process+0x324>
 8005bd8:	7fbb      	ldrb	r3, [r7, #30]
 8005bda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bde:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	7ffa      	ldrb	r2, [r7, #31]
 8005be4:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	7fba      	ldrb	r2, [r7, #30]
 8005bea:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8005bec:	bf00      	nop
 8005bee:	3724      	adds	r7, #36	; 0x24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b090      	sub	sp, #64	; 0x40
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	791b      	ldrb	r3, [r3, #4]
 8005c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8005c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	f040 814c 	bne.w	8005eb0 <CO_LSSslave_receive+0x2b8>
 8005c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f040 8147 	bne.w	8005eb0 <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 8005c22:	2300      	movs	r3, #0
 8005c24:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	3305      	adds	r3, #5
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005c34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d12c      	bne.n	8005c96 <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8005c42:	7ffb      	ldrb	r3, [r7, #31]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <CO_LSSslave_receive+0x56>
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d020      	beq.n	8005c8e <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 8005c4c:	e12a      	b.n	8005ea4 <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c50:	7c1b      	ldrb	r3, [r3, #16]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d110      	bne.n	8005c78 <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8005c5c:	2bff      	cmp	r3, #255	; 0xff
 8005c5e:	d10b      	bne.n	8005c78 <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 8005c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c64:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005c66:	2bff      	cmp	r3, #255	; 0xff
 8005c68:	d006      	beq.n	8005c78 <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005c70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8005c74:	2301      	movs	r3, #1
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c80:	3314      	adds	r3, #20
 8005c82:	2210      	movs	r2, #16
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f00b fe8c 	bl	80119a4 <memset>
                    break;
 8005c8c:	e10a      	b.n	8005ea4 <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	2201      	movs	r2, #1
 8005c92:	741a      	strb	r2, [r3, #16]
                    break;
 8005c94:	e106      	b.n	8005ea4 <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8005c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c98:	7c1b      	ldrb	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f040 80ee 	bne.w	8005e7c <CO_LSSslave_receive+0x284>
            switch (cs) {
 8005ca0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ca4:	3b40      	subs	r3, #64	; 0x40
 8005ca6:	2b11      	cmp	r3, #17
 8005ca8:	f200 80f7 	bhi.w	8005e9a <CO_LSSslave_receive+0x2a2>
 8005cac:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <CO_LSSslave_receive+0xbc>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005cfd 	.word	0x08005cfd
 8005cb8:	08005d0d 	.word	0x08005d0d
 8005cbc:	08005d1d 	.word	0x08005d1d
 8005cc0:	08005d2d 	.word	0x08005d2d
 8005cc4:	08005e9b 	.word	0x08005e9b
 8005cc8:	08005e9b 	.word	0x08005e9b
 8005ccc:	08005e9b 	.word	0x08005e9b
 8005cd0:	08005e9b 	.word	0x08005e9b
 8005cd4:	08005e9b 	.word	0x08005e9b
 8005cd8:	08005e9b 	.word	0x08005e9b
 8005cdc:	08005e9b 	.word	0x08005e9b
 8005ce0:	08005e9b 	.word	0x08005e9b
 8005ce4:	08005e9b 	.word	0x08005e9b
 8005ce8:	08005e9b 	.word	0x08005e9b
 8005cec:	08005e9b 	.word	0x08005e9b
 8005cf0:	08005e9b 	.word	0x08005e9b
 8005cf4:	08005e9b 	.word	0x08005e9b
 8005cf8:	08005d89 	.word	0x08005d89
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfe:	3301      	adds	r3, #1
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d08:	615a      	str	r2, [r3, #20]
                break;
 8005d0a:	e0cb      	b.n	8005ea4 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	3301      	adds	r3, #1
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d18:	619a      	str	r2, [r3, #24]
                break;
 8005d1a:	e0c3      	b.n	8005ea4 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	3301      	adds	r3, #1
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d28:	61da      	str	r2, [r3, #28]
                break;
 8005d2a:	e0bb      	b.n	8005ea4 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	3301      	adds	r3, #1
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d38:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	f040 80ab 	bne.w	8005e9e <CO_LSSslave_receive+0x2a6>
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	f040 80a4 	bne.w	8005e9e <CO_LSSslave_receive+0x2a6>
 8005d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	f040 809d 	bne.w	8005e9e <CO_LSSslave_receive+0x2a6>
 8005d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	f040 8096 	bne.w	8005e9e <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d74:	2201      	movs	r2, #1
 8005d76:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 8005d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005d7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    request_LSSslave_process = true;
 8005d82:	2301      	movs	r3, #1
 8005d84:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 8005d86:	e08a      	b.n	8005e9e <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2bff      	cmp	r3, #255	; 0xff
 8005d90:	f040 8087 	bne.w	8005ea2 <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005d9a:	2bff      	cmp	r3, #255	; 0xff
 8005d9c:	f040 8081 	bne.w	8005ea2 <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	795b      	ldrb	r3, [r3, #5]
 8005da4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    uint8_t lssSub = data[6];
 8005da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005daa:	799b      	ldrb	r3, [r3, #6]
 8005dac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    uint8_t lssNext = data[7];
 8005db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db2:	79db      	ldrb	r3, [r3, #7]
 8005db4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 8005db8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005dbc:	2b1f      	cmp	r3, #31
 8005dbe:	d903      	bls.n	8005dc8 <CO_LSSslave_receive+0x1d0>
 8005dc0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d16d      	bne.n	8005ea4 <CO_LSSslave_receive+0x2ac>
 8005dc8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d869      	bhi.n	8005ea4 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 8005dd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d865      	bhi.n	8005ea4 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	3301      	adds	r3, #1
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
                    ack = false;
 8005de4:	2300      	movs	r3, #0
 8005de6:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8005de8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005dec:	2b80      	cmp	r3, #128	; 0x80
 8005dee:	d10d      	bne.n	8005e0c <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 8005df0:	2301      	movs	r3, #1
 8005df2:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	3324      	adds	r3, #36	; 0x24
 8005e00:	2210      	movs	r2, #16
 8005e02:	2100      	movs	r1, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f00b fdcd 	bl	80119a4 <memset>
 8005e0a:	e02c      	b.n	8005e66 <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e12:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d125      	bne.n	8005e66 <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8005e1a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8005e28:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	405a      	eors	r2, r3
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d113      	bne.n	8005e66 <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 8005e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8005e4c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d108      	bne.n	8005e66 <CO_LSSslave_receive+0x26e>
 8005e54:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005e58:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d202      	bcs.n	8005e66 <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e62:	2201      	movs	r2, #1
 8005e64:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01a      	beq.n	8005ea2 <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005e72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8005e76:	2301      	movs	r3, #1
 8005e78:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 8005e7a:	e012      	b.n	8005ea2 <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	3349      	adds	r3, #73	; 0x49
 8005e80:	2208      	movs	r2, #8
 8005e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e84:	4618      	mov	r0, r3
 8005e86:	f00b fd65 	bl	8011954 <memcpy>
            LSSslave->service = cs;
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005e90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 8005e94:	2301      	movs	r3, #1
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e98:	e004      	b.n	8005ea4 <CO_LSSslave_receive+0x2ac>
                break;
 8005e9a:	bf00      	nop
 8005e9c:	e002      	b.n	8005ea4 <CO_LSSslave_receive+0x2ac>
                break;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <CO_LSSslave_receive+0x2ac>
                break;
 8005ea2:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8005ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	2201      	movs	r2, #1
 8005eae:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8005eb0:	bf00      	nop
 8005eb2:	3740      	adds	r7, #64	; 0x40
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af04      	add	r7, sp, #16
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d018      	beq.n	8005f02 <CO_LSSslave_init+0x4a>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d015      	beq.n	8005f02 <CO_LSSslave_init+0x4a>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d012      	beq.n	8005f02 <CO_LSSslave_init+0x4a>
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00f      	beq.n	8005f02 <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 8005ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00c      	beq.n	8005f02 <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b25b      	sxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	da06      	bge.n	8005f08 <CO_LSSslave_init+0x50>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2bff      	cmp	r3, #255	; 0xff
 8005f00:	d002      	beq.n	8005f08 <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295
 8005f06:	e046      	b.n	8005f96 <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8005f08:	2274      	movs	r2, #116	; 0x74
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f00b fd49 	bl	80119a4 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2210      	movs	r2, #16
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f00b fd1b 	bl	8011954 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 8005f48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005f4a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005f4c:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <CO_LSSslave_init+0xe8>)
 8005f4e:	9302      	str	r3, [sp, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	9301      	str	r3, [sp, #4]
 8005f54:	2300      	movs	r3, #0
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005f5c:	6a38      	ldr	r0, [r7, #32]
 8005f5e:	f001 fa67 	bl	8007430 <CO_CANrxBufferInit>
 8005f62:	4603      	mov	r3, r0
 8005f64:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f6a:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8005f6c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f6e:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8005f70:	2300      	movs	r3, #0
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	2308      	movs	r3, #8
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f7c:	f001 fab6 	bl	80074ec <CO_CANtxBufferInit>
 8005f80:	4602      	mov	r2, r0
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005f8e:	23ff      	movs	r3, #255	; 0xff
 8005f90:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8005f92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	08005bf9 	.word	0x08005bf9

08005fa4 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	; 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8005fac:	2300      	movs	r3, #0
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8203 	beq.w	80063c0 <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	3305      	adds	r3, #5
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f00b fceb 	bl	80119a4 <memset>

        switch (LSSslave->service) {
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005fd4:	3b04      	subs	r3, #4
 8005fd6:	2b5a      	cmp	r3, #90	; 0x5a
 8005fd8:	f200 81dd 	bhi.w	8006396 <CO_LSSslave_process+0x3f2>
 8005fdc:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <CO_LSSslave_process+0x40>)
 8005fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe2:	bf00      	nop
 8005fe4:	08006151 	.word	0x08006151
 8005fe8:	08006397 	.word	0x08006397
 8005fec:	08006397 	.word	0x08006397
 8005ff0:	08006397 	.word	0x08006397
 8005ff4:	08006397 	.word	0x08006397
 8005ff8:	08006397 	.word	0x08006397
 8005ffc:	08006397 	.word	0x08006397
 8006000:	08006397 	.word	0x08006397
 8006004:	08006397 	.word	0x08006397
 8006008:	08006397 	.word	0x08006397
 800600c:	08006397 	.word	0x08006397
 8006010:	08006397 	.word	0x08006397
 8006014:	08006397 	.word	0x08006397
 8006018:	08006165 	.word	0x08006165
 800601c:	08006397 	.word	0x08006397
 8006020:	080061b3 	.word	0x080061b3
 8006024:	08006397 	.word	0x08006397
 8006028:	0800624f 	.word	0x0800624f
 800602c:	08006397 	.word	0x08006397
 8006030:	0800628d 	.word	0x0800628d
 8006034:	08006397 	.word	0x08006397
 8006038:	08006397 	.word	0x08006397
 800603c:	08006397 	.word	0x08006397
 8006040:	08006397 	.word	0x08006397
 8006044:	08006397 	.word	0x08006397
 8006048:	08006397 	.word	0x08006397
 800604c:	08006397 	.word	0x08006397
 8006050:	08006397 	.word	0x08006397
 8006054:	08006397 	.word	0x08006397
 8006058:	08006397 	.word	0x08006397
 800605c:	08006397 	.word	0x08006397
 8006060:	08006397 	.word	0x08006397
 8006064:	08006397 	.word	0x08006397
 8006068:	08006397 	.word	0x08006397
 800606c:	08006397 	.word	0x08006397
 8006070:	08006397 	.word	0x08006397
 8006074:	08006397 	.word	0x08006397
 8006078:	08006397 	.word	0x08006397
 800607c:	08006397 	.word	0x08006397
 8006080:	08006397 	.word	0x08006397
 8006084:	08006397 	.word	0x08006397
 8006088:	08006397 	.word	0x08006397
 800608c:	08006397 	.word	0x08006397
 8006090:	08006397 	.word	0x08006397
 8006094:	08006397 	.word	0x08006397
 8006098:	08006397 	.word	0x08006397
 800609c:	08006397 	.word	0x08006397
 80060a0:	08006397 	.word	0x08006397
 80060a4:	08006397 	.word	0x08006397
 80060a8:	08006397 	.word	0x08006397
 80060ac:	08006397 	.word	0x08006397
 80060b0:	08006397 	.word	0x08006397
 80060b4:	08006397 	.word	0x08006397
 80060b8:	08006397 	.word	0x08006397
 80060bc:	08006397 	.word	0x08006397
 80060c0:	08006397 	.word	0x08006397
 80060c4:	08006397 	.word	0x08006397
 80060c8:	08006397 	.word	0x08006397
 80060cc:	08006397 	.word	0x08006397
 80060d0:	08006397 	.word	0x08006397
 80060d4:	08006397 	.word	0x08006397
 80060d8:	08006397 	.word	0x08006397
 80060dc:	08006397 	.word	0x08006397
 80060e0:	08006157 	.word	0x08006157
 80060e4:	08006397 	.word	0x08006397
 80060e8:	08006397 	.word	0x08006397
 80060ec:	08006397 	.word	0x08006397
 80060f0:	08006397 	.word	0x08006397
 80060f4:	08006397 	.word	0x08006397
 80060f8:	08006397 	.word	0x08006397
 80060fc:	08006397 	.word	0x08006397
 8006100:	08006397 	.word	0x08006397
 8006104:	08006397 	.word	0x08006397
 8006108:	08006397 	.word	0x08006397
 800610c:	08006397 	.word	0x08006397
 8006110:	08006397 	.word	0x08006397
 8006114:	08006397 	.word	0x08006397
 8006118:	08006389 	.word	0x08006389
 800611c:	08006397 	.word	0x08006397
 8006120:	08006397 	.word	0x08006397
 8006124:	08006397 	.word	0x08006397
 8006128:	08006397 	.word	0x08006397
 800612c:	08006397 	.word	0x08006397
 8006130:	08006397 	.word	0x08006397
 8006134:	08006397 	.word	0x08006397
 8006138:	08006397 	.word	0x08006397
 800613c:	080062e3 	.word	0x080062e3
 8006140:	08006305 	.word	0x08006305
 8006144:	08006327 	.word	0x08006327
 8006148:	08006349 	.word	0x08006349
 800614c:	0800636b 	.word	0x0800636b
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 8006150:	2301      	movs	r3, #1
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8006154:	e126      	b.n	80063a4 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	2244      	movs	r2, #68	; 0x44
 800615c:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 800615e:	2301      	movs	r3, #1
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006162:	e11f      	b.n	80063a4 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800616a:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 8006172:	7cfb      	ldrb	r3, [r7, #19]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <CO_LSSslave_process+0x1dc>
 8006178:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800617c:	2b00      	cmp	r3, #0
 800617e:	da02      	bge.n	8006186 <CO_LSSslave_process+0x1e2>
 8006180:	7cfb      	ldrb	r3, [r7, #19]
 8006182:	2bff      	cmp	r3, #255	; 0xff
 8006184:	d104      	bne.n	8006190 <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	7cfa      	ldrb	r2, [r7, #19]
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e002      	b.n	8006196 <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80061a0:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80061aa:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 80061ac:	2301      	movs	r3, #1
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061b0:	e0f8      	b.n	80063a4 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 80ef 	beq.w	800639a <CO_LSSslave_process+0x3f6>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80061c2:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80061ca:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80061d8:	7f7b      	ldrb	r3, [r7, #29]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d121      	bne.n	8006222 <CO_LSSslave_process+0x27e>
 80061de:	7f3b      	ldrb	r3, [r7, #28]
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	d01e      	beq.n	8006222 <CO_LSSslave_process+0x27e>
 80061e4:	7f3b      	ldrb	r3, [r7, #28]
 80061e6:	2b09      	cmp	r3, #9
 80061e8:	d81b      	bhi.n	8006222 <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 80061ea:	7f3b      	ldrb	r3, [r7, #28]
 80061ec:	4a77      	ldr	r2, [pc, #476]	; (80063cc <CO_LSSslave_process+0x428>)
 80061ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f2:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80061fc:	8b79      	ldrh	r1, [r7, #26]
 80061fe:	4610      	mov	r0, r2
 8006200:	4798      	blx	r3
 8006202:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d004      	beq.n	8006214 <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	8b7a      	ldrh	r2, [r7, #26]
 8006210:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006212:	e009      	b.n	8006228 <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8006214:	23ff      	movs	r3, #255	; 0xff
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006220:	e002      	b.n	8006228 <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006232:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006238:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800623c:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8006246:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 8006248:	2301      	movs	r3, #1
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800624c:	e0aa      	b.n	80063a4 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 80a3 	beq.w	800639e <CO_LSSslave_process+0x3fa>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80a0 	beq.w	80063a2 <CO_LSSslave_process+0x3fe>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006268:	b29b      	uxth	r3, r3
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006274:	b29a      	uxth	r2, r3
 8006276:	8bfb      	ldrh	r3, [r7, #30]
 8006278:	4313      	orrs	r3, r2
 800627a:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8006284:	8bf9      	ldrh	r1, [r7, #30]
 8006286:	4610      	mov	r0, r2
 8006288:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 800628a:	e08a      	b.n	80063a2 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <CO_LSSslave_process+0x2fe>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062a0:	e011      	b.n	80062c6 <CO_LSSslave_process+0x322>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6e90      	ldr	r0, [r2, #104]	; 0x68
                                               *LSSslave->pendingNodeID,
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 80062ae:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 80062b4:	8812      	ldrh	r2, [r2, #0]
 80062b6:	4798      	blx	r3
 80062b8:	6238      	str	r0, [r7, #32]
                if (!result) {
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <CO_LSSslave_process+0x322>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 80062c0:	2302      	movs	r3, #2
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80062d0:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80062da:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 80062dc:	2301      	movs	r3, #1
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062e0:	e060      	b.n	80063a4 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80062ec:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f8:	3306      	adds	r3, #6
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	601a      	str	r2, [r3, #0]
            CANsend = true;
 80062fe:	2301      	movs	r3, #1
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006302:	e04f      	b.n	80063a4 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800630e:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	3306      	adds	r3, #6
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006320:	2301      	movs	r3, #1
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006324:	e03e      	b.n	80063a4 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006330:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633c:	3306      	adds	r3, #6
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006342:	2301      	movs	r3, #1
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006346:	e02d      	b.n	80063a4 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006352:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	3306      	adds	r3, #6
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006364:	2301      	movs	r3, #1
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006368:	e01c      	b.n	80063a4 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006374:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8006380:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 8006382:	2301      	movs	r3, #1
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006386:	e00d      	b.n	80063a4 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638c:	224f      	movs	r2, #79	; 0x4f
 800638e:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8006390:	2301      	movs	r3, #1
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006394:	e006      	b.n	80063a4 <CO_LSSslave_process+0x400>
        }
        default: {
            break;
 8006396:	bf00      	nop
 8006398:	e004      	b.n	80063a4 <CO_LSSslave_process+0x400>
                break;
 800639a:	bf00      	nop
 800639c:	e002      	b.n	80063a4 <CO_LSSslave_process+0x400>
                break;
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <CO_LSSslave_process+0x400>
            break;
 80063a2:	bf00      	nop
        }
        }

        if(CANsend) {
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <CO_LSSslave_process+0x416>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f001 f913 	bl	80075e0 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3730      	adds	r7, #48	; 0x30
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	080167e0 	.word	0x080167e0

080063d0 <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	08db      	lsrs	r3, r3, #3
 80063e0:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	2201      	movs	r2, #1
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b09      	cmp	r3, #9
 80063fa:	d807      	bhi.n	800640c <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	5cd2      	ldrb	r2, [r2, r3]
 8006402:	7bbb      	ldrb	r3, [r7, #14]
 8006404:	4013      	ands	r3, r2
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <CO_isError+0x40>
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <CO_isError+0x42>
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <CO_getErrorRegister+0x1e>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <CO_getErrorRegister+0x1e>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	e000      	b.n	800643e <CO_getErrorRegister+0x20>
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <CO_NMT_getInternalState+0x16>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f993 3000 	ldrsb.w	r3, [r3]
 800645e:	e000      	b.n	8006462 <CO_NMT_getInternalState+0x18>
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <CO_LSSslave_getState+0x14>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	7c1b      	ldrb	r3, [r3, #16]
 8006480:	e000      	b.n	8006484 <CO_LSSslave_getState+0x16>
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 80064a6:	2140      	movs	r1, #64	; 0x40
 80064a8:	2001      	movs	r0, #1
 80064aa:	f00b f843 	bl	8011534 <calloc>
 80064ae:	4603      	mov	r3, r0
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8103 	beq.w	80066c0 <CO_new+0x230>
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	3340      	adds	r3, #64	; 0x40
 80064be:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80064c0:	212c      	movs	r1, #44	; 0x2c
 80064c2:	2001      	movs	r0, #1
 80064c4:	f00b f836 	bl	8011534 <calloc>
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	611a      	str	r2, [r3, #16]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 80f5 	beq.w	80066c4 <CO_new+0x234>
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	332c      	adds	r3, #44	; 0x2c
 80064de:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 80064e0:	2308      	movs	r3, #8
 80064e2:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80064e4:	2130      	movs	r1, #48	; 0x30
 80064e6:	2001      	movs	r0, #1
 80064e8:	f00b f824 	bl	8011534 <calloc>
 80064ec:	4603      	mov	r3, r0
 80064ee:	461a      	mov	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	615a      	str	r2, [r3, #20]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 80e5 	beq.w	80066c8 <CO_new+0x238>
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3330      	adds	r3, #48	; 0x30
 8006502:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	2110      	movs	r1, #16
 8006508:	4618      	mov	r0, r3
 800650a:	f00b f813 	bl	8011534 <calloc>
 800650e:	4603      	mov	r3, r0
 8006510:	461a      	mov	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	619a      	str	r2, [r3, #24]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 80d6 	beq.w	80066cc <CO_new+0x23c>
 8006520:	7afb      	ldrb	r3, [r7, #11]
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4413      	add	r3, r2
 8006528:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 800652a:	2150      	movs	r1, #80	; 0x50
 800652c:	2001      	movs	r0, #1
 800652e:	f00b f801 	bl	8011534 <calloc>
 8006532:	4603      	mov	r3, r0
 8006534:	461a      	mov	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	61da      	str	r2, [r3, #28]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 80c6 	beq.w	80066d0 <CO_new+0x240>
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	3350      	adds	r3, #80	; 0x50
 8006548:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 800654a:	2311      	movs	r3, #17
 800654c:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 800654e:	7abb      	ldrb	r3, [r7, #10]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d912      	bls.n	800657a <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006554:	7abb      	ldrb	r3, [r7, #10]
 8006556:	2108      	movs	r1, #8
 8006558:	4618      	mov	r0, r3
 800655a:	f00a ffeb 	bl	8011534 <calloc>
 800655e:	4603      	mov	r3, r0
 8006560:	461a      	mov	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	621a      	str	r2, [r3, #32]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 80b2 	beq.w	80066d4 <CO_new+0x244>
 8006570:	7abb      	ldrb	r3, [r7, #10]
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4413      	add	r3, r2
 8006578:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 800657a:	21a8      	movs	r1, #168	; 0xa8
 800657c:	2001      	movs	r0, #1
 800657e:	f00a ffd9 	bl	8011534 <calloc>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	625a      	str	r2, [r3, #36]	; 0x24
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80a2 	beq.w	80066d8 <CO_new+0x248>
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	33a8      	adds	r3, #168	; 0xa8
 8006598:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 800659a:	212c      	movs	r1, #44	; 0x2c
 800659c:	2001      	movs	r0, #1
 800659e:	f00a ffc9 	bl	8011534 <calloc>
 80065a2:	4603      	mov	r3, r0
 80065a4:	461a      	mov	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	629a      	str	r2, [r3, #40]	; 0x28
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 8094 	beq.w	80066dc <CO_new+0x24c>
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	332c      	adds	r3, #44	; 0x2c
 80065b8:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 80065ba:	2160      	movs	r1, #96	; 0x60
 80065bc:	2001      	movs	r0, #1
 80065be:	f00a ffb9 	bl	8011534 <calloc>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8086 	beq.w	80066e0 <CO_new+0x250>
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	3360      	adds	r3, #96	; 0x60
 80065d8:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 80065da:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80065de:	2004      	movs	r0, #4
 80065e0:	f00a ffa8 	bl	8011534 <calloc>
 80065e4:	4603      	mov	r3, r0
 80065e6:	461a      	mov	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d077      	beq.n	80066e4 <CO_new+0x254>
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80065fa:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 80065fc:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8006600:	2004      	movs	r0, #4
 8006602:	f00a ff97 	bl	8011534 <calloc>
 8006606:	4603      	mov	r3, r0
 8006608:	461a      	mov	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	635a      	str	r2, [r3, #52]	; 0x34
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006612:	2b00      	cmp	r3, #0
 8006614:	d068      	beq.n	80066e8 <CO_new+0x258>
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 800661c:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 800661e:	210c      	movs	r1, #12
 8006620:	2001      	movs	r0, #1
 8006622:	f00a ff87 	bl	8011534 <calloc>
 8006626:	4603      	mov	r3, r0
 8006628:	461a      	mov	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	639a      	str	r2, [r3, #56]	; 0x38
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	2b00      	cmp	r3, #0
 8006634:	d05a      	beq.n	80066ec <CO_new+0x25c>
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	330c      	adds	r3, #12
 800663a:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 800663c:	2174      	movs	r1, #116	; 0x74
 800663e:	2001      	movs	r0, #1
 8006640:	f00a ff78 	bl	8011534 <calloc>
 8006644:	4603      	mov	r3, r0
 8006646:	461a      	mov	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	63da      	str	r2, [r3, #60]	; 0x3c
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d04d      	beq.n	80066f0 <CO_new+0x260>
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	3374      	adds	r3, #116	; 0x74
 8006658:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 800665a:	2138      	movs	r1, #56	; 0x38
 800665c:	2001      	movs	r0, #1
 800665e:	f00a ff69 	bl	8011534 <calloc>
 8006662:	4603      	mov	r3, r0
 8006664:	461a      	mov	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d040      	beq.n	80066f4 <CO_new+0x264>
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3338      	adds	r3, #56	; 0x38
 8006676:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006678:	210c      	movs	r1, #12
 800667a:	2011      	movs	r0, #17
 800667c:	f00a ff5a 	bl	8011534 <calloc>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	609a      	str	r2, [r3, #8]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d033      	beq.n	80066f8 <CO_new+0x268>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	33cc      	adds	r3, #204	; 0xcc
 8006694:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006696:	2118      	movs	r1, #24
 8006698:	2009      	movs	r0, #9
 800669a:	f00a ff4b 	bl	8011534 <calloc>
 800669e:	4603      	mov	r3, r0
 80066a0:	461a      	mov	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	60da      	str	r2, [r3, #12]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d026      	beq.n	80066fc <CO_new+0x26c>
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	33d8      	adds	r3, #216	; 0xd8
 80066b2:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
        coFinal = co;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	e01e      	b.n	80066fe <CO_new+0x26e>
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 80066c0:	bf00      	nop
 80066c2:	e01c      	b.n	80066fe <CO_new+0x26e>
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80066c4:	bf00      	nop
 80066c6:	e01a      	b.n	80066fe <CO_new+0x26e>
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80066c8:	bf00      	nop
 80066ca:	e018      	b.n	80066fe <CO_new+0x26e>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 80066cc:	bf00      	nop
 80066ce:	e016      	b.n	80066fe <CO_new+0x26e>
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 80066d0:	bf00      	nop
 80066d2:	e014      	b.n	80066fe <CO_new+0x26e>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 80066d4:	bf00      	nop
 80066d6:	e012      	b.n	80066fe <CO_new+0x26e>
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 80066d8:	bf00      	nop
 80066da:	e010      	b.n	80066fe <CO_new+0x26e>
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 80066dc:	bf00      	nop
 80066de:	e00e      	b.n	80066fe <CO_new+0x26e>
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 80066e0:	bf00      	nop
 80066e2:	e00c      	b.n	80066fe <CO_new+0x26e>
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 80066e4:	bf00      	nop
 80066e6:	e00a      	b.n	80066fe <CO_new+0x26e>
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 80066e8:	bf00      	nop
 80066ea:	e008      	b.n	80066fe <CO_new+0x26e>
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 80066ec:	bf00      	nop
 80066ee:	e006      	b.n	80066fe <CO_new+0x26e>
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 80066f0:	bf00      	nop
 80066f2:	e004      	b.n	80066fe <CO_new+0x26e>
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 80066f4:	bf00      	nop
 80066f6:	e002      	b.n	80066fe <CO_new+0x26e>
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 80066f8:	bf00      	nop
 80066fa:	e000      	b.n	80066fe <CO_new+0x26e>
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80066fc:	bf00      	nop
    } while (false);

    if (coFinal == NULL) {
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d102      	bne.n	800670a <CO_new+0x27a>
        CO_delete(co);
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f80b 	bl	8006720 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <CO_new+0x286>
        *heapMemoryUsed = mem;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006716:	697b      	ldr	r3, [r7, #20]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <CO_delete>:

void CO_delete(CO_t *co) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d053      	beq.n	80067d6 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fe66 	bl	8007404 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	4618      	mov	r0, r3
 800673e:	f00b f901 	bl	8011944 <free>
    CO_free(co->CANrx);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	4618      	mov	r0, r3
 8006748:	f00b f8fc 	bl	8011944 <free>
    CO_free(co->CANmodule);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	4618      	mov	r0, r3
 8006752:	f00b f8f7 	bl	8011944 <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	4618      	mov	r0, r3
 800675c:	f00b f8f2 	bl	8011944 <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	4618      	mov	r0, r3
 8006766:	f00b f8ed 	bl	8011944 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676e:	4618      	mov	r0, r3
 8006770:	f00b f8e8 	bl	8011944 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	4618      	mov	r0, r3
 800677a:	f00b f8e3 	bl	8011944 <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	4618      	mov	r0, r3
 8006784:	f00b f8de 	bl	8011944 <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	4618      	mov	r0, r3
 800678e:	f00b f8d9 	bl	8011944 <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	4618      	mov	r0, r3
 8006798:	f00b f8d4 	bl	8011944 <free>

    /* Emergency */
    CO_free(co->em);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f00b f8cf 	bl	8011944 <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f00b f8ca 	bl	8011944 <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f00b f8c5 	bl	8011944 <free>
    CO_free(co->HBcons);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	4618      	mov	r0, r3
 80067c0:	f00b f8c0 	bl	8011944 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f00b f8bb 	bl	8011944 <free>

    /* CANopen object */
    CO_free(co);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f00b f8b8 	bl	8011944 <free>
 80067d4:	e000      	b.n	80067d8 <CO_delete+0xb8>
        return;
 80067d6:	bf00      	nop
}
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 80067de:	b580      	push	{r7, lr}
 80067e0:	b08a      	sub	sp, #40	; 0x28
 80067e2:	af04      	add	r7, sp, #16
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	4613      	mov	r3, r2
 80067ea:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d102      	bne.n	80067f8 <CO_CANinit+0x1a>
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	e01a      	b.n	800682e <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8006800:	68b8      	ldr	r0, [r7, #8]
 8006802:	f000 fd0f 	bl	8007224 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6858      	ldr	r0, [r3, #4]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6899      	ldr	r1, [r3, #8]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	88fa      	ldrh	r2, [r7, #6]
 8006814:	9202      	str	r2, [sp, #8]
 8006816:	2209      	movs	r2, #9
 8006818:	9201      	str	r2, [sp, #4]
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	2311      	movs	r3, #17
 800681e:	460a      	mov	r2, r1
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	f000 fd27 	bl	8007274 <CO_CANmodule_init>
 8006826:	4603      	mov	r3, r0
 8006828:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 800682a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b08c      	sub	sp, #48	; 0x30
 800683a:	af06      	add	r7, sp, #24
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d102      	bne.n	8006850 <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	e01a      	b.n	8006886 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	6852      	ldr	r2, [r2, #4]
 800685c:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8006860:	9105      	str	r1, [sp, #20]
 8006862:	2108      	movs	r1, #8
 8006864:	9104      	str	r1, [sp, #16]
 8006866:	9203      	str	r2, [sp, #12]
 8006868:	f240 72e5 	movw	r2, #2021	; 0x7e5
 800686c:	9202      	str	r2, [sp, #8]
 800686e:	2210      	movs	r2, #16
 8006870:	9201      	str	r2, [sp, #4]
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	f7ff fb1d 	bl	8005eb8 <CO_LSSslave_init>
 800687e:	4603      	mov	r3, r0
 8006880:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8006882:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 8006890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006892:	b091      	sub	sp, #68	; 0x44
 8006894:	af0a      	add	r7, sp, #40	; 0x28
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d102      	bne.n	80068aa <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80068a4:	f04f 33ff 	mov.w	r3, #4294967295
 80068a8:	e134      	b.n	8006b14 <CO_CANopenInit+0x284>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <CO_CANopenInit+0x26>
        em = co->em;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 80068bc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80068c0:	2bff      	cmp	r3, #255	; 0xff
 80068c2:	d103      	bne.n	80068cc <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e00a      	b.n	80068e2 <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 80068cc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <CO_CANopenInit+0x4c>
 80068d4:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 80068d8:	2b00      	cmp	r3, #0
 80068da:	da02      	bge.n	80068e2 <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295
 80068e0:	e118      	b.n	8006b14 <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe ffd0 	bl	800588c <CO_LEDs_init>
 80068ec:	4603      	mov	r3, r0
 80068ee:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 80068f0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <CO_CANopenInit+0x6e>
 80068f8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80068fc:	e10a      	b.n	8006b14 <CO_CANopenInit+0x284>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8006906:	f06f 0312 	mvn.w	r3, #18
 800690a:	e103      	b.n	8006b14 <CO_CANopenInit+0x284>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	69d8      	ldr	r0, [r3, #28]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 8006914:	4b81      	ldr	r3, [pc, #516]	; (8006b1c <CO_CANopenInit+0x28c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 8006922:	4b7e      	ldr	r3, [pc, #504]	; (8006b1c <CO_CANopenInit+0x28c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 8006928:	336c      	adds	r3, #108	; 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 800692a:	4a7c      	ldr	r2, [pc, #496]	; (8006b1c <CO_CANopenInit+0x28c>)
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 8006930:	3218      	adds	r2, #24
 8006932:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006934:	9105      	str	r1, [sp, #20]
 8006936:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 800693a:	9104      	str	r1, [sp, #16]
 800693c:	9203      	str	r2, [sp, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	9202      	str	r2, [sp, #8]
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	2311      	movs	r3, #17
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	4633      	mov	r3, r6
 800694a:	462a      	mov	r2, r5
 800694c:	4621      	mov	r1, r4
 800694e:	f7fa fc91 	bl	8001274 <CO_EM_init>
 8006952:	4603      	mov	r3, r0
 8006954:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 8006956:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <CO_CANopenInit+0xd4>
 800695e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006962:	e0d7      	b.n	8006b14 <CO_CANopenInit+0x284>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8006968:	4b6c      	ldr	r3, [pc, #432]	; (8006b1c <CO_CANopenInit+0x28c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 800696e:	f103 0590 	add.w	r5, r3, #144	; 0x90
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	6852      	ldr	r2, [r2, #4]
 800697a:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 800697e:	b289      	uxth	r1, r1
 8006980:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 8006984:	b289      	uxth	r1, r1
 8006986:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 800698a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800698c:	9008      	str	r0, [sp, #32]
 800698e:	9107      	str	r1, [sp, #28]
 8006990:	2107      	movs	r1, #7
 8006992:	9106      	str	r1, [sp, #24]
 8006994:	9205      	str	r2, [sp, #20]
 8006996:	2200      	movs	r2, #0
 8006998:	9204      	str	r2, [sp, #16]
 800699a:	2200      	movs	r2, #0
 800699c:	9203      	str	r2, [sp, #12]
 800699e:	9302      	str	r3, [sp, #8]
 80069a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	4633      	mov	r3, r6
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	4629      	mov	r1, r5
 80069ae:	4620      	mov	r0, r4
 80069b0:	f7fb faf0 	bl	8001f94 <CO_NMT_init>
 80069b4:	4603      	mov	r3, r0
 80069b6:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 80069b8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <CO_CANopenInit+0x136>
 80069c0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80069c4:	e0a6      	b.n	8006b14 <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6958      	ldr	r0, [r3, #20]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 80069ce:	4b53      	ldr	r3, [pc, #332]	; (8006b1c <CO_CANopenInit+0x28c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 80069d4:	3384      	adds	r3, #132	; 0x84
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	6852      	ldr	r2, [r2, #4]
 80069da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80069dc:	9103      	str	r1, [sp, #12]
 80069de:	2108      	movs	r1, #8
 80069e0:	9102      	str	r1, [sp, #8]
 80069e2:	9201      	str	r2, [sp, #4]
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	2308      	movs	r3, #8
 80069e8:	4622      	mov	r2, r4
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	f7fa ffd6 	bl	800199c <CO_HBconsumer_init>
 80069f0:	4603      	mov	r3, r0
 80069f2:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 80069f4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <CO_CANopenInit+0x172>
 80069fc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006a00:	e088      	b.n	8006b14 <CO_CANopenInit+0x284>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8006a02:	4b46      	ldr	r3, [pc, #280]	; (8006b1c <CO_CANopenInit+0x28c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	33b4      	adds	r3, #180	; 0xb4
 8006a0a:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	827b      	strh	r3, [r7, #18]
 8006a10:	e033      	b.n	8006a7a <CO_CANopenInit+0x1ea>
            err = CO_SDOserver_init(&co->SDOserver[i],
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a1a:	21a8      	movs	r1, #168	; 0xa8
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	18d6      	adds	r6, r2, r3
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	f102 030c 	add.w	r3, r2, #12
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	8a79      	ldrh	r1, [r7, #18]
 8006a30:	3107      	adds	r1, #7
 8006a32:	b289      	uxth	r1, r1
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	6840      	ldr	r0, [r0, #4]
 8006a38:	8a7c      	ldrh	r4, [r7, #18]
 8006a3a:	3406      	adds	r4, #6
 8006a3c:	b2a4      	uxth	r4, r4
 8006a3e:	f897 c048 	ldrb.w	ip, [r7, #72]	; 0x48
 8006a42:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8006a44:	9505      	str	r5, [sp, #20]
 8006a46:	9404      	str	r4, [sp, #16]
 8006a48:	9003      	str	r0, [sp, #12]
 8006a4a:	9102      	str	r1, [sp, #8]
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	4663      	mov	r3, ip
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	4630      	mov	r0, r6
 8006a58:	f7fd fa32 	bl	8003ec0 <CO_SDOserver_init>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 8006a60:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <CO_CANopenInit+0x1de>
 8006a68:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006a6c:	e052      	b.n	8006b14 <CO_CANopenInit+0x284>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006a6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	3301      	adds	r3, #1
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	827b      	strh	r3, [r7, #18]
 8006a7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	ddc7      	ble.n	8006a12 <CO_CANopenInit+0x182>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a98      	ldr	r0, [r3, #40]	; 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 8006a86:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <CO_CANopenInit+0x28c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8006a8c:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	2302      	movs	r3, #2
 8006a9a:	f7fe fe01 	bl	80056a0 <CO_TIME_init>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 8006aa2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <CO_CANopenInit+0x220>
 8006aaa:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006aae:	e031      	b.n	8006b14 <CO_CANopenInit+0x284>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6add      	ldr	r5, [r3, #44]	; 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 8006ab4:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <CO_CANopenInit+0x28c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8006aba:	f103 0624 	add.w	r6, r3, #36	; 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006abe:	4b17      	ldr	r3, [pc, #92]	; (8006b1c <CO_CANopenInit+0x28c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8006ac4:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 8006ac8:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <CO_CANopenInit+0x28c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8006ace:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8006ad0:	4a12      	ldr	r2, [pc, #72]	; (8006b1c <CO_CANopenInit+0x28c>)
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 8006ad6:	32a8      	adds	r2, #168	; 0xa8
 8006ad8:	68f9      	ldr	r1, [r7, #12]
 8006ada:	6849      	ldr	r1, [r1, #4]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	6840      	ldr	r0, [r0, #4]
 8006ae0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8006ae2:	9406      	str	r4, [sp, #24]
 8006ae4:	2400      	movs	r4, #0
 8006ae6:	9405      	str	r4, [sp, #20]
 8006ae8:	9004      	str	r0, [sp, #16]
 8006aea:	2001      	movs	r0, #1
 8006aec:	9003      	str	r0, [sp, #12]
 8006aee:	9102      	str	r1, [sp, #8]
 8006af0:	9201      	str	r2, [sp, #4]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	4663      	mov	r3, ip
 8006af6:	4632      	mov	r2, r6
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	4628      	mov	r0, r5
 8006afc:	f7fe fbc2 	bl	8005284 <CO_SYNC_init>
 8006b00:	4603      	mov	r3, r0
 8006b02:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 8006b04:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <CO_CANopenInit+0x282>
 8006b0c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006b10:	e000      	b.n	8006b14 <CO_CANopenInit+0x284>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b1c:	200003cc 	.word	0x200003cc

08006b20 <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 8006b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b22:	b093      	sub	sp, #76	; 0x4c
 8006b24:	af06      	add	r7, sp, #24
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006b34:	f04f 33ff 	mov.w	r3, #4294967295
 8006b38:	e0c3      	b.n	8006cc2 <CO_CANopenInitPDO+0x1a2>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <CO_CANopenInitPDO+0x30>
 8006b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	db03      	blt.n	8006b50 <CO_CANopenInitPDO+0x30>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d009      	beq.n	8006b64 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <CO_CANopenInitPDO+0x3e>
 8006b58:	f06f 0312 	mvn.w	r3, #18
 8006b5c:	e0b1      	b.n	8006cc2 <CO_CANopenInitPDO+0x1a2>
 8006b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b62:	e0ae      	b.n	8006cc2 <CO_CANopenInitPDO+0x1a2>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 8006b64:	4b59      	ldr	r3, [pc, #356]	; (8006ccc <CO_CANopenInitPDO+0x1ac>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	33cc      	adds	r3, #204	; 0xcc
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 8006b6e:	4b57      	ldr	r3, [pc, #348]	; (8006ccc <CO_CANopenInitPDO+0x1ac>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	33fc      	adds	r3, #252	; 0xfc
 8006b76:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006b78:	2300      	movs	r3, #0
 8006b7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b7c:	e044      	b.n	8006c08 <CO_CANopenInitPDO+0xe8>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 8006b82:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	dc09      	bgt.n	8006b9e <CO_CANopenInitPDO+0x7e>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 8006b8a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006b8e:	3302      	adds	r3, #2
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	021b      	lsls	r3, r3, #8
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	84bb      	strh	r3, [r7, #36]	; 0x24
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006ba6:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8006baa:	fb01 f303 	mul.w	r3, r1, r3
 8006bae:	18d5      	adds	r5, r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	f103 020c 	add.w	r2, r3, #12
 8006bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bbe:	f102 010c 	add.w	r1, r2, #12
 8006bc2:	62b9      	str	r1, [r7, #40]	; 0x28
 8006bc4:	68f9      	ldr	r1, [r7, #12]
 8006bc6:	6849      	ldr	r1, [r1, #4]
 8006bc8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8006bca:	3003      	adds	r0, #3
 8006bcc:	b280      	uxth	r0, r0
 8006bce:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006bd0:	9405      	str	r4, [sp, #20]
 8006bd2:	9004      	str	r0, [sp, #16]
 8006bd4:	9103      	str	r1, [sp, #12]
 8006bd6:	9202      	str	r2, [sp, #8]
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	4633      	mov	r3, r6
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4628      	mov	r0, r5
 8006be6:	f7fc fb1b 	bl	8003220 <CO_RPDO_init>
 8006bea:	4603      	mov	r3, r0
 8006bec:	75bb      	strb	r3, [r7, #22]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 8006bee:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <CO_CANopenInitPDO+0xdc>
 8006bf6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006bfa:	e062      	b.n	8006cc2 <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006bfc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3301      	adds	r3, #1
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006c08:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	ddb6      	ble.n	8006b7e <CO_CANopenInitPDO+0x5e>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8006c10:	4b2e      	ldr	r3, [pc, #184]	; (8006ccc <CO_CANopenInitPDO+0x1ac>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006c1a:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8006c1c:	4b2b      	ldr	r3, [pc, #172]	; (8006ccc <CO_CANopenInitPDO+0x1ac>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8006c26:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006c28:	2300      	movs	r3, #0
 8006c2a:	837b      	strh	r3, [r7, #26]
 8006c2c:	e044      	b.n	8006cb8 <CO_CANopenInitPDO+0x198>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8006c32:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	dc09      	bgt.n	8006c4e <CO_CANopenInitPDO+0x12e>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 8006c3a:	8b7b      	ldrh	r3, [r7, #26]
 8006c3c:	021b      	lsls	r3, r3, #8
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	4413      	add	r3, r2
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006c4c:	833b      	strh	r3, [r7, #24]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c52:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006c56:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8006c5a:	fb01 f303 	mul.w	r3, r1, r3
 8006c5e:	18d5      	adds	r5, r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	f103 020c 	add.w	r2, r3, #12
 8006c6a:	623a      	str	r2, [r7, #32]
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	f102 010c 	add.w	r1, r2, #12
 8006c72:	61f9      	str	r1, [r7, #28]
 8006c74:	68f9      	ldr	r1, [r7, #12]
 8006c76:	6849      	ldr	r1, [r1, #4]
 8006c78:	8b78      	ldrh	r0, [r7, #26]
 8006c7a:	3002      	adds	r0, #2
 8006c7c:	b280      	uxth	r0, r0
 8006c7e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006c80:	9405      	str	r4, [sp, #20]
 8006c82:	9004      	str	r0, [sp, #16]
 8006c84:	9103      	str	r1, [sp, #12]
 8006c86:	9202      	str	r2, [sp, #8]
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	8b3b      	ldrh	r3, [r7, #24]
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	4633      	mov	r3, r6
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	4628      	mov	r0, r5
 8006c96:	f7fc fd5b 	bl	8003750 <CO_TPDO_init>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	75fb      	strb	r3, [r7, #23]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 8006c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <CO_CANopenInitPDO+0x18c>
 8006ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006caa:	e00a      	b.n	8006cc2 <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006cac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	837b      	strh	r3, [r7, #26]
 8006cb8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	ddb6      	ble.n	8006c2e <CO_CANopenInitPDO+0x10e>
        }
    }
#endif

    return CO_ERROR_NO;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3734      	adds	r7, #52	; 0x34
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	200003cc 	.word	0x200003cc

08006cd0 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 8006cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd2:	b097      	sub	sp, #92	; 0x5c
 8006cd4:	af08      	add	r7, sp, #32
 8006cd6:	61f8      	str	r0, [r7, #28]
 8006cd8:	61b9      	str	r1, [r7, #24]
 8006cda:	617a      	str	r2, [r7, #20]
 8006cdc:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff fbae 	bl	800644a <CO_NMT_getInternalState>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006cf4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 8006cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cfa:	d003      	beq.n	8006d04 <CO_process+0x34>
 8006cfc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006d00:	2b05      	cmp	r3, #5
 8006d02:	d101      	bne.n	8006d08 <CO_process+0x38>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <CO_process+0x3a>
 8006d08:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fca8 	bl	8007666 <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff f942 	bl	8005fa4 <CO_LSSslave_process>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	8a5b      	ldrh	r3, [r3, #18]
 8006d38:	847b      	strh	r3, [r7, #34]	; 0x22
    bool_t LSSslave_configuration = false;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	633b      	str	r3, [r7, #48]	; 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fb93 	bl	800646e <CO_LSSslave_getState>
 8006d48:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	633b      	str	r3, [r7, #48]	; 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <CO_process+0x92>
 8006d5c:	f997 4021 	ldrsb.w	r4, [r7, #33]	; 0x21
 8006d60:	e000      	b.n	8006d64 <CO_process+0x94>
 8006d62:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 8006d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d66:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bf14      	ite	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	2300      	moveq	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 8006d76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006d78:	f240 3303 	movw	r3, #771	; 0x303
 8006d7c:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bf14      	ite	ne
 8006d82:	2301      	movne	r3, #1
 8006d84:	2300      	moveq	r3, #0
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	60bb      	str	r3, [r7, #8]
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d107      	bne.n	8006da0 <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	2118      	movs	r1, #24
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff fb1a 	bl	80063d0 <CO_isError>
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	e000      	b.n	8006da2 <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 8006da0:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d113      	bne.n	8006dd0 <CO_process+0x100>
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	211b      	movs	r1, #27
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff fb0e 	bl	80063d0 <CO_isError>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d108      	bne.n	8006dcc <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	211c      	movs	r1, #28
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff fb05 	bl	80063d0 <CO_isError>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <CO_process+0x102>
 8006dd0:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 8006dd2:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff fb20 	bl	800641e <CO_getErrorRegister>
 8006dde:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bf14      	ite	ne
 8006de4:	2301      	movne	r3, #1
 8006de6:	2300      	moveq	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	9307      	str	r3, [sp, #28]
 8006df0:	2300      	movs	r3, #0
 8006df2:	9306      	str	r3, [sp, #24]
 8006df4:	9205      	str	r2, [sp, #20]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	9304      	str	r3, [sp, #16]
 8006dfa:	9503      	str	r5, [sp, #12]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9302      	str	r3, [sp, #8]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	6979      	ldr	r1, [r7, #20]
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f7fe fd54 	bl	80058bc <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <CO_process+0x152>
        return reset;
 8006e1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e20:	e047      	b.n	8006eb2 <CO_process+0x1e2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	69d8      	ldr	r0, [r3, #28]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e2c:	f7fa fb02 	bl	8001434 <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	6918      	ldr	r0, [r3, #16]
 8006e34:	f107 0121 	add.w	r1, r7, #33	; 0x21
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	f7fb f968 	bl	8002110 <CO_NMT_process>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006e46:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 8006e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e4c:	d003      	beq.n	8006e56 <CO_process+0x186>
 8006e4e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006e52:	2b05      	cmp	r3, #5
 8006e54:	d101      	bne.n	8006e5a <CO_process+0x18a>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <CO_process+0x18c>
 8006e5a:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006e64:	e011      	b.n	8006e8a <CO_process+0x1ba>
        CO_SDOserver_process(&co->SDOserver[i],
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e6e:	21a8      	movs	r1, #168	; 0xa8
 8006e70:	fb01 f303 	mul.w	r3, r1, r3
 8006e74:	18d0      	adds	r0, r2, r3
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e7c:	f7fd fb16 	bl	80044ac <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e84:	3301      	adds	r3, #1
 8006e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0e9      	beq.n	8006e66 <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	6958      	ldr	r0, [r3, #20]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e9c:	f7fa fec2 	bl	8001c24 <CO_HBconsumer_process>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fc79 	bl	80057a0 <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 8006eae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	373c      	adds	r7, #60	; 0x3c
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006ebc <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8006ec4:	4a13      	ldr	r2, [pc, #76]	; (8006f14 <canopen_app_init+0x58>)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8006ece:	f107 0308 	add.w	r3, r7, #8
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff fadb 	bl	8006490 <CO_new>
 8006eda:	4603      	mov	r3, r0
 8006edc:	4a0e      	ldr	r2, [pc, #56]	; (8006f18 <canopen_app_init+0x5c>)
 8006ede:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8006ee0:	4b0d      	ldr	r3, [pc, #52]	; (8006f18 <canopen_app_init+0x5c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8006ee8:	480c      	ldr	r0, [pc, #48]	; (8006f1c <canopen_app_init+0x60>)
 8006eea:	f00b fd59 	bl	80129a0 <puts>
        return 1;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e00c      	b.n	8006f0c <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	480a      	ldr	r0, [pc, #40]	; (8006f20 <canopen_app_init+0x64>)
 8006ef8:	f00b fccc 	bl	8012894 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <canopen_app_init+0x58>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a05      	ldr	r2, [pc, #20]	; (8006f18 <canopen_app_init+0x5c>)
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8006f06:	f000 f80d 	bl	8006f24 <canopen_app_resetCommunication>
    return 0;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	200006c4 	.word	0x200006c4
 8006f18:	200006c8 	.word	0x200006c8
 8006f1c:	08016558 	.word	0x08016558
 8006f20:	08016578 	.word	0x08016578

08006f24 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006f24:	b590      	push	{r4, r7, lr}
 8006f26:	b08f      	sub	sp, #60	; 0x3c
 8006f28:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8006f2a:	487d      	ldr	r0, [pc, #500]	; (8007120 <canopen_app_resetCommunication+0x1fc>)
 8006f2c:	f00b fd38 	bl	80129a0 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8006f30:	4b7c      	ldr	r3, [pc, #496]	; (8007124 <canopen_app_resetCommunication+0x200>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006f3a:	4b7b      	ldr	r3, [pc, #492]	; (8007128 <canopen_app_resetCommunication+0x204>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 f970 	bl	8007224 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006f44:	4b77      	ldr	r3, [pc, #476]	; (8007124 <canopen_app_resetCommunication+0x200>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 fa5a 	bl	8007404 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8006f50:	4b74      	ldr	r3, [pc, #464]	; (8007124 <canopen_app_resetCommunication+0x200>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a74      	ldr	r2, [pc, #464]	; (8007128 <canopen_app_resetCommunication+0x204>)
 8006f56:	6811      	ldr	r1, [r2, #0]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff fc3f 	bl	80067de <CO_CANinit>
 8006f60:	4603      	mov	r3, r0
 8006f62:	461a      	mov	r2, r3
 8006f64:	4b71      	ldr	r3, [pc, #452]	; (800712c <canopen_app_resetCommunication+0x208>)
 8006f66:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006f68:	4b70      	ldr	r3, [pc, #448]	; (800712c <canopen_app_resetCommunication+0x208>)
 8006f6a:	f993 3000 	ldrsb.w	r3, [r3]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d008      	beq.n	8006f84 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8006f72:	4b6e      	ldr	r3, [pc, #440]	; (800712c <canopen_app_resetCommunication+0x208>)
 8006f74:	f993 3000 	ldrsb.w	r3, [r3]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	486d      	ldr	r0, [pc, #436]	; (8007130 <canopen_app_resetCommunication+0x20c>)
 8006f7c:	f00b fc8a 	bl	8012894 <iprintf>
        return 1;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e0c8      	b.n	8007116 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006f84:	4b6b      	ldr	r3, [pc, #428]	; (8007134 <canopen_app_resetCommunication+0x210>)
 8006f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f88:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8006f8a:	4b6a      	ldr	r3, [pc, #424]	; (8007134 <canopen_app_resetCommunication+0x210>)
 8006f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006f8e:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8006f90:	4b68      	ldr	r3, [pc, #416]	; (8007134 <canopen_app_resetCommunication+0x210>)
 8006f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006f94:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8006f96:	4b67      	ldr	r3, [pc, #412]	; (8007134 <canopen_app_resetCommunication+0x210>)
 8006f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006f9a:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8006f9c:	4b61      	ldr	r3, [pc, #388]	; (8007124 <canopen_app_resetCommunication+0x200>)
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	4b61      	ldr	r3, [pc, #388]	; (8007128 <canopen_app_resetCommunication+0x204>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	4b60      	ldr	r3, [pc, #384]	; (8007128 <canopen_app_resetCommunication+0x204>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3302      	adds	r3, #2
 8006fac:	f107 0108 	add.w	r1, r7, #8
 8006fb0:	f7ff fc41 	bl	8006836 <CO_LSSinit>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4b5c      	ldr	r3, [pc, #368]	; (800712c <canopen_app_resetCommunication+0x208>)
 8006fba:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006fbc:	4b5b      	ldr	r3, [pc, #364]	; (800712c <canopen_app_resetCommunication+0x208>)
 8006fbe:	f993 3000 	ldrsb.w	r3, [r3]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d008      	beq.n	8006fd8 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8006fc6:	4b59      	ldr	r3, [pc, #356]	; (800712c <canopen_app_resetCommunication+0x208>)
 8006fc8:	f993 3000 	ldrsb.w	r3, [r3]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	485a      	ldr	r0, [pc, #360]	; (8007138 <canopen_app_resetCommunication+0x214>)
 8006fd0:	f00b fc60 	bl	8012894 <iprintf>
        return 2;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e09e      	b.n	8007116 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8006fd8:	4b53      	ldr	r3, [pc, #332]	; (8007128 <canopen_app_resetCommunication+0x204>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	4b52      	ldr	r3, [pc, #328]	; (8007128 <canopen_app_resetCommunication+0x204>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	7812      	ldrb	r2, [r2, #0]
 8006fe2:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006fe8:	4b4e      	ldr	r3, [pc, #312]	; (8007124 <canopen_app_resetCommunication+0x200>)
 8006fea:	6818      	ldr	r0, [r3, #0]
 8006fec:	4b53      	ldr	r3, [pc, #332]	; (800713c <canopen_app_resetCommunication+0x218>)
 8006fee:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8006ff0:	4b4d      	ldr	r3, [pc, #308]	; (8007128 <canopen_app_resetCommunication+0x204>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	1d3a      	adds	r2, r7, #4
 8006ff8:	9207      	str	r2, [sp, #28]
 8006ffa:	9306      	str	r3, [sp, #24]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9305      	str	r3, [sp, #20]
 8007000:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007004:	9304      	str	r3, [sp, #16]
 8007006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800700a:	9303      	str	r3, [sp, #12]
 800700c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007010:	9302      	str	r3, [sp, #8]
 8007012:	f242 1311 	movw	r3, #8465	; 0x2111
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	2300      	movs	r3, #0
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	460b      	mov	r3, r1
 800701e:	2200      	movs	r2, #0
 8007020:	2100      	movs	r1, #0
 8007022:	f7ff fc35 	bl	8006890 <CO_CANopenInit>
 8007026:	4603      	mov	r3, r0
 8007028:	461a      	mov	r2, r3
 800702a:	4b40      	ldr	r3, [pc, #256]	; (800712c <canopen_app_resetCommunication+0x208>)
 800702c:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 800702e:	4b3f      	ldr	r3, [pc, #252]	; (800712c <canopen_app_resetCommunication+0x208>)
 8007030:	f993 3000 	ldrsb.w	r3, [r3]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01a      	beq.n	800706e <canopen_app_resetCommunication+0x14a>
 8007038:	4b3c      	ldr	r3, [pc, #240]	; (800712c <canopen_app_resetCommunication+0x208>)
 800703a:	f993 3000 	ldrsb.w	r3, [r3]
 800703e:	f113 0f13 	cmn.w	r3, #19
 8007042:	d014      	beq.n	800706e <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8007044:	4b39      	ldr	r3, [pc, #228]	; (800712c <canopen_app_resetCommunication+0x208>)
 8007046:	f993 3000 	ldrsb.w	r3, [r3]
 800704a:	f113 0f0c 	cmn.w	r3, #12
 800704e:	d105      	bne.n	800705c <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4619      	mov	r1, r3
 8007054:	483a      	ldr	r0, [pc, #232]	; (8007140 <canopen_app_resetCommunication+0x21c>)
 8007056:	f00b fc1d 	bl	8012894 <iprintf>
 800705a:	e006      	b.n	800706a <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 800705c:	4b33      	ldr	r3, [pc, #204]	; (800712c <canopen_app_resetCommunication+0x208>)
 800705e:	f993 3000 	ldrsb.w	r3, [r3]
 8007062:	4619      	mov	r1, r3
 8007064:	4837      	ldr	r0, [pc, #220]	; (8007144 <canopen_app_resetCommunication+0x220>)
 8007066:	f00b fc15 	bl	8012894 <iprintf>
        }
        return 3;
 800706a:	2303      	movs	r3, #3
 800706c:	e053      	b.n	8007116 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 800706e:	4b2d      	ldr	r3, [pc, #180]	; (8007124 <canopen_app_resetCommunication+0x200>)
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	4b2c      	ldr	r3, [pc, #176]	; (8007124 <canopen_app_resetCommunication+0x200>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69d9      	ldr	r1, [r3, #28]
 8007078:	4b30      	ldr	r3, [pc, #192]	; (800713c <canopen_app_resetCommunication+0x218>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b2a      	ldr	r3, [pc, #168]	; (8007128 <canopen_app_resetCommunication+0x204>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	785c      	ldrb	r4, [r3, #1]
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	4623      	mov	r3, r4
 8007088:	f7ff fd4a 	bl	8006b20 <CO_CANopenInitPDO>
 800708c:	4603      	mov	r3, r0
 800708e:	461a      	mov	r2, r3
 8007090:	4b26      	ldr	r3, [pc, #152]	; (800712c <canopen_app_resetCommunication+0x208>)
 8007092:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8007094:	4b25      	ldr	r3, [pc, #148]	; (800712c <canopen_app_resetCommunication+0x208>)
 8007096:	f993 3000 	ldrsb.w	r3, [r3]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d014      	beq.n	80070c8 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 800709e:	4b23      	ldr	r3, [pc, #140]	; (800712c <canopen_app_resetCommunication+0x208>)
 80070a0:	f993 3000 	ldrsb.w	r3, [r3]
 80070a4:	f113 0f0c 	cmn.w	r3, #12
 80070a8:	d105      	bne.n	80070b6 <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4619      	mov	r1, r3
 80070ae:	4824      	ldr	r0, [pc, #144]	; (8007140 <canopen_app_resetCommunication+0x21c>)
 80070b0:	f00b fbf0 	bl	8012894 <iprintf>
 80070b4:	e006      	b.n	80070c4 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 80070b6:	4b1d      	ldr	r3, [pc, #116]	; (800712c <canopen_app_resetCommunication+0x208>)
 80070b8:	f993 3000 	ldrsb.w	r3, [r3]
 80070bc:	4619      	mov	r1, r3
 80070be:	4822      	ldr	r0, [pc, #136]	; (8007148 <canopen_app_resetCommunication+0x224>)
 80070c0:	f00b fbe8 	bl	8012894 <iprintf>
        }
        return 4;
 80070c4:	2304      	movs	r3, #4
 80070c6:	e026      	b.n	8007116 <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 80070c8:	4b17      	ldr	r3, [pc, #92]	; (8007128 <canopen_app_resetCommunication+0x204>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f005 f8a2 	bl	800c218 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 80070d4:	4b13      	ldr	r3, [pc, #76]	; (8007124 <canopen_app_resetCommunication+0x200>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 80070de:	481b      	ldr	r0, [pc, #108]	; (800714c <canopen_app_resetCommunication+0x228>)
 80070e0:	f00b fc5e 	bl	80129a0 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 80070e4:	4b0f      	ldr	r3, [pc, #60]	; (8007124 <canopen_app_resetCommunication+0x200>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f8aa 	bl	8007244 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 80070f0:	4817      	ldr	r0, [pc, #92]	; (8007150 <canopen_app_resetCommunication+0x22c>)
 80070f2:	f00b fc55 	bl	80129a0 <puts>
    fflush(stdout);
 80070f6:	4b17      	ldr	r3, [pc, #92]	; (8007154 <canopen_app_resetCommunication+0x230>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f00a fae9 	bl	80116d4 <fflush>
    time_old = time_current = HAL_GetTick();
 8007102:	f001 fd0f 	bl	8008b24 <HAL_GetTick>
 8007106:	4603      	mov	r3, r0
 8007108:	4a13      	ldr	r2, [pc, #76]	; (8007158 <canopen_app_resetCommunication+0x234>)
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	4b12      	ldr	r3, [pc, #72]	; (8007158 <canopen_app_resetCommunication+0x234>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a12      	ldr	r2, [pc, #72]	; (800715c <canopen_app_resetCommunication+0x238>)
 8007112:	6013      	str	r3, [r2, #0]
    return 0;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	bd90      	pop	{r4, r7, pc}
 800711e:	bf00      	nop
 8007120:	080165a0 	.word	0x080165a0
 8007124:	200006c8 	.word	0x200006c8
 8007128:	200006c4 	.word	0x200006c4
 800712c:	200006d4 	.word	0x200006d4
 8007130:	080165c8 	.word	0x080165c8
 8007134:	20000000 	.word	0x20000000
 8007138:	080165f0 	.word	0x080165f0
 800713c:	200003cc 	.word	0x200003cc
 8007140:	0801661c 	.word	0x0801661c
 8007144:	08016644 	.word	0x08016644
 8007148:	08016670 	.word	0x08016670
 800714c:	08016698 	.word	0x08016698
 8007150:	080166c0 	.word	0x080166c0
 8007154:	200004d0 	.word	0x200004d0
 8007158:	200006d0 	.word	0x200006d0
 800715c:	200006cc 	.word	0x200006cc

08007160 <canopen_app_process>:

void
canopen_app_process() {
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8007166:	f001 fcdd 	bl	8008b24 <HAL_GetTick>
 800716a:	4603      	mov	r3, r0
 800716c:	4a27      	ldr	r2, [pc, #156]	; (800720c <canopen_app_process+0xac>)
 800716e:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8007170:	4b26      	ldr	r3, [pc, #152]	; (800720c <canopen_app_process+0xac>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	4b26      	ldr	r3, [pc, #152]	; (8007210 <canopen_app_process+0xb0>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d043      	beq.n	8007204 <canopen_app_process+0xa4>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 800717c:	4b23      	ldr	r3, [pc, #140]	; (800720c <canopen_app_process+0xac>)
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	4b23      	ldr	r3, [pc, #140]	; (8007210 <canopen_app_process+0xb0>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800718a:	fb02 f303 	mul.w	r3, r2, r3
 800718e:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8007190:	4b1e      	ldr	r3, [pc, #120]	; (800720c <canopen_app_process+0xac>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a1e      	ldr	r2, [pc, #120]	; (8007210 <canopen_app_process+0xb0>)
 8007196:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8007198:	4b1e      	ldr	r3, [pc, #120]	; (8007214 <canopen_app_process+0xb4>)
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	2300      	movs	r3, #0
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	2100      	movs	r1, #0
 80071a2:	f7ff fd95 	bl	8006cd0 <CO_process>
 80071a6:	4603      	mov	r3, r0
 80071a8:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 80071aa:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <canopen_app_process+0xb4>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	7a5a      	ldrb	r2, [r3, #9]
 80071b2:	4b19      	ldr	r3, [pc, #100]	; (8007218 <canopen_app_process+0xb8>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	09d2      	lsrs	r2, r2, #7
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 80071bc:	4b15      	ldr	r3, [pc, #84]	; (8007214 <canopen_app_process+0xb4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	7a9a      	ldrb	r2, [r3, #10]
 80071c4:	4b14      	ldr	r3, [pc, #80]	; (8007218 <canopen_app_process+0xb8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	09d2      	lsrs	r2, r2, #7
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d10f      	bne.n	80071f4 <canopen_app_process+0x94>
            /* delete objects from memory */
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80071d4:	4b10      	ldr	r3, [pc, #64]	; (8007218 <canopen_app_process+0xb8>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 f823 	bl	8007224 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 80071de:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <canopen_app_process+0xb4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff fa9c 	bl	8006720 <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 80071e8:	480c      	ldr	r0, [pc, #48]	; (800721c <canopen_app_process+0xbc>)
 80071ea:	f00b fbd9 	bl	80129a0 <puts>
            canopen_app_resetCommunication(); // Reset Communication routine
 80071ee:	f7ff fe99 	bl	8006f24 <canopen_app_resetCommunication>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 80071f2:	e007      	b.n	8007204 <canopen_app_process+0xa4>
        } else if (reset_status == CO_RESET_APP) {
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d104      	bne.n	8007204 <canopen_app_process+0xa4>
            log_printf("CANopenNode Device Reset\n");
 80071fa:	4809      	ldr	r0, [pc, #36]	; (8007220 <canopen_app_process+0xc0>)
 80071fc:	f00b fbd0 	bl	80129a0 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8007200:	f002 fd47 	bl	8009c92 <HAL_NVIC_SystemReset>
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	200006d0 	.word	0x200006d0
 8007210:	200006cc 	.word	0x200006cc
 8007214:	200006c8 	.word	0x200006c8
 8007218:	200006c4 	.word	0x200006c4
 800721c:	080166dc 	.word	0x080166dc
 8007220:	08016704 	.word	0x08016704

08007224 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	4618      	mov	r0, r3
 8007238:	f002 fa90 	bl	800975c <HAL_CAN_Stop>
#endif
    }
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00b      	beq.n	800726c <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	4618      	mov	r0, r3
 800725c:	f002 fa3a 	bl	80096d4 <HAL_CAN_Start>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d102      	bne.n	800726c <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	615a      	str	r2, [r3, #20]
        }
    }
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8007274:	b580      	push	{r7, lr}
 8007276:	b090      	sub	sp, #64	; 0x40
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <CO_CANmodule_init+0x20>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <CO_CANmodule_init+0x20>
 800728e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007294:	f04f 33ff 	mov.w	r3, #4294967295
 8007298:	e0ab      	b.n	80073f2 <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 80072a0:	4a56      	ldr	r2, [pc, #344]	; (80073fc <CO_CANmodule_init+0x188>)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	887a      	ldrh	r2, [r7, #2]
 80072b0:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072b6:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80072be:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 80072ea:	2300      	movs	r3, #0
 80072ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80072ee:	e02b      	b.n	8007348 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 80072f0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80072f2:	4613      	mov	r3, r2
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	461a      	mov	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4413      	add	r3, r2
 8007300:	2200      	movs	r2, #0
 8007302:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8007304:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007306:	4613      	mov	r3, r2
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	461a      	mov	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4413      	add	r3, r2
 8007314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007318:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 800731a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800731c:	4613      	mov	r3, r2
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	461a      	mov	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4413      	add	r3, r2
 800732a:	2200      	movs	r2, #0
 800732c:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 800732e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007330:	4613      	mov	r3, r2
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	461a      	mov	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	2200      	movs	r2, #0
 8007340:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007342:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007344:	3301      	adds	r3, #1
 8007346:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007348:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800734a:	887b      	ldrh	r3, [r7, #2]
 800734c:	429a      	cmp	r2, r3
 800734e:	d3cf      	bcc.n	80072f0 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8007350:	2300      	movs	r3, #0
 8007352:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007354:	e00c      	b.n	8007370 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 8007356:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007358:	4613      	mov	r3, r2
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	4413      	add	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	461a      	mov	r2, r3
 8007362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007364:	4413      	add	r3, r2
 8007366:	2200      	movs	r2, #0
 8007368:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 800736a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800736c:	3301      	adds	r3, #1
 800736e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007370:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007372:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007376:	429a      	cmp	r2, r3
 8007378:	d3ed      	bcc.n	8007356 <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1d      	ldr	r2, [pc, #116]	; (8007400 <CO_CANmodule_init+0x18c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d102      	bne.n	8007394 <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	62bb      	str	r3, [r7, #40]	; 0x28
 8007392:	e001      	b.n	8007398 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 8007394:	230e      	movs	r3, #14
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007398:	2300      	movs	r3, #0
 800739a:	62fb      	str	r3, [r7, #44]	; 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800739c:	2301      	movs	r3, #1
 800739e:	633b      	str	r3, [r7, #48]	; 0x30
    FilterConfig.FilterIdHigh = 0x0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 80073ac:	2300      	movs	r3, #0
 80073ae:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24

    FilterConfig.FilterActivation = ENABLE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	637b      	str	r3, [r7, #52]	; 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 80073b8:	230e      	movs	r3, #14
 80073ba:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f107 0214 	add.w	r2, r7, #20
 80073c4:	4611      	mov	r1, r2
 80073c6:	4618      	mov	r0, r3
 80073c8:	f002 f8a4 	bl	8009514 <HAL_CAN_ConfigFilter>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80073d2:	f04f 33ff 	mov.w	r3, #4294967295
 80073d6:	e00c      	b.n	80073f2 <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	2113      	movs	r1, #19
 80073de:	4618      	mov	r0, r3
 80073e0:	f002 fb15 	bl	8009a0e <HAL_CAN_ActivateNotification>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80073ea:	f04f 33ff 	mov.w	r3, #4294967295
 80073ee:	e000      	b.n	80073f2 <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3740      	adds	r7, #64	; 0x40
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	200006d8 	.word	0x200006d8
 8007400:	40006400 	.word	0x40006400

08007404 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d009      	beq.n	8007426 <CO_CANmodule_disable+0x22>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	4618      	mov	r0, r3
 8007422:	f002 f99b 	bl	800975c <HAL_CAN_Stop>
#endif
    }
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	4608      	mov	r0, r1
 800743a:	4611      	mov	r1, r2
 800743c:	461a      	mov	r2, r3
 800743e:	4603      	mov	r3, r0
 8007440:	817b      	strh	r3, [r7, #10]
 8007442:	460b      	mov	r3, r1
 8007444:	813b      	strh	r3, [r7, #8]
 8007446:	4613      	mov	r3, r2
 8007448:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800744a:	2300      	movs	r3, #0
 800744c:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d03c      	beq.n	80074ce <CO_CANrxBufferInit+0x9e>
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	2b00      	cmp	r3, #0
 8007458:	d039      	beq.n	80074ce <CO_CANrxBufferInit+0x9e>
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	2b00      	cmp	r3, #0
 800745e:	d036      	beq.n	80074ce <CO_CANrxBufferInit+0x9e>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	891b      	ldrh	r3, [r3, #8]
 8007464:	897a      	ldrh	r2, [r7, #10]
 8007466:	429a      	cmp	r2, r3
 8007468:	d231      	bcs.n	80074ce <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6859      	ldr	r1, [r3, #4]
 800746e:	897a      	ldrh	r2, [r7, #10]
 8007470:	4613      	mov	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	440b      	add	r3, r1
 800747a:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007480:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007486:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8007488:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800748c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007490:	b21b      	sxth	r3, r3
 8007492:	6a3a      	ldr	r2, [r7, #32]
 8007494:	2a00      	cmp	r2, #0
 8007496:	d001      	beq.n	800749c <CO_CANrxBufferInit+0x6c>
 8007498:	4a13      	ldr	r2, [pc, #76]	; (80074e8 <CO_CANrxBufferInit+0xb8>)
 800749a:	e000      	b.n	800749e <CO_CANrxBufferInit+0x6e>
 800749c:	2200      	movs	r2, #0
 800749e:	4313      	orrs	r3, r2
 80074a0:	b21b      	sxth	r3, r3
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 80074a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074b0:	b21b      	sxth	r3, r3
 80074b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ba:	b21b      	sxth	r3, r3
 80074bc:	b29a      	uxth	r2, r3
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <CO_CANrxBufferInit+0xa4>
            __NOP();
 80074ca:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80074cc:	e002      	b.n	80074d4 <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80074ce:	23ff      	movs	r3, #255	; 0xff
 80074d0:	75fb      	strb	r3, [r7, #23]
 80074d2:	e000      	b.n	80074d6 <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80074d4:	bf00      	nop
    }

    return ret;
 80074d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	ffff8000 	.word	0xffff8000

080074ec <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	607b      	str	r3, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	817b      	strh	r3, [r7, #10]
 80074fa:	4613      	mov	r3, r2
 80074fc:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d024      	beq.n	8007552 <CO_CANtxBufferInit+0x66>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8a1b      	ldrh	r3, [r3, #16]
 800750c:	897a      	ldrh	r2, [r7, #10]
 800750e:	429a      	cmp	r2, r3
 8007510:	d21f      	bcs.n	8007552 <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	68d9      	ldr	r1, [r3, #12]
 8007516:	897a      	ldrh	r2, [r7, #10]
 8007518:	4613      	mov	r3, r2
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	4413      	add	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	440b      	add	r3, r1
 8007522:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8007524:	893b      	ldrh	r3, [r7, #8]
 8007526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	2a00      	cmp	r2, #0
 800752e:	d002      	beq.n	8007536 <CO_CANtxBufferInit+0x4a>
 8007530:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007534:	e000      	b.n	8007538 <CO_CANtxBufferInit+0x4c>
 8007536:	2200      	movs	r2, #0
 8007538:	431a      	orrs	r2, r3
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007544:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2200      	movs	r2, #0
 800754a:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007550:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8007552:	697b      	ldr	r3, [r7, #20]
}
 8007554:	4618      	mov	r0, r3
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	4618      	mov	r0, r3
 8007576:	f002 fa15 	bl	80099a4 <HAL_CAN_GetTxMailboxesFreeLevel>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d028      	beq.n	80075d2 <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8007580:	4b16      	ldr	r3, [pc, #88]	; (80075dc <prv_send_can_message+0x7c>)
 8007582:	2200      	movs	r2, #0
 8007584:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8007586:	4b15      	ldr	r3, [pc, #84]	; (80075dc <prv_send_can_message+0x7c>)
 8007588:	2200      	movs	r2, #0
 800758a:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	791b      	ldrb	r3, [r3, #4]
 8007590:	461a      	mov	r2, r3
 8007592:	4b12      	ldr	r3, [pc, #72]	; (80075dc <prv_send_can_message+0x7c>)
 8007594:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800759e:	4a0f      	ldr	r2, [pc, #60]	; (80075dc <prv_send_can_message+0x7c>)
 80075a0:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	0b9b      	lsrs	r3, r3, #14
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	4a0b      	ldr	r2, [pc, #44]	; (80075dc <prv_send_can_message+0x7c>)
 80075ae:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6898      	ldr	r0, [r3, #8]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	1d5a      	adds	r2, r3, #5
 80075ba:	f107 0308 	add.w	r3, r7, #8
 80075be:	4907      	ldr	r1, [pc, #28]	; (80075dc <prv_send_can_message+0x7c>)
 80075c0:	f002 f915 	bl	80097ee <HAL_CAN_AddTxMessage>
 80075c4:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bf0c      	ite	eq
 80075ca:	2301      	moveq	r3, #1
 80075cc:	2300      	movne	r3, #0
 80075ce:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 80075d0:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	200006dc 	.word	0x200006dc

080075e0 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 80075ea:	2300      	movs	r3, #0
 80075ec:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00c      	beq.n	8007610 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8a5b      	ldrh	r3, [r3, #18]
 8007602:	f043 0308 	orr.w	r3, r3, #8
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 800760c:	23f7      	movs	r3, #247	; 0xf7
 800760e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007610:	f3ef 8310 	mrs	r3, PRIMASK
 8007614:	613b      	str	r3, [r7, #16]
  return(result);
 8007616:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800761c:	b672      	cpsid	i
}
 800761e:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff ff9c 	bl	8007560 <prv_send_can_message>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	61da      	str	r2, [r3, #28]
 8007636:	e009      	b.n	800764c <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2201      	movs	r2, #1
 800763c:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007642:	b29b      	uxth	r3, r3
 8007644:	3301      	adds	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f383 8810 	msr	PRIMASK, r3
}
 8007658:	bf00      	nop

    return err;
 800765a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f003 0307 	and.w	r3, r3, #7
 8007680:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	429a      	cmp	r2, r3
 800768a:	d02e      	beq.n	80076ea <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	8a5b      	ldrh	r3, [r3, #18]
 8007690:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & CAN_ESR_BOFF) {
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d004      	beq.n	80076ac <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 80076a2:	89fb      	ldrh	r3, [r7, #14]
 80076a4:	f043 0304 	orr.w	r3, r3, #4
 80076a8:	81fb      	strh	r3, [r7, #14]
 80076aa:	e01b      	b.n	80076e4 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 80076ac:	89fb      	ldrh	r3, [r7, #14]
 80076ae:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 80076b2:	f023 0303 	bic.w	r3, r3, #3
 80076b6:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 80076c2:	89fb      	ldrh	r3, [r7, #14]
 80076c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c8:	f043 0301 	orr.w	r3, r3, #1
 80076cc:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 80076d8:	89fb      	ldrh	r3, [r7, #14]
 80076da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076de:	f043 0302 	orr.w	r3, r3, #2
 80076e2:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	89fa      	ldrh	r2, [r7, #14]
 80076e8:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 80076ea:	bf00      	nop
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <usb_printf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int usb_printf(const char* format, ...) {
 80076f6:	b40f      	push	{r0, r1, r2, r3}
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b0c2      	sub	sp, #264	; 0x108
 80076fc:	af00      	add	r7, sp, #0
    char buf[256]; // Adjust the buffer size if needed
    va_list args;
    va_start(args, format);
 80076fe:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8007702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770a:	601a      	str	r2, [r3, #0]
    int ret = vsnprintf(buf, sizeof(buf), format, args);
 800770c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007714:	1d38      	adds	r0, r7, #4
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800771c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007720:	f00c f89a 	bl	8013858 <vsniprintf>
 8007724:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    va_end(args);

    if (ret > 0) {
 8007728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800772c:	2b00      	cmp	r3, #0
 800772e:	dd07      	ble.n	8007740 <usb_printf+0x4a>
        CDC_Transmit_FS((uint8_t*)buf, ret);
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007734:	b29a      	uxth	r2, r3
 8007736:	1d3b      	adds	r3, r7, #4
 8007738:	4611      	mov	r1, r2
 800773a:	4618      	mov	r0, r3
 800773c:	f009 fa90 	bl	8010c60 <CDC_Transmit_FS>
    }

    return ret;
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8007744:	4618      	mov	r0, r3
 8007746:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800774a:	46bd      	mov	sp, r7
 800774c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007750:	b004      	add	sp, #16
 8007752:	4770      	bx	lr

08007754 <setLEDOnTIM8>:

/**
 * @param channel the color to set - PWM_R,PWM_G,PWM_B
 * @param duty [0...100]
 */
void setLEDOnTIM8(uint32_t channel,int duty) {
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, channel, duty);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <setLEDOnTIM8+0x1a>
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <setLEDOnTIM8+0x50>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800776c:	e013      	b.n	8007796 <setLEDOnTIM8+0x42>
	__HAL_TIM_SET_COMPARE(&htim8, channel, duty);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b04      	cmp	r3, #4
 8007772:	d104      	bne.n	800777e <setLEDOnTIM8+0x2a>
 8007774:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <setLEDOnTIM8+0x50>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800777c:	e00b      	b.n	8007796 <setLEDOnTIM8+0x42>
	__HAL_TIM_SET_COMPARE(&htim8, channel, duty);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b08      	cmp	r3, #8
 8007782:	d104      	bne.n	800778e <setLEDOnTIM8+0x3a>
 8007784:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <setLEDOnTIM8+0x50>)
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800778c:	e003      	b.n	8007796 <setLEDOnTIM8+0x42>
	__HAL_TIM_SET_COMPARE(&htim8, channel, duty);
 800778e:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <setLEDOnTIM8+0x50>)
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	6413      	str	r3, [r2, #64]	; 0x40
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000864 	.word	0x20000864

080077a8 <setRGBLEDOnTIM8>:
/**
 * @param r 0...100
 * @param g 0...100
 * @param b 0...100
 */
void setRGBLEDOnTIM8(int r,int g,int b) {
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
	setLEDOnTIM8(PWM_R,r);
 80077b4:	68f9      	ldr	r1, [r7, #12]
 80077b6:	2008      	movs	r0, #8
 80077b8:	f7ff ffcc 	bl	8007754 <setLEDOnTIM8>
	setLEDOnTIM8(PWM_G,g);
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	2004      	movs	r0, #4
 80077c0:	f7ff ffc8 	bl	8007754 <setLEDOnTIM8>
	setLEDOnTIM8(PWM_B,b);
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	200c      	movs	r0, #12
 80077c8:	f7ff ffc4 	bl	8007754 <setLEDOnTIM8>
}
 80077cc:	bf00      	nop
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <LEDSetColor>:
/**
 * @param r 0...255
 * @param g 0...255
 * @param b 0...255
 */
void LEDSetColor(int r,int g,int b) {
 80077d4:	b5b0      	push	{r4, r5, r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
#define RGBTOLED (100.0/255.0)
  setRGBLEDOnTIM8(
		  r*RGBTOLED,
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7f8 fe9f 	bl	8000524 <__aeabi_i2d>
 80077e6:	f04f 3219 	mov.w	r2, #421075225	; 0x19191919
 80077ea:	4b18      	ldr	r3, [pc, #96]	; (800784c <LEDSetColor+0x78>)
 80077ec:	f7f8 ff04 	bl	80005f8 <__aeabi_dmul>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
  setRGBLEDOnTIM8(
 80077f4:	4610      	mov	r0, r2
 80077f6:	4619      	mov	r1, r3
 80077f8:	f7f9 f9ae 	bl	8000b58 <__aeabi_d2iz>
 80077fc:	4604      	mov	r4, r0
		  g*RGBTOLED,
 80077fe:	68b8      	ldr	r0, [r7, #8]
 8007800:	f7f8 fe90 	bl	8000524 <__aeabi_i2d>
 8007804:	f04f 3219 	mov.w	r2, #421075225	; 0x19191919
 8007808:	4b10      	ldr	r3, [pc, #64]	; (800784c <LEDSetColor+0x78>)
 800780a:	f7f8 fef5 	bl	80005f8 <__aeabi_dmul>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
  setRGBLEDOnTIM8(
 8007812:	4610      	mov	r0, r2
 8007814:	4619      	mov	r1, r3
 8007816:	f7f9 f99f 	bl	8000b58 <__aeabi_d2iz>
 800781a:	4605      	mov	r5, r0
		  b*RGBTOLED);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7f8 fe81 	bl	8000524 <__aeabi_i2d>
 8007822:	f04f 3219 	mov.w	r2, #421075225	; 0x19191919
 8007826:	4b09      	ldr	r3, [pc, #36]	; (800784c <LEDSetColor+0x78>)
 8007828:	f7f8 fee6 	bl	80005f8 <__aeabi_dmul>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
  setRGBLEDOnTIM8(
 8007830:	4610      	mov	r0, r2
 8007832:	4619      	mov	r1, r3
 8007834:	f7f9 f990 	bl	8000b58 <__aeabi_d2iz>
 8007838:	4603      	mov	r3, r0
 800783a:	461a      	mov	r2, r3
 800783c:	4629      	mov	r1, r5
 800783e:	4620      	mov	r0, r4
 8007840:	f7ff ffb2 	bl	80077a8 <setRGBLEDOnTIM8>
}
 8007844:	bf00      	nop
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bdb0      	pop	{r4, r5, r7, pc}
 800784c:	3fd91919 	.word	0x3fd91919

08007850 <wheel>:


// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
void wheel(uint8_t WheelPos) {
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	4603      	mov	r3, r0
 8007858:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	2b54      	cmp	r3, #84	; 0x54
 800785e:	d80e      	bhi.n	800787e <wheel+0x2e>
	LEDSetColor(255 - WheelPos * 3,0,WheelPos * 3);
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	461a      	mov	r2, r3
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	f103 00ff 	add.w	r0, r3, #255	; 0xff
 800786c:	79fa      	ldrb	r2, [r7, #7]
 800786e:	4613      	mov	r3, r2
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	4413      	add	r3, r2
 8007874:	461a      	mov	r2, r3
 8007876:	2100      	movs	r1, #0
 8007878:	f7ff ffac 	bl	80077d4 <LEDSetColor>
    LEDSetColor(0,WheelPos * 3,255 - WheelPos * 3);
  } else {
    WheelPos -= 170;
    LEDSetColor(WheelPos * 3,255 - WheelPos * 3,0);
  }
}
 800787c:	e023      	b.n	80078c6 <wheel+0x76>
  } else if(WheelPos < 170) {
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	2ba9      	cmp	r3, #169	; 0xa9
 8007882:	d810      	bhi.n	80078a6 <wheel+0x56>
    WheelPos -= 85;
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	3b55      	subs	r3, #85	; 0x55
 8007888:	71fb      	strb	r3, [r7, #7]
    LEDSetColor(0,WheelPos * 3,255 - WheelPos * 3);
 800788a:	79fa      	ldrb	r2, [r7, #7]
 800788c:	4613      	mov	r3, r2
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	1899      	adds	r1, r3, r2
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	461a      	mov	r2, r3
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	33ff      	adds	r3, #255	; 0xff
 800789c:	461a      	mov	r2, r3
 800789e:	2000      	movs	r0, #0
 80078a0:	f7ff ff98 	bl	80077d4 <LEDSetColor>
}
 80078a4:	e00f      	b.n	80078c6 <wheel+0x76>
    WheelPos -= 170;
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	3356      	adds	r3, #86	; 0x56
 80078aa:	71fb      	strb	r3, [r7, #7]
    LEDSetColor(WheelPos * 3,255 - WheelPos * 3,0);
 80078ac:	79fa      	ldrb	r2, [r7, #7]
 80078ae:	4613      	mov	r3, r2
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	1898      	adds	r0, r3, r2
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	461a      	mov	r2, r3
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	33ff      	adds	r3, #255	; 0xff
 80078be:	2200      	movs	r2, #0
 80078c0:	4619      	mov	r1, r3
 80078c2:	f7ff ff87 	bl	80077d4 <LEDSetColor>
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <blinkPWM>:

void blinkPWM(TIM_HandleTypeDef *htim, uint32_t channel, int numBlinks, int delayMs) {
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b086      	sub	sp, #24
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	607a      	str	r2, [r7, #4]
 80078da:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < numBlinks; i++) {
 80078dc:	2300      	movs	r3, #0
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	e042      	b.n	8007968 <blinkPWM+0x9a>
	__HAL_TIM_SET_COMPARE(htim, channel, 100); // Set PWM duty cycle to 100%
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d104      	bne.n	80078f2 <blinkPWM+0x24>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2264      	movs	r2, #100	; 0x64
 80078ee:	635a      	str	r2, [r3, #52]	; 0x34
 80078f0:	e013      	b.n	800791a <blinkPWM+0x4c>
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	d104      	bne.n	8007902 <blinkPWM+0x34>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	2364      	movs	r3, #100	; 0x64
 80078fe:	6393      	str	r3, [r2, #56]	; 0x38
 8007900:	e00b      	b.n	800791a <blinkPWM+0x4c>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b08      	cmp	r3, #8
 8007906:	d104      	bne.n	8007912 <blinkPWM+0x44>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	2364      	movs	r3, #100	; 0x64
 800790e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007910:	e003      	b.n	800791a <blinkPWM+0x4c>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	2364      	movs	r3, #100	; 0x64
 8007918:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_Delay(delayMs);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	4618      	mov	r0, r3
 800791e:	f001 f90d 	bl	8008b3c <HAL_Delay>
	__HAL_TIM_SET_COMPARE(htim, channel, 0); // Set PWM duty cycle to 0%
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <blinkPWM+0x64>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2200      	movs	r2, #0
 800792e:	635a      	str	r2, [r3, #52]	; 0x34
 8007930:	e013      	b.n	800795a <blinkPWM+0x8c>
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b04      	cmp	r3, #4
 8007936:	d104      	bne.n	8007942 <blinkPWM+0x74>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	2300      	movs	r3, #0
 800793e:	6393      	str	r3, [r2, #56]	; 0x38
 8007940:	e00b      	b.n	800795a <blinkPWM+0x8c>
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b08      	cmp	r3, #8
 8007946:	d104      	bne.n	8007952 <blinkPWM+0x84>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	2300      	movs	r3, #0
 800794e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007950:	e003      	b.n	800795a <blinkPWM+0x8c>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	2300      	movs	r3, #0
 8007958:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_Delay(delayMs);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f8ed 	bl	8008b3c <HAL_Delay>
  for (int i = 0; i < numBlinks; i++) {
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	3301      	adds	r3, #1
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	429a      	cmp	r2, r3
 800796e:	dbb8      	blt.n	80078e2 <blinkPWM+0x14>
  }
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <LEDSetup>:

void LEDSetup() {
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
  // Assuming TIM8 has already been initialized in your project using MX_TIM8_Init() function
  HAL_TIM_PWM_Start(&htim8, PWM_R);
 8007980:	2108      	movs	r1, #8
 8007982:	480f      	ldr	r0, [pc, #60]	; (80079c0 <LEDSetup+0x44>)
 8007984:	f004 fd08 	bl	800c398 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, PWM_G);
 8007988:	2104      	movs	r1, #4
 800798a:	480d      	ldr	r0, [pc, #52]	; (80079c0 <LEDSetup+0x44>)
 800798c:	f004 fd04 	bl	800c398 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, PWM_B);
 8007990:	210c      	movs	r1, #12
 8007992:	480b      	ldr	r0, [pc, #44]	; (80079c0 <LEDSetup+0x44>)
 8007994:	f004 fd00 	bl	800c398 <HAL_TIM_PWM_Start>

  // Blink the RGB_R LED three times with 100ms duration each
  blinkPWM(&htim8, PWM_R, 3, 100);
 8007998:	2364      	movs	r3, #100	; 0x64
 800799a:	2203      	movs	r2, #3
 800799c:	2108      	movs	r1, #8
 800799e:	4808      	ldr	r0, [pc, #32]	; (80079c0 <LEDSetup+0x44>)
 80079a0:	f7ff ff95 	bl	80078ce <blinkPWM>
  blinkPWM(&htim8, PWM_G, 3, 100);
 80079a4:	2364      	movs	r3, #100	; 0x64
 80079a6:	2203      	movs	r2, #3
 80079a8:	2104      	movs	r1, #4
 80079aa:	4805      	ldr	r0, [pc, #20]	; (80079c0 <LEDSetup+0x44>)
 80079ac:	f7ff ff8f 	bl	80078ce <blinkPWM>
  blinkPWM(&htim8, PWM_B, 3, 100);
 80079b0:	2364      	movs	r3, #100	; 0x64
 80079b2:	2203      	movs	r2, #3
 80079b4:	210c      	movs	r1, #12
 80079b6:	4802      	ldr	r0, [pc, #8]	; (80079c0 <LEDSetup+0x44>)
 80079b8:	f7ff ff89 	bl	80078ce <blinkPWM>
}
 80079bc:	bf00      	nop
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000864 	.word	0x20000864

080079c4 <readCanAddress>:

uint8_t readCanAddress() {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
  GPIO_PinState pinState0 = HAL_GPIO_ReadPin(CAN_ADDR0_GPIO_Port,CAN_ADDR0_Pin);
 80079ca:	2101      	movs	r1, #1
 80079cc:	482b      	ldr	r0, [pc, #172]	; (8007a7c <readCanAddress+0xb8>)
 80079ce:	f002 fb0d 	bl	8009fec <HAL_GPIO_ReadPin>
 80079d2:	4603      	mov	r3, r0
 80079d4:	71fb      	strb	r3, [r7, #7]
  GPIO_PinState pinState1 = HAL_GPIO_ReadPin(CAN_ADDR1_GPIO_Port,CAN_ADDR1_Pin);
 80079d6:	2102      	movs	r1, #2
 80079d8:	4828      	ldr	r0, [pc, #160]	; (8007a7c <readCanAddress+0xb8>)
 80079da:	f002 fb07 	bl	8009fec <HAL_GPIO_ReadPin>
 80079de:	4603      	mov	r3, r0
 80079e0:	71bb      	strb	r3, [r7, #6]
  GPIO_PinState pinState2 = HAL_GPIO_ReadPin(CAN_ADDR2_GPIO_Port,CAN_ADDR2_Pin);
 80079e2:	2104      	movs	r1, #4
 80079e4:	4825      	ldr	r0, [pc, #148]	; (8007a7c <readCanAddress+0xb8>)
 80079e6:	f002 fb01 	bl	8009fec <HAL_GPIO_ReadPin>
 80079ea:	4603      	mov	r3, r0
 80079ec:	717b      	strb	r3, [r7, #5]
  GPIO_PinState pinState3 = HAL_GPIO_ReadPin(CAN_ADDR3_GPIO_Port,CAN_ADDR3_Pin);
 80079ee:	2108      	movs	r1, #8
 80079f0:	4822      	ldr	r0, [pc, #136]	; (8007a7c <readCanAddress+0xb8>)
 80079f2:	f002 fafb 	bl	8009fec <HAL_GPIO_ReadPin>
 80079f6:	4603      	mov	r3, r0
 80079f8:	713b      	strb	r3, [r7, #4]
  GPIO_PinState pinState4 = HAL_GPIO_ReadPin(CAN_ADDR4_GPIO_Port,CAN_ADDR4_Pin);
 80079fa:	2110      	movs	r1, #16
 80079fc:	481f      	ldr	r0, [pc, #124]	; (8007a7c <readCanAddress+0xb8>)
 80079fe:	f002 faf5 	bl	8009fec <HAL_GPIO_ReadPin>
 8007a02:	4603      	mov	r3, r0
 8007a04:	70fb      	strb	r3, [r7, #3]
  GPIO_PinState pinState5 = HAL_GPIO_ReadPin(CAN_ADDR5_GPIO_Port,CAN_ADDR5_Pin);
 8007a06:	2120      	movs	r1, #32
 8007a08:	481c      	ldr	r0, [pc, #112]	; (8007a7c <readCanAddress+0xb8>)
 8007a0a:	f002 faef 	bl	8009fec <HAL_GPIO_ReadPin>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	70bb      	strb	r3, [r7, #2]

  return  ((pinState0==GPIO_PIN_SET)<<0) |
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	bf0c      	ite	eq
 8007a18:	2301      	moveq	r3, #1
 8007a1a:	2300      	movne	r3, #0
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	b25b      	sxtb	r3, r3
 8007a20:	79ba      	ldrb	r2, [r7, #6]
 8007a22:	2a01      	cmp	r2, #1
 8007a24:	d101      	bne.n	8007a2a <readCanAddress+0x66>
 8007a26:	2202      	movs	r2, #2
 8007a28:	e000      	b.n	8007a2c <readCanAddress+0x68>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	b25b      	sxtb	r3, r3
		  ((pinState1==GPIO_PIN_SET)<<1) |
 8007a30:	797a      	ldrb	r2, [r7, #5]
 8007a32:	2a01      	cmp	r2, #1
 8007a34:	d101      	bne.n	8007a3a <readCanAddress+0x76>
 8007a36:	2204      	movs	r2, #4
 8007a38:	e000      	b.n	8007a3c <readCanAddress+0x78>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	b25b      	sxtb	r3, r3
		  ((pinState2==GPIO_PIN_SET)<<2) |
 8007a40:	793a      	ldrb	r2, [r7, #4]
 8007a42:	2a01      	cmp	r2, #1
 8007a44:	d101      	bne.n	8007a4a <readCanAddress+0x86>
 8007a46:	2208      	movs	r2, #8
 8007a48:	e000      	b.n	8007a4c <readCanAddress+0x88>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	b25b      	sxtb	r3, r3
		  ((pinState3==GPIO_PIN_SET)<<3) |
 8007a50:	78fa      	ldrb	r2, [r7, #3]
 8007a52:	2a01      	cmp	r2, #1
 8007a54:	d101      	bne.n	8007a5a <readCanAddress+0x96>
 8007a56:	2210      	movs	r2, #16
 8007a58:	e000      	b.n	8007a5c <readCanAddress+0x98>
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	b25b      	sxtb	r3, r3
		  ((pinState4==GPIO_PIN_SET)<<4) |
 8007a60:	78ba      	ldrb	r2, [r7, #2]
 8007a62:	2a01      	cmp	r2, #1
 8007a64:	d101      	bne.n	8007a6a <readCanAddress+0xa6>
 8007a66:	2220      	movs	r2, #32
 8007a68:	e000      	b.n	8007a6c <readCanAddress+0xa8>
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	b25b      	sxtb	r3, r3
 8007a70:	b2db      	uxtb	r3, r3
		  ((pinState5==GPIO_PIN_SET)<<5);
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40020800 	.word	0x40020800

08007a80 <CANSetup>:

void CANSetup() {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
  canAddress = readCanAddress();
 8007a86:	f7ff ff9d 	bl	80079c4 <readCanAddress>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <CANSetup+0x38>)
 8007a90:	701a      	strb	r2, [r3, #0]
  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan1;
 8007a92:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <CANSetup+0x3c>)
 8007a94:	60bb      	str	r3, [r7, #8]
  canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 8007a96:	4b0a      	ldr	r3, [pc, #40]	; (8007ac0 <CANSetup+0x40>)
 8007a98:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.timerHandle = &htim8;
 8007a9a:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <CANSetup+0x44>)
 8007a9c:	607b      	str	r3, [r7, #4]
  canOpenNodeSTM32.desiredNodeID = canAddress;
 8007a9e:	4b06      	ldr	r3, [pc, #24]	; (8007ab8 <CANSetup+0x38>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	703b      	strb	r3, [r7, #0]
  canOpenNodeSTM32.baudrate = 125;
 8007aa4:	237d      	movs	r3, #125	; 0x7d
 8007aa6:	70bb      	strb	r3, [r7, #2]
  canopen_app_init(&canOpenNodeSTM32);
 8007aa8:	463b      	mov	r3, r7
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff fa06 	bl	8006ebc <canopen_app_init>
}
 8007ab0:	bf00      	nop
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	200003d0 	.word	0x200003d0
 8007abc:	2000073c 	.word	0x2000073c
 8007ac0:	08007efd 	.word	0x08007efd
 8007ac4:	20000864 	.word	0x20000864

08007ac8 <sensorRead>:

void sensorRead() {
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b092      	sub	sp, #72	; 0x48
 8007acc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007ace:	463b      	mov	r3, r7
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	605a      	str	r2, [r3, #4]
 8007ad6:	609a      	str	r2, [r3, #8]
 8007ad8:	60da      	str	r2, [r3, #12]
  sConfig.Rank = 1;
 8007ada:	2301      	movs	r3, #1
 8007adc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60bb      	str	r3, [r7, #8]

  // Read ADC values for adc_cos (ADC1_IN0)
  sConfig.Channel = ADC_CHANNEL_0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	603b      	str	r3, [r7, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4865      	ldr	r0, [pc, #404]	; (8007c80 <sensorRead+0x1b8>)
 8007aec:	f001 f9f8 	bl	8008ee0 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8007af0:	4863      	ldr	r0, [pc, #396]	; (8007c80 <sensorRead+0x1b8>)
 8007af2:	f001 f88b 	bl	8008c0c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10);
 8007af6:	210a      	movs	r1, #10
 8007af8:	4861      	ldr	r0, [pc, #388]	; (8007c80 <sensorRead+0x1b8>)
 8007afa:	f001 f959 	bl	8008db0 <HAL_ADC_PollForConversion>
  adc_cos = HAL_ADC_GetValue(&hadc1);
 8007afe:	4860      	ldr	r0, [pc, #384]	; (8007c80 <sensorRead+0x1b8>)
 8007b00:	f001 f9e1 	bl	8008ec6 <HAL_ADC_GetValue>
 8007b04:	4603      	mov	r3, r0
 8007b06:	4a5f      	ldr	r2, [pc, #380]	; (8007c84 <sensorRead+0x1bc>)
 8007b08:	6013      	str	r3, [r2, #0]

  // Read ADC values for adc_cosn (ADC1_IN1)
  sConfig.Channel = ADC_CHANNEL_1;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	603b      	str	r3, [r7, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8007b0e:	463b      	mov	r3, r7
 8007b10:	4619      	mov	r1, r3
 8007b12:	485b      	ldr	r0, [pc, #364]	; (8007c80 <sensorRead+0x1b8>)
 8007b14:	f001 f9e4 	bl	8008ee0 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8007b18:	4859      	ldr	r0, [pc, #356]	; (8007c80 <sensorRead+0x1b8>)
 8007b1a:	f001 f877 	bl	8008c0c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10);
 8007b1e:	210a      	movs	r1, #10
 8007b20:	4857      	ldr	r0, [pc, #348]	; (8007c80 <sensorRead+0x1b8>)
 8007b22:	f001 f945 	bl	8008db0 <HAL_ADC_PollForConversion>
  adc_cosn = HAL_ADC_GetValue(&hadc1);
 8007b26:	4856      	ldr	r0, [pc, #344]	; (8007c80 <sensorRead+0x1b8>)
 8007b28:	f001 f9cd 	bl	8008ec6 <HAL_ADC_GetValue>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	4a56      	ldr	r2, [pc, #344]	; (8007c88 <sensorRead+0x1c0>)
 8007b30:	6013      	str	r3, [r2, #0]

  // Read ADC values for adc_sin (ADC1_IN2)
  sConfig.Channel = ADC_CHANNEL_2;
 8007b32:	2302      	movs	r3, #2
 8007b34:	603b      	str	r3, [r7, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8007b36:	463b      	mov	r3, r7
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4851      	ldr	r0, [pc, #324]	; (8007c80 <sensorRead+0x1b8>)
 8007b3c:	f001 f9d0 	bl	8008ee0 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8007b40:	484f      	ldr	r0, [pc, #316]	; (8007c80 <sensorRead+0x1b8>)
 8007b42:	f001 f863 	bl	8008c0c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10);
 8007b46:	210a      	movs	r1, #10
 8007b48:	484d      	ldr	r0, [pc, #308]	; (8007c80 <sensorRead+0x1b8>)
 8007b4a:	f001 f931 	bl	8008db0 <HAL_ADC_PollForConversion>
  adc_sin = HAL_ADC_GetValue(&hadc1);
 8007b4e:	484c      	ldr	r0, [pc, #304]	; (8007c80 <sensorRead+0x1b8>)
 8007b50:	f001 f9b9 	bl	8008ec6 <HAL_ADC_GetValue>
 8007b54:	4603      	mov	r3, r0
 8007b56:	4a4d      	ldr	r2, [pc, #308]	; (8007c8c <sensorRead+0x1c4>)
 8007b58:	6013      	str	r3, [r2, #0]

  // Read ADC values for adc_sinn (ADC1_IN3)
  sConfig.Channel = ADC_CHANNEL_3;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	603b      	str	r3, [r7, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8007b5e:	463b      	mov	r3, r7
 8007b60:	4619      	mov	r1, r3
 8007b62:	4847      	ldr	r0, [pc, #284]	; (8007c80 <sensorRead+0x1b8>)
 8007b64:	f001 f9bc 	bl	8008ee0 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8007b68:	4845      	ldr	r0, [pc, #276]	; (8007c80 <sensorRead+0x1b8>)
 8007b6a:	f001 f84f 	bl	8008c0c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10);
 8007b6e:	210a      	movs	r1, #10
 8007b70:	4843      	ldr	r0, [pc, #268]	; (8007c80 <sensorRead+0x1b8>)
 8007b72:	f001 f91d 	bl	8008db0 <HAL_ADC_PollForConversion>
  adc_sinn = HAL_ADC_GetValue(&hadc1);
 8007b76:	4842      	ldr	r0, [pc, #264]	; (8007c80 <sensorRead+0x1b8>)
 8007b78:	f001 f9a5 	bl	8008ec6 <HAL_ADC_GetValue>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	4a44      	ldr	r2, [pc, #272]	; (8007c90 <sensorRead+0x1c8>)
 8007b80:	6013      	str	r3, [r2, #0]

  // Perform calculations
  double c = ((double)adc_cos - SENSOR_MIDDLE_VALUE);
 8007b82:	4b40      	ldr	r3, [pc, #256]	; (8007c84 <sensorRead+0x1bc>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7f8 fcbc 	bl	8000504 <__aeabi_ui2d>
 8007b8c:	f04f 0200 	mov.w	r2, #0
 8007b90:	4b40      	ldr	r3, [pc, #256]	; (8007c94 <sensorRead+0x1cc>)
 8007b92:	f7f8 fb79 	bl	8000288 <__aeabi_dsub>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  double s = ((double)adc_sin - SENSOR_MIDDLE_VALUE);
 8007b9e:	4b3b      	ldr	r3, [pc, #236]	; (8007c8c <sensorRead+0x1c4>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7f8 fcae 	bl	8000504 <__aeabi_ui2d>
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	4b39      	ldr	r3, [pc, #228]	; (8007c94 <sensorRead+0x1cc>)
 8007bae:	f7f8 fb6b 	bl	8000288 <__aeabi_dsub>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  double cn = ((double)adc_cosn - SENSOR_MIDDLE_VALUE);
 8007bba:	4b33      	ldr	r3, [pc, #204]	; (8007c88 <sensorRead+0x1c0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7f8 fca0 	bl	8000504 <__aeabi_ui2d>
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	4b32      	ldr	r3, [pc, #200]	; (8007c94 <sensorRead+0x1cc>)
 8007bca:	f7f8 fb5d 	bl	8000288 <__aeabi_dsub>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  double sn = ((double)adc_sinn - SENSOR_MIDDLE_VALUE);
 8007bd6:	4b2e      	ldr	r3, [pc, #184]	; (8007c90 <sensorRead+0x1c8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7f8 fc92 	bl	8000504 <__aeabi_ui2d>
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	4b2b      	ldr	r3, [pc, #172]	; (8007c94 <sensorRead+0x1cc>)
 8007be6:	f7f8 fb4f 	bl	8000288 <__aeabi_dsub>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  double sx = c - cn;
 8007bf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007bf6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007bfa:	f7f8 fb45 	bl	8000288 <__aeabi_dsub>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double sy = s - sn;
 8007c06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007c0e:	f7f8 fb3b 	bl	8000288 <__aeabi_dsub>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	e9c7 2306 	strd	r2, r3, [r7, #24]

  double sensorAngleUnit = (atan2(sy, sx) + M_PI) / (2.0 * M_PI);
 8007c1a:	ed97 1b08 	vldr	d1, [r7, #32]
 8007c1e:	ed97 0b06 	vldr	d0, [r7, #24]
 8007c22:	f00e fa13 	bl	801604c <atan2>
 8007c26:	ec51 0b10 	vmov	r0, r1, d0
 8007c2a:	a311      	add	r3, pc, #68	; (adr r3, 8007c70 <sensorRead+0x1a8>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fb2c 	bl	800028c <__adddf3>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	a30e      	add	r3, pc, #56	; (adr r3, 8007c78 <sensorRead+0x1b0>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f7f8 fe03 	bl	800084c <__aeabi_ddiv>
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  sensorAngle = 360.0 * sensorAngleUnit;
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <sensorRead+0x1d0>)
 8007c54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c58:	f7f8 fcce 	bl	80005f8 <__aeabi_dmul>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	490e      	ldr	r1, [pc, #56]	; (8007c9c <sensorRead+0x1d4>)
 8007c62:	e9c1 2300 	strd	r2, r3, [r1]

  //usb_printf("%.2f\n",sensorAngle);
  //usb_printf("%d %d %d %d\n",adc_cos, adc_sin, adc_cosn, adc_sinn);
  //usb_printf("%.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f\n",c, s, cn, sn, sx, sy, atan2(sy, sx), sensorAngleUnit);
}
 8007c66:	bf00      	nop
 8007c68:	3748      	adds	r7, #72	; 0x48
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	54442d18 	.word	0x54442d18
 8007c74:	400921fb 	.word	0x400921fb
 8007c78:	54442d18 	.word	0x54442d18
 8007c7c:	401921fb 	.word	0x401921fb
 8007c80:	200006f4 	.word	0x200006f4
 8007c84:	200008f0 	.word	0x200008f0
 8007c88:	200008f8 	.word	0x200008f8
 8007c8c:	200008f4 	.word	0x200008f4
 8007c90:	200008fc 	.word	0x200008fc
 8007c94:	40813000 	.word	0x40813000
 8007c98:	40768000 	.word	0x40768000
 8007c9c:	20000900 	.word	0x20000900

08007ca0 <sensorSetup>:

void sensorSetup() {
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8007ca4:	480b      	ldr	r0, [pc, #44]	; (8007cd4 <sensorSetup+0x34>)
 8007ca6:	f000 ffb1 	bl	8008c0c <HAL_ADC_Start>
  sensorRead();
 8007caa:	f7ff ff0d 	bl	8007ac8 <sensorRead>
  steps = sensorAngle * STEPS_PER_DEGREE;
 8007cae:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <sensorSetup+0x38>)
 8007cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	4b08      	ldr	r3, [pc, #32]	; (8007cdc <sensorSetup+0x3c>)
 8007cba:	f7f8 fc9d 	bl	80005f8 <__aeabi_dmul>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f7f8 ff47 	bl	8000b58 <__aeabi_d2iz>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4a04      	ldr	r2, [pc, #16]	; (8007ce0 <sensorSetup+0x40>)
 8007cce:	6013      	str	r3, [r2, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	200006f4 	.word	0x200006f4
 8007cd8:	20000900 	.word	0x20000900
 8007cdc:	405a4000 	.word	0x405a4000
 8007ce0:	20000908 	.word	0x20000908
 8007ce4:	00000000 	.word	0x00000000

08007ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007cec:	f000 feb4 	bl	8008a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007cf0:	f000 f848 	bl	8007d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007cf4:	f000 fa9a 	bl	800822c <MX_GPIO_Init>
  MX_ADC1_Init();
 8007cf8:	f000 f8ae 	bl	8007e58 <MX_ADC1_Init>
  MX_CAN1_Init();
 8007cfc:	f000 f8fe 	bl	8007efc <MX_CAN1_Init>
  MX_I2C2_Init();
 8007d00:	f000 f95e 	bl	8007fc0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8007d04:	f000 f98a 	bl	800801c <MX_SPI1_Init>
  MX_TIM8_Init();
 8007d08:	f000 f9be 	bl	8008088 <MX_TIM8_Init>
  MX_I2C1_Init();
 8007d0c:	f000 f92a 	bl	8007f64 <MX_I2C1_Init>
  MX_UART4_Init();
 8007d10:	f000 fa62 	bl	80081d8 <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 8007d14:	f008 fee6 	bl	8010ae4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  CANSetup();
 8007d18:	f7ff feb2 	bl	8007a80 <CANSetup>
  sensorSetup();
 8007d1c:	f7ff ffc0 	bl	8007ca0 <sensorSetup>
  LEDSetup();
 8007d20:	f7ff fe2c 	bl	800797c <LEDSetup>
  usb_printf("Hello, World!\n");
 8007d24:	4814      	ldr	r0, [pc, #80]	; (8007d78 <main+0x90>)
 8007d26:	f7ff fce6 	bl	80076f6 <usb_printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sensorRead();
 8007d2a:	f7ff fecd 	bl	8007ac8 <sensorRead>
	  wheel(sensorAngle*255.0/360.0);
 8007d2e:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <main+0x94>)
 8007d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d34:	a30e      	add	r3, pc, #56	; (adr r3, 8007d70 <main+0x88>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f7f8 fc5d 	bl	80005f8 <__aeabi_dmul>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4610      	mov	r0, r2
 8007d44:	4619      	mov	r1, r3
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <main+0x98>)
 8007d4c:	f7f8 fd7e 	bl	800084c <__aeabi_ddiv>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4610      	mov	r0, r2
 8007d56:	4619      	mov	r1, r3
 8007d58:	f7f8 ff26 	bl	8000ba8 <__aeabi_d2uiz>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff fd75 	bl	8007850 <wheel>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  canopen_app_process();
 8007d66:	f7ff f9fb 	bl	8007160 <canopen_app_process>
	  sensorRead();
 8007d6a:	e7de      	b.n	8007d2a <main+0x42>
 8007d6c:	f3af 8000 	nop.w
 8007d70:	00000000 	.word	0x00000000
 8007d74:	406fe000 	.word	0x406fe000
 8007d78:	08016720 	.word	0x08016720
 8007d7c:	20000900 	.word	0x20000900
 8007d80:	40768000 	.word	0x40768000

08007d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b094      	sub	sp, #80	; 0x50
 8007d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d8a:	f107 0320 	add.w	r3, r7, #32
 8007d8e:	2230      	movs	r2, #48	; 0x30
 8007d90:	2100      	movs	r1, #0
 8007d92:	4618      	mov	r0, r3
 8007d94:	f009 fe06 	bl	80119a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d98:	f107 030c 	add.w	r3, r7, #12
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	609a      	str	r2, [r3, #8]
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007da8:	2300      	movs	r3, #0
 8007daa:	60bb      	str	r3, [r7, #8]
 8007dac:	4b28      	ldr	r3, [pc, #160]	; (8007e50 <SystemClock_Config+0xcc>)
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	4a27      	ldr	r2, [pc, #156]	; (8007e50 <SystemClock_Config+0xcc>)
 8007db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db6:	6413      	str	r3, [r2, #64]	; 0x40
 8007db8:	4b25      	ldr	r3, [pc, #148]	; (8007e50 <SystemClock_Config+0xcc>)
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc0:	60bb      	str	r3, [r7, #8]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	607b      	str	r3, [r7, #4]
 8007dc8:	4b22      	ldr	r3, [pc, #136]	; (8007e54 <SystemClock_Config+0xd0>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a21      	ldr	r2, [pc, #132]	; (8007e54 <SystemClock_Config+0xd0>)
 8007dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	4b1f      	ldr	r3, [pc, #124]	; (8007e54 <SystemClock_Config+0xd0>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007de0:	2301      	movs	r3, #1
 8007de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007dea:	2302      	movs	r3, #2
 8007dec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007dee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007df4:	2304      	movs	r3, #4
 8007df6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007df8:	23a8      	movs	r3, #168	; 0xa8
 8007dfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007e00:	2307      	movs	r3, #7
 8007e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e04:	f107 0320 	add.w	r3, r7, #32
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f003 fce3 	bl	800b7d4 <HAL_RCC_OscConfig>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007e14:	f000 fac8 	bl	80083a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e18:	230f      	movs	r3, #15
 8007e1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e20:	2300      	movs	r3, #0
 8007e22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007e24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007e28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007e30:	f107 030c 	add.w	r3, r7, #12
 8007e34:	2105      	movs	r1, #5
 8007e36:	4618      	mov	r0, r3
 8007e38:	f003 ff44 	bl	800bcc4 <HAL_RCC_ClockConfig>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007e42:	f000 fab1 	bl	80083a8 <Error_Handler>
  }
}
 8007e46:	bf00      	nop
 8007e48:	3750      	adds	r7, #80	; 0x50
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	40023800 	.word	0x40023800
 8007e54:	40007000 	.word	0x40007000

08007e58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007e5e:	463b      	mov	r3, r7
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	605a      	str	r2, [r3, #4]
 8007e66:	609a      	str	r2, [r3, #8]
 8007e68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007e6a:	4b21      	ldr	r3, [pc, #132]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007e6c:	4a21      	ldr	r2, [pc, #132]	; (8007ef4 <MX_ADC1_Init+0x9c>)
 8007e6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007e70:	4b1f      	ldr	r3, [pc, #124]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007e72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007e76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007e78:	4b1d      	ldr	r3, [pc, #116]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007e7e:	4b1c      	ldr	r3, [pc, #112]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007e84:	4b1a      	ldr	r3, [pc, #104]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007e8a:	4b19      	ldr	r3, [pc, #100]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007e92:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007e98:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007e9a:	4a17      	ldr	r2, [pc, #92]	; (8007ef8 <MX_ADC1_Init+0xa0>)
 8007e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007e9e:	4b14      	ldr	r3, [pc, #80]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007ea4:	4b12      	ldr	r3, [pc, #72]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007eaa:	4b11      	ldr	r3, [pc, #68]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007eb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007eb8:	480d      	ldr	r0, [pc, #52]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007eba:	f000 fe63 	bl	8008b84 <HAL_ADC_Init>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007ec4:	f000 fa70 	bl	80083a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ed4:	463b      	mov	r3, r7
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4805      	ldr	r0, [pc, #20]	; (8007ef0 <MX_ADC1_Init+0x98>)
 8007eda:	f001 f801 	bl	8008ee0 <HAL_ADC_ConfigChannel>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007ee4:	f000 fa60 	bl	80083a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007ee8:	bf00      	nop
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	200006f4 	.word	0x200006f4
 8007ef4:	40012000 	.word	0x40012000
 8007ef8:	0f000001 	.word	0x0f000001

08007efc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007f00:	4b16      	ldr	r3, [pc, #88]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f02:	4a17      	ldr	r2, [pc, #92]	; (8007f60 <MX_CAN1_Init+0x64>)
 8007f04:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8007f06:	4b15      	ldr	r3, [pc, #84]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f08:	2210      	movs	r2, #16
 8007f0a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007f0c:	4b13      	ldr	r3, [pc, #76]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007f12:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007f18:	4b10      	ldr	r3, [pc, #64]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007f1e:	4b0f      	ldr	r3, [pc, #60]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007f24:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8007f2a:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007f30:	4b0a      	ldr	r3, [pc, #40]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007f3c:	4b07      	ldr	r3, [pc, #28]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007f42:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007f48:	4804      	ldr	r0, [pc, #16]	; (8007f5c <MX_CAN1_Init+0x60>)
 8007f4a:	f001 f9e7 	bl	800931c <HAL_CAN_Init>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8007f54:	f000 fa28 	bl	80083a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8007f58:	bf00      	nop
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	2000073c 	.word	0x2000073c
 8007f60:	40006400 	.word	0x40006400

08007f64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007f68:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <MX_I2C1_Init+0x50>)
 8007f6a:	4a13      	ldr	r2, [pc, #76]	; (8007fb8 <MX_I2C1_Init+0x54>)
 8007f6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007f6e:	4b11      	ldr	r3, [pc, #68]	; (8007fb4 <MX_I2C1_Init+0x50>)
 8007f70:	4a12      	ldr	r2, [pc, #72]	; (8007fbc <MX_I2C1_Init+0x58>)
 8007f72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007f74:	4b0f      	ldr	r3, [pc, #60]	; (8007fb4 <MX_I2C1_Init+0x50>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007f7a:	4b0e      	ldr	r3, [pc, #56]	; (8007fb4 <MX_I2C1_Init+0x50>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f80:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <MX_I2C1_Init+0x50>)
 8007f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f88:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <MX_I2C1_Init+0x50>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007f8e:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <MX_I2C1_Init+0x50>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f94:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <MX_I2C1_Init+0x50>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f9a:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <MX_I2C1_Init+0x50>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007fa0:	4804      	ldr	r0, [pc, #16]	; (8007fb4 <MX_I2C1_Init+0x50>)
 8007fa2:	f002 f855 	bl	800a050 <HAL_I2C_Init>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007fac:	f000 f9fc 	bl	80083a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007fb0:	bf00      	nop
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20000764 	.word	0x20000764
 8007fb8:	40005400 	.word	0x40005400
 8007fbc:	000186a0 	.word	0x000186a0

08007fc0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007fc4:	4b12      	ldr	r3, [pc, #72]	; (8008010 <MX_I2C2_Init+0x50>)
 8007fc6:	4a13      	ldr	r2, [pc, #76]	; (8008014 <MX_I2C2_Init+0x54>)
 8007fc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8007fca:	4b11      	ldr	r3, [pc, #68]	; (8008010 <MX_I2C2_Init+0x50>)
 8007fcc:	4a12      	ldr	r2, [pc, #72]	; (8008018 <MX_I2C2_Init+0x58>)
 8007fce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007fd0:	4b0f      	ldr	r3, [pc, #60]	; (8008010 <MX_I2C2_Init+0x50>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007fd6:	4b0e      	ldr	r3, [pc, #56]	; (8008010 <MX_I2C2_Init+0x50>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007fdc:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <MX_I2C2_Init+0x50>)
 8007fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fe2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <MX_I2C2_Init+0x50>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007fea:	4b09      	ldr	r3, [pc, #36]	; (8008010 <MX_I2C2_Init+0x50>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007ff0:	4b07      	ldr	r3, [pc, #28]	; (8008010 <MX_I2C2_Init+0x50>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007ff6:	4b06      	ldr	r3, [pc, #24]	; (8008010 <MX_I2C2_Init+0x50>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007ffc:	4804      	ldr	r0, [pc, #16]	; (8008010 <MX_I2C2_Init+0x50>)
 8007ffe:	f002 f827 	bl	800a050 <HAL_I2C_Init>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8008008:	f000 f9ce 	bl	80083a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800800c:	bf00      	nop
 800800e:	bd80      	pop	{r7, pc}
 8008010:	200007b8 	.word	0x200007b8
 8008014:	40005800 	.word	0x40005800
 8008018:	000186a0 	.word	0x000186a0

0800801c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008020:	4b17      	ldr	r3, [pc, #92]	; (8008080 <MX_SPI1_Init+0x64>)
 8008022:	4a18      	ldr	r2, [pc, #96]	; (8008084 <MX_SPI1_Init+0x68>)
 8008024:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008026:	4b16      	ldr	r3, [pc, #88]	; (8008080 <MX_SPI1_Init+0x64>)
 8008028:	f44f 7282 	mov.w	r2, #260	; 0x104
 800802c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800802e:	4b14      	ldr	r3, [pc, #80]	; (8008080 <MX_SPI1_Init+0x64>)
 8008030:	2200      	movs	r2, #0
 8008032:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008034:	4b12      	ldr	r3, [pc, #72]	; (8008080 <MX_SPI1_Init+0x64>)
 8008036:	2200      	movs	r2, #0
 8008038:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800803a:	4b11      	ldr	r3, [pc, #68]	; (8008080 <MX_SPI1_Init+0x64>)
 800803c:	2200      	movs	r2, #0
 800803e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008040:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <MX_SPI1_Init+0x64>)
 8008042:	2200      	movs	r2, #0
 8008044:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008046:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <MX_SPI1_Init+0x64>)
 8008048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800804c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800804e:	4b0c      	ldr	r3, [pc, #48]	; (8008080 <MX_SPI1_Init+0x64>)
 8008050:	2200      	movs	r2, #0
 8008052:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <MX_SPI1_Init+0x64>)
 8008056:	2200      	movs	r2, #0
 8008058:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800805a:	4b09      	ldr	r3, [pc, #36]	; (8008080 <MX_SPI1_Init+0x64>)
 800805c:	2200      	movs	r2, #0
 800805e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008060:	4b07      	ldr	r3, [pc, #28]	; (8008080 <MX_SPI1_Init+0x64>)
 8008062:	2200      	movs	r2, #0
 8008064:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008066:	4b06      	ldr	r3, [pc, #24]	; (8008080 <MX_SPI1_Init+0x64>)
 8008068:	220a      	movs	r2, #10
 800806a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800806c:	4804      	ldr	r0, [pc, #16]	; (8008080 <MX_SPI1_Init+0x64>)
 800806e:	f004 f849 	bl	800c104 <HAL_SPI_Init>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008078:	f000 f996 	bl	80083a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800807c:	bf00      	nop
 800807e:	bd80      	pop	{r7, pc}
 8008080:	2000080c 	.word	0x2000080c
 8008084:	40013000 	.word	0x40013000

08008088 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b092      	sub	sp, #72	; 0x48
 800808c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800808e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	609a      	str	r2, [r3, #8]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	611a      	str	r2, [r3, #16]
 80080a8:	615a      	str	r2, [r3, #20]
 80080aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80080ac:	1d3b      	adds	r3, r7, #4
 80080ae:	2220      	movs	r2, #32
 80080b0:	2100      	movs	r1, #0
 80080b2:	4618      	mov	r0, r3
 80080b4:	f009 fc76 	bl	80119a4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80080b8:	4b45      	ldr	r3, [pc, #276]	; (80081d0 <MX_TIM8_Init+0x148>)
 80080ba:	4a46      	ldr	r2, [pc, #280]	; (80081d4 <MX_TIM8_Init+0x14c>)
 80080bc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 80080be:	4b44      	ldr	r3, [pc, #272]	; (80081d0 <MX_TIM8_Init+0x148>)
 80080c0:	223f      	movs	r2, #63	; 0x3f
 80080c2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080c4:	4b42      	ldr	r3, [pc, #264]	; (80081d0 <MX_TIM8_Init+0x148>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 655;
 80080ca:	4b41      	ldr	r3, [pc, #260]	; (80081d0 <MX_TIM8_Init+0x148>)
 80080cc:	f240 228f 	movw	r2, #655	; 0x28f
 80080d0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080d2:	4b3f      	ldr	r3, [pc, #252]	; (80081d0 <MX_TIM8_Init+0x148>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80080d8:	4b3d      	ldr	r3, [pc, #244]	; (80081d0 <MX_TIM8_Init+0x148>)
 80080da:	2200      	movs	r2, #0
 80080dc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080de:	4b3c      	ldr	r3, [pc, #240]	; (80081d0 <MX_TIM8_Init+0x148>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80080e4:	483a      	ldr	r0, [pc, #232]	; (80081d0 <MX_TIM8_Init+0x148>)
 80080e6:	f004 f907 	bl	800c2f8 <HAL_TIM_PWM_Init>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80080f0:	f000 f95a 	bl	80083a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080f4:	2300      	movs	r3, #0
 80080f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80080fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008100:	4619      	mov	r1, r3
 8008102:	4833      	ldr	r0, [pc, #204]	; (80081d0 <MX_TIM8_Init+0x148>)
 8008104:	f004 fd48 	bl	800cb98 <HAL_TIMEx_MasterConfigSynchronization>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800810e:	f000 f94b 	bl	80083a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008112:	2360      	movs	r3, #96	; 0x60
 8008114:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800811a:	2300      	movs	r3, #0
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800811e:	2300      	movs	r3, #0
 8008120:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008122:	2300      	movs	r3, #0
 8008124:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008126:	2300      	movs	r3, #0
 8008128:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800812a:	2300      	movs	r3, #0
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800812e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008132:	2200      	movs	r2, #0
 8008134:	4619      	mov	r1, r3
 8008136:	4826      	ldr	r0, [pc, #152]	; (80081d0 <MX_TIM8_Init+0x148>)
 8008138:	f004 f9f6 	bl	800c528 <HAL_TIM_PWM_ConfigChannel>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8008142:	f000 f931 	bl	80083a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800814a:	2204      	movs	r2, #4
 800814c:	4619      	mov	r1, r3
 800814e:	4820      	ldr	r0, [pc, #128]	; (80081d0 <MX_TIM8_Init+0x148>)
 8008150:	f004 f9ea 	bl	800c528 <HAL_TIM_PWM_ConfigChannel>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800815a:	f000 f925 	bl	80083a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800815e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008162:	2208      	movs	r2, #8
 8008164:	4619      	mov	r1, r3
 8008166:	481a      	ldr	r0, [pc, #104]	; (80081d0 <MX_TIM8_Init+0x148>)
 8008168:	f004 f9de 	bl	800c528 <HAL_TIM_PWM_ConfigChannel>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8008172:	f000 f919 	bl	80083a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800817a:	220c      	movs	r2, #12
 800817c:	4619      	mov	r1, r3
 800817e:	4814      	ldr	r0, [pc, #80]	; (80081d0 <MX_TIM8_Init+0x148>)
 8008180:	f004 f9d2 	bl	800c528 <HAL_TIM_PWM_ConfigChannel>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 800818a:	f000 f90d 	bl	80083a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800818e:	2300      	movs	r3, #0
 8008190:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008192:	2300      	movs	r3, #0
 8008194:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008196:	2300      	movs	r3, #0
 8008198:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800819a:	2300      	movs	r3, #0
 800819c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80081a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80081a8:	2300      	movs	r3, #0
 80081aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80081ac:	1d3b      	adds	r3, r7, #4
 80081ae:	4619      	mov	r1, r3
 80081b0:	4807      	ldr	r0, [pc, #28]	; (80081d0 <MX_TIM8_Init+0x148>)
 80081b2:	f004 fd6d 	bl	800cc90 <HAL_TIMEx_ConfigBreakDeadTime>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 80081bc:	f000 f8f4 	bl	80083a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80081c0:	4803      	ldr	r0, [pc, #12]	; (80081d0 <MX_TIM8_Init+0x148>)
 80081c2:	f000 fa91 	bl	80086e8 <HAL_TIM_MspPostInit>

}
 80081c6:	bf00      	nop
 80081c8:	3748      	adds	r7, #72	; 0x48
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000864 	.word	0x20000864
 80081d4:	40010400 	.word	0x40010400

080081d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80081dc:	4b11      	ldr	r3, [pc, #68]	; (8008224 <MX_UART4_Init+0x4c>)
 80081de:	4a12      	ldr	r2, [pc, #72]	; (8008228 <MX_UART4_Init+0x50>)
 80081e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80081e2:	4b10      	ldr	r3, [pc, #64]	; (8008224 <MX_UART4_Init+0x4c>)
 80081e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80081ea:	4b0e      	ldr	r3, [pc, #56]	; (8008224 <MX_UART4_Init+0x4c>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80081f0:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <MX_UART4_Init+0x4c>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80081f6:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <MX_UART4_Init+0x4c>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80081fc:	4b09      	ldr	r3, [pc, #36]	; (8008224 <MX_UART4_Init+0x4c>)
 80081fe:	220c      	movs	r2, #12
 8008200:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008202:	4b08      	ldr	r3, [pc, #32]	; (8008224 <MX_UART4_Init+0x4c>)
 8008204:	2200      	movs	r2, #0
 8008206:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008208:	4b06      	ldr	r3, [pc, #24]	; (8008224 <MX_UART4_Init+0x4c>)
 800820a:	2200      	movs	r2, #0
 800820c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800820e:	4805      	ldr	r0, [pc, #20]	; (8008224 <MX_UART4_Init+0x4c>)
 8008210:	f004 fd90 	bl	800cd34 <HAL_UART_Init>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800821a:	f000 f8c5 	bl	80083a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800821e:	bf00      	nop
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	200008ac 	.word	0x200008ac
 8008228:	40004c00 	.word	0x40004c00

0800822c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08a      	sub	sp, #40	; 0x28
 8008230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008232:	f107 0314 	add.w	r3, r7, #20
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	605a      	str	r2, [r3, #4]
 800823c:	609a      	str	r2, [r3, #8]
 800823e:	60da      	str	r2, [r3, #12]
 8008240:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008242:	2300      	movs	r3, #0
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	4b54      	ldr	r3, [pc, #336]	; (8008398 <MX_GPIO_Init+0x16c>)
 8008248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824a:	4a53      	ldr	r2, [pc, #332]	; (8008398 <MX_GPIO_Init+0x16c>)
 800824c:	f043 0304 	orr.w	r3, r3, #4
 8008250:	6313      	str	r3, [r2, #48]	; 0x30
 8008252:	4b51      	ldr	r3, [pc, #324]	; (8008398 <MX_GPIO_Init+0x16c>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	f003 0304 	and.w	r3, r3, #4
 800825a:	613b      	str	r3, [r7, #16]
 800825c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800825e:	2300      	movs	r3, #0
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	4b4d      	ldr	r3, [pc, #308]	; (8008398 <MX_GPIO_Init+0x16c>)
 8008264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008266:	4a4c      	ldr	r2, [pc, #304]	; (8008398 <MX_GPIO_Init+0x16c>)
 8008268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800826c:	6313      	str	r3, [r2, #48]	; 0x30
 800826e:	4b4a      	ldr	r3, [pc, #296]	; (8008398 <MX_GPIO_Init+0x16c>)
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800827a:	2300      	movs	r3, #0
 800827c:	60bb      	str	r3, [r7, #8]
 800827e:	4b46      	ldr	r3, [pc, #280]	; (8008398 <MX_GPIO_Init+0x16c>)
 8008280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008282:	4a45      	ldr	r2, [pc, #276]	; (8008398 <MX_GPIO_Init+0x16c>)
 8008284:	f043 0301 	orr.w	r3, r3, #1
 8008288:	6313      	str	r3, [r2, #48]	; 0x30
 800828a:	4b43      	ldr	r3, [pc, #268]	; (8008398 <MX_GPIO_Init+0x16c>)
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	60bb      	str	r3, [r7, #8]
 8008294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008296:	2300      	movs	r3, #0
 8008298:	607b      	str	r3, [r7, #4]
 800829a:	4b3f      	ldr	r3, [pc, #252]	; (8008398 <MX_GPIO_Init+0x16c>)
 800829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829e:	4a3e      	ldr	r2, [pc, #248]	; (8008398 <MX_GPIO_Init+0x16c>)
 80082a0:	f043 0302 	orr.w	r3, r3, #2
 80082a4:	6313      	str	r3, [r2, #48]	; 0x30
 80082a6:	4b3c      	ldr	r3, [pc, #240]	; (8008398 <MX_GPIO_Init+0x16c>)
 80082a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	607b      	str	r3, [r7, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TMC_SPI_MODE_GPIO_Port, TMC_SPI_MODE_Pin, GPIO_PIN_RESET);
 80082b2:	2200      	movs	r2, #0
 80082b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80082b8:	4838      	ldr	r0, [pc, #224]	; (800839c <MX_GPIO_Init+0x170>)
 80082ba:	f001 feaf 	bl	800a01c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TMC_CS_GPIO_Port, TMC_CS_Pin, GPIO_PIN_RESET);
 80082be:	2200      	movs	r2, #0
 80082c0:	2110      	movs	r1, #16
 80082c2:	4837      	ldr	r0, [pc, #220]	; (80083a0 <MX_GPIO_Init+0x174>)
 80082c4:	f001 feaa 	bl	800a01c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_EN_Pin|TMC_DIR_Pin|TMC_STEP_Pin|TMC_EN_Pin
 80082c8:	2200      	movs	r2, #0
 80082ca:	f24f 0121 	movw	r1, #61473	; 0xf021
 80082ce:	4835      	ldr	r0, [pc, #212]	; (80083a4 <MX_GPIO_Init+0x178>)
 80082d0:	f001 fea4 	bl	800a01c <HAL_GPIO_WritePin>
                          |TMC_STEP_GATE_Pin|CAN_SILENT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TMC_SKIP_Pin TMC_STALL_Pin */
  GPIO_InitStruct.Pin = TMC_SKIP_Pin|TMC_STALL_Pin;
 80082d4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80082d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082da:	2300      	movs	r3, #0
 80082dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082e2:	f107 0314 	add.w	r3, r7, #20
 80082e6:	4619      	mov	r1, r3
 80082e8:	482c      	ldr	r0, [pc, #176]	; (800839c <MX_GPIO_Init+0x170>)
 80082ea:	f001 fce3 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_SPI_MODE_Pin */
  GPIO_InitStruct.Pin = TMC_SPI_MODE_Pin;
 80082ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082f4:	2301      	movs	r3, #1
 80082f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082fc:	2300      	movs	r3, #0
 80082fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TMC_SPI_MODE_GPIO_Port, &GPIO_InitStruct);
 8008300:	f107 0314 	add.w	r3, r7, #20
 8008304:	4619      	mov	r1, r3
 8008306:	4825      	ldr	r0, [pc, #148]	; (800839c <MX_GPIO_Init+0x170>)
 8008308:	f001 fcd4 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_ADDR0_Pin CAN_ADDR1_Pin CAN_ADDR2_Pin CAN_ADDR3_Pin
                           CAN_ADDR4_Pin CAN_ADDR5_Pin */
  GPIO_InitStruct.Pin = CAN_ADDR0_Pin|CAN_ADDR1_Pin|CAN_ADDR2_Pin|CAN_ADDR3_Pin
 800830c:	233f      	movs	r3, #63	; 0x3f
 800830e:	617b      	str	r3, [r7, #20]
                          |CAN_ADDR4_Pin|CAN_ADDR5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008310:	2300      	movs	r3, #0
 8008312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008314:	2301      	movs	r3, #1
 8008316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008318:	f107 0314 	add.w	r3, r7, #20
 800831c:	4619      	mov	r1, r3
 800831e:	481f      	ldr	r0, [pc, #124]	; (800839c <MX_GPIO_Init+0x170>)
 8008320:	f001 fcc8 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_CS_Pin */
  GPIO_InitStruct.Pin = TMC_CS_Pin;
 8008324:	2310      	movs	r3, #16
 8008326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008328:	2301      	movs	r3, #1
 800832a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800832c:	2300      	movs	r3, #0
 800832e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008330:	2300      	movs	r3, #0
 8008332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TMC_CS_GPIO_Port, &GPIO_InitStruct);
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	4619      	mov	r1, r3
 800833a:	4819      	ldr	r0, [pc, #100]	; (80083a0 <MX_GPIO_Init+0x174>)
 800833c:	f001 fcba 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_EN_Pin TMC_DIR_Pin TMC_STEP_Pin TMC_EN_Pin
                           TMC_STEP_GATE_Pin CAN_SILENT_Pin */
  GPIO_InitStruct.Pin = STEP_EN_Pin|TMC_DIR_Pin|TMC_STEP_Pin|TMC_EN_Pin
 8008340:	f24f 0321 	movw	r3, #61473	; 0xf021
 8008344:	617b      	str	r3, [r7, #20]
                          |TMC_STEP_GATE_Pin|CAN_SILENT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008346:	2301      	movs	r3, #1
 8008348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800834e:	2300      	movs	r3, #0
 8008350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	4619      	mov	r1, r3
 8008358:	4812      	ldr	r0, [pc, #72]	; (80083a4 <MX_GPIO_Init+0x178>)
 800835a:	f001 fcab 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800835e:	2304      	movs	r3, #4
 8008360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008362:	2300      	movs	r3, #0
 8008364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008366:	2300      	movs	r3, #0
 8008368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800836a:	f107 0314 	add.w	r3, r7, #20
 800836e:	4619      	mov	r1, r3
 8008370:	480c      	ldr	r0, [pc, #48]	; (80083a4 <MX_GPIO_Init+0x178>)
 8008372:	f001 fc9f 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_STEP_RDY_Pin */
  GPIO_InitStruct.Pin = TMC_STEP_RDY_Pin;
 8008376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800837c:	2300      	movs	r3, #0
 800837e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008380:	2300      	movs	r3, #0
 8008382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMC_STEP_RDY_GPIO_Port, &GPIO_InitStruct);
 8008384:	f107 0314 	add.w	r3, r7, #20
 8008388:	4619      	mov	r1, r3
 800838a:	4805      	ldr	r0, [pc, #20]	; (80083a0 <MX_GPIO_Init+0x174>)
 800838c:	f001 fc92 	bl	8009cb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008390:	bf00      	nop
 8008392:	3728      	adds	r7, #40	; 0x28
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	40023800 	.word	0x40023800
 800839c:	40020800 	.word	0x40020800
 80083a0:	40020000 	.word	0x40020000
 80083a4:	40020400 	.word	0x40020400

080083a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80083ac:	b672      	cpsid	i
}
 80083ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80083b0:	e7fe      	b.n	80083b0 <Error_Handler+0x8>
	...

080083b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083ba:	2300      	movs	r3, #0
 80083bc:	607b      	str	r3, [r7, #4]
 80083be:	4b10      	ldr	r3, [pc, #64]	; (8008400 <HAL_MspInit+0x4c>)
 80083c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c2:	4a0f      	ldr	r2, [pc, #60]	; (8008400 <HAL_MspInit+0x4c>)
 80083c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083c8:	6453      	str	r3, [r2, #68]	; 0x44
 80083ca:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <HAL_MspInit+0x4c>)
 80083cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083d2:	607b      	str	r3, [r7, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083d6:	2300      	movs	r3, #0
 80083d8:	603b      	str	r3, [r7, #0]
 80083da:	4b09      	ldr	r3, [pc, #36]	; (8008400 <HAL_MspInit+0x4c>)
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	4a08      	ldr	r2, [pc, #32]	; (8008400 <HAL_MspInit+0x4c>)
 80083e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e4:	6413      	str	r3, [r2, #64]	; 0x40
 80083e6:	4b06      	ldr	r3, [pc, #24]	; (8008400 <HAL_MspInit+0x4c>)
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	40023800 	.word	0x40023800

08008404 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08a      	sub	sp, #40	; 0x28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800840c:	f107 0314 	add.w	r3, r7, #20
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	605a      	str	r2, [r3, #4]
 8008416:	609a      	str	r2, [r3, #8]
 8008418:	60da      	str	r2, [r3, #12]
 800841a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a17      	ldr	r2, [pc, #92]	; (8008480 <HAL_ADC_MspInit+0x7c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d127      	bne.n	8008476 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008426:	2300      	movs	r3, #0
 8008428:	613b      	str	r3, [r7, #16]
 800842a:	4b16      	ldr	r3, [pc, #88]	; (8008484 <HAL_ADC_MspInit+0x80>)
 800842c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842e:	4a15      	ldr	r2, [pc, #84]	; (8008484 <HAL_ADC_MspInit+0x80>)
 8008430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008434:	6453      	str	r3, [r2, #68]	; 0x44
 8008436:	4b13      	ldr	r3, [pc, #76]	; (8008484 <HAL_ADC_MspInit+0x80>)
 8008438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800843a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <HAL_ADC_MspInit+0x80>)
 8008448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844a:	4a0e      	ldr	r2, [pc, #56]	; (8008484 <HAL_ADC_MspInit+0x80>)
 800844c:	f043 0301 	orr.w	r3, r3, #1
 8008450:	6313      	str	r3, [r2, #48]	; 0x30
 8008452:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <HAL_ADC_MspInit+0x80>)
 8008454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = IPS_COS_Pin|IPS_COSN_Pin|IPS_SIN_Pin|IPS_SINN_Pin;
 800845e:	230f      	movs	r3, #15
 8008460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008462:	2303      	movs	r3, #3
 8008464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008466:	2300      	movs	r3, #0
 8008468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800846a:	f107 0314 	add.w	r3, r7, #20
 800846e:	4619      	mov	r1, r3
 8008470:	4805      	ldr	r0, [pc, #20]	; (8008488 <HAL_ADC_MspInit+0x84>)
 8008472:	f001 fc1f 	bl	8009cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008476:	bf00      	nop
 8008478:	3728      	adds	r7, #40	; 0x28
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	40012000 	.word	0x40012000
 8008484:	40023800 	.word	0x40023800
 8008488:	40020000 	.word	0x40020000

0800848c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08a      	sub	sp, #40	; 0x28
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008494:	f107 0314 	add.w	r3, r7, #20
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	605a      	str	r2, [r3, #4]
 800849e:	609a      	str	r2, [r3, #8]
 80084a0:	60da      	str	r2, [r3, #12]
 80084a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a19      	ldr	r2, [pc, #100]	; (8008510 <HAL_CAN_MspInit+0x84>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d12c      	bne.n	8008508 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80084ae:	2300      	movs	r3, #0
 80084b0:	613b      	str	r3, [r7, #16]
 80084b2:	4b18      	ldr	r3, [pc, #96]	; (8008514 <HAL_CAN_MspInit+0x88>)
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	4a17      	ldr	r2, [pc, #92]	; (8008514 <HAL_CAN_MspInit+0x88>)
 80084b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80084bc:	6413      	str	r3, [r2, #64]	; 0x40
 80084be:	4b15      	ldr	r3, [pc, #84]	; (8008514 <HAL_CAN_MspInit+0x88>)
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	4b11      	ldr	r3, [pc, #68]	; (8008514 <HAL_CAN_MspInit+0x88>)
 80084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d2:	4a10      	ldr	r2, [pc, #64]	; (8008514 <HAL_CAN_MspInit+0x88>)
 80084d4:	f043 0302 	orr.w	r3, r3, #2
 80084d8:	6313      	str	r3, [r2, #48]	; 0x30
 80084da:	4b0e      	ldr	r3, [pc, #56]	; (8008514 <HAL_CAN_MspInit+0x88>)
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80084e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80084ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ec:	2302      	movs	r3, #2
 80084ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084f4:	2303      	movs	r3, #3
 80084f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80084f8:	2309      	movs	r3, #9
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084fc:	f107 0314 	add.w	r3, r7, #20
 8008500:	4619      	mov	r1, r3
 8008502:	4805      	ldr	r0, [pc, #20]	; (8008518 <HAL_CAN_MspInit+0x8c>)
 8008504:	f001 fbd6 	bl	8009cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008508:	bf00      	nop
 800850a:	3728      	adds	r7, #40	; 0x28
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	40006400 	.word	0x40006400
 8008514:	40023800 	.word	0x40023800
 8008518:	40020400 	.word	0x40020400

0800851c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08c      	sub	sp, #48	; 0x30
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008524:	f107 031c 	add.w	r3, r7, #28
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	605a      	str	r2, [r3, #4]
 800852e:	609a      	str	r2, [r3, #8]
 8008530:	60da      	str	r2, [r3, #12]
 8008532:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a32      	ldr	r2, [pc, #200]	; (8008604 <HAL_I2C_MspInit+0xe8>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d12c      	bne.n	8008598 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800853e:	2300      	movs	r3, #0
 8008540:	61bb      	str	r3, [r7, #24]
 8008542:	4b31      	ldr	r3, [pc, #196]	; (8008608 <HAL_I2C_MspInit+0xec>)
 8008544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008546:	4a30      	ldr	r2, [pc, #192]	; (8008608 <HAL_I2C_MspInit+0xec>)
 8008548:	f043 0302 	orr.w	r3, r3, #2
 800854c:	6313      	str	r3, [r2, #48]	; 0x30
 800854e:	4b2e      	ldr	r3, [pc, #184]	; (8008608 <HAL_I2C_MspInit+0xec>)
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	61bb      	str	r3, [r7, #24]
 8008558:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800855a:	23c0      	movs	r3, #192	; 0xc0
 800855c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800855e:	2312      	movs	r3, #18
 8008560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008562:	2300      	movs	r3, #0
 8008564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008566:	2303      	movs	r3, #3
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800856a:	2304      	movs	r3, #4
 800856c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800856e:	f107 031c 	add.w	r3, r7, #28
 8008572:	4619      	mov	r1, r3
 8008574:	4825      	ldr	r0, [pc, #148]	; (800860c <HAL_I2C_MspInit+0xf0>)
 8008576:	f001 fb9d 	bl	8009cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800857a:	2300      	movs	r3, #0
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	4b22      	ldr	r3, [pc, #136]	; (8008608 <HAL_I2C_MspInit+0xec>)
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	4a21      	ldr	r2, [pc, #132]	; (8008608 <HAL_I2C_MspInit+0xec>)
 8008584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008588:	6413      	str	r3, [r2, #64]	; 0x40
 800858a:	4b1f      	ldr	r3, [pc, #124]	; (8008608 <HAL_I2C_MspInit+0xec>)
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8008596:	e031      	b.n	80085fc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a1c      	ldr	r2, [pc, #112]	; (8008610 <HAL_I2C_MspInit+0xf4>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d12c      	bne.n	80085fc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085a2:	2300      	movs	r3, #0
 80085a4:	613b      	str	r3, [r7, #16]
 80085a6:	4b18      	ldr	r3, [pc, #96]	; (8008608 <HAL_I2C_MspInit+0xec>)
 80085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085aa:	4a17      	ldr	r2, [pc, #92]	; (8008608 <HAL_I2C_MspInit+0xec>)
 80085ac:	f043 0302 	orr.w	r3, r3, #2
 80085b0:	6313      	str	r3, [r2, #48]	; 0x30
 80085b2:	4b15      	ldr	r3, [pc, #84]	; (8008608 <HAL_I2C_MspInit+0xec>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	613b      	str	r3, [r7, #16]
 80085bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80085be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80085c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80085c4:	2312      	movs	r3, #18
 80085c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085cc:	2303      	movs	r3, #3
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80085d0:	2304      	movs	r3, #4
 80085d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085d4:	f107 031c 	add.w	r3, r7, #28
 80085d8:	4619      	mov	r1, r3
 80085da:	480c      	ldr	r0, [pc, #48]	; (800860c <HAL_I2C_MspInit+0xf0>)
 80085dc:	f001 fb6a 	bl	8009cb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80085e0:	2300      	movs	r3, #0
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	4b08      	ldr	r3, [pc, #32]	; (8008608 <HAL_I2C_MspInit+0xec>)
 80085e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e8:	4a07      	ldr	r2, [pc, #28]	; (8008608 <HAL_I2C_MspInit+0xec>)
 80085ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085ee:	6413      	str	r3, [r2, #64]	; 0x40
 80085f0:	4b05      	ldr	r3, [pc, #20]	; (8008608 <HAL_I2C_MspInit+0xec>)
 80085f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	68fb      	ldr	r3, [r7, #12]
}
 80085fc:	bf00      	nop
 80085fe:	3730      	adds	r7, #48	; 0x30
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	40005400 	.word	0x40005400
 8008608:	40023800 	.word	0x40023800
 800860c:	40020400 	.word	0x40020400
 8008610:	40005800 	.word	0x40005800

08008614 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08a      	sub	sp, #40	; 0x28
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800861c:	f107 0314 	add.w	r3, r7, #20
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	605a      	str	r2, [r3, #4]
 8008626:	609a      	str	r2, [r3, #8]
 8008628:	60da      	str	r2, [r3, #12]
 800862a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a19      	ldr	r2, [pc, #100]	; (8008698 <HAL_SPI_MspInit+0x84>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d12b      	bne.n	800868e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008636:	2300      	movs	r3, #0
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	4b18      	ldr	r3, [pc, #96]	; (800869c <HAL_SPI_MspInit+0x88>)
 800863c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863e:	4a17      	ldr	r2, [pc, #92]	; (800869c <HAL_SPI_MspInit+0x88>)
 8008640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008644:	6453      	str	r3, [r2, #68]	; 0x44
 8008646:	4b15      	ldr	r3, [pc, #84]	; (800869c <HAL_SPI_MspInit+0x88>)
 8008648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800864e:	613b      	str	r3, [r7, #16]
 8008650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	4b11      	ldr	r3, [pc, #68]	; (800869c <HAL_SPI_MspInit+0x88>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	4a10      	ldr	r2, [pc, #64]	; (800869c <HAL_SPI_MspInit+0x88>)
 800865c:	f043 0301 	orr.w	r3, r3, #1
 8008660:	6313      	str	r3, [r2, #48]	; 0x30
 8008662:	4b0e      	ldr	r3, [pc, #56]	; (800869c <HAL_SPI_MspInit+0x88>)
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800866e:	23e0      	movs	r3, #224	; 0xe0
 8008670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008672:	2302      	movs	r3, #2
 8008674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008676:	2300      	movs	r3, #0
 8008678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800867a:	2303      	movs	r3, #3
 800867c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800867e:	2305      	movs	r3, #5
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008682:	f107 0314 	add.w	r3, r7, #20
 8008686:	4619      	mov	r1, r3
 8008688:	4805      	ldr	r0, [pc, #20]	; (80086a0 <HAL_SPI_MspInit+0x8c>)
 800868a:	f001 fb13 	bl	8009cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800868e:	bf00      	nop
 8008690:	3728      	adds	r7, #40	; 0x28
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40013000 	.word	0x40013000
 800869c:	40023800 	.word	0x40023800
 80086a0:	40020000 	.word	0x40020000

080086a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a0b      	ldr	r2, [pc, #44]	; (80086e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d10d      	bne.n	80086d2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
 80086ba:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <HAL_TIM_PWM_MspInit+0x40>)
 80086bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086be:	4a09      	ldr	r2, [pc, #36]	; (80086e4 <HAL_TIM_PWM_MspInit+0x40>)
 80086c0:	f043 0302 	orr.w	r3, r3, #2
 80086c4:	6453      	str	r3, [r2, #68]	; 0x44
 80086c6:	4b07      	ldr	r3, [pc, #28]	; (80086e4 <HAL_TIM_PWM_MspInit+0x40>)
 80086c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	40010400 	.word	0x40010400
 80086e4:	40023800 	.word	0x40023800

080086e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b088      	sub	sp, #32
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086f0:	f107 030c 	add.w	r3, r7, #12
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	605a      	str	r2, [r3, #4]
 80086fa:	609a      	str	r2, [r3, #8]
 80086fc:	60da      	str	r2, [r3, #12]
 80086fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a12      	ldr	r2, [pc, #72]	; (8008750 <HAL_TIM_MspPostInit+0x68>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d11e      	bne.n	8008748 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800870a:	2300      	movs	r3, #0
 800870c:	60bb      	str	r3, [r7, #8]
 800870e:	4b11      	ldr	r3, [pc, #68]	; (8008754 <HAL_TIM_MspPostInit+0x6c>)
 8008710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008712:	4a10      	ldr	r2, [pc, #64]	; (8008754 <HAL_TIM_MspPostInit+0x6c>)
 8008714:	f043 0304 	orr.w	r3, r3, #4
 8008718:	6313      	str	r3, [r2, #48]	; 0x30
 800871a:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <HAL_TIM_MspPostInit+0x6c>)
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	f003 0304 	and.w	r3, r3, #4
 8008722:	60bb      	str	r3, [r7, #8]
 8008724:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_TMC_CURRSET_Pin|RGB_G_Pin|RGB_R_Pin|RGB_B_Pin;
 8008726:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800872a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800872c:	2302      	movs	r3, #2
 800872e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008730:	2300      	movs	r3, #0
 8008732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008734:	2300      	movs	r3, #0
 8008736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008738:	2303      	movs	r3, #3
 800873a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800873c:	f107 030c 	add.w	r3, r7, #12
 8008740:	4619      	mov	r1, r3
 8008742:	4805      	ldr	r0, [pc, #20]	; (8008758 <HAL_TIM_MspPostInit+0x70>)
 8008744:	f001 fab6 	bl	8009cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8008748:	bf00      	nop
 800874a:	3720      	adds	r7, #32
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	40010400 	.word	0x40010400
 8008754:	40023800 	.word	0x40023800
 8008758:	40020800 	.word	0x40020800

0800875c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08a      	sub	sp, #40	; 0x28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008764:	f107 0314 	add.w	r3, r7, #20
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	605a      	str	r2, [r3, #4]
 800876e:	609a      	str	r2, [r3, #8]
 8008770:	60da      	str	r2, [r3, #12]
 8008772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a19      	ldr	r2, [pc, #100]	; (80087e0 <HAL_UART_MspInit+0x84>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d12c      	bne.n	80087d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800877e:	2300      	movs	r3, #0
 8008780:	613b      	str	r3, [r7, #16]
 8008782:	4b18      	ldr	r3, [pc, #96]	; (80087e4 <HAL_UART_MspInit+0x88>)
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	4a17      	ldr	r2, [pc, #92]	; (80087e4 <HAL_UART_MspInit+0x88>)
 8008788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800878c:	6413      	str	r3, [r2, #64]	; 0x40
 800878e:	4b15      	ldr	r3, [pc, #84]	; (80087e4 <HAL_UART_MspInit+0x88>)
 8008790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008796:	613b      	str	r3, [r7, #16]
 8008798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800879a:	2300      	movs	r3, #0
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	4b11      	ldr	r3, [pc, #68]	; (80087e4 <HAL_UART_MspInit+0x88>)
 80087a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a2:	4a10      	ldr	r2, [pc, #64]	; (80087e4 <HAL_UART_MspInit+0x88>)
 80087a4:	f043 0304 	orr.w	r3, r3, #4
 80087a8:	6313      	str	r3, [r2, #48]	; 0x30
 80087aa:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <HAL_UART_MspInit+0x88>)
 80087ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80087b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80087ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087bc:	2302      	movs	r3, #2
 80087be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c0:	2300      	movs	r3, #0
 80087c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087c4:	2303      	movs	r3, #3
 80087c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80087c8:	2308      	movs	r3, #8
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087cc:	f107 0314 	add.w	r3, r7, #20
 80087d0:	4619      	mov	r1, r3
 80087d2:	4805      	ldr	r0, [pc, #20]	; (80087e8 <HAL_UART_MspInit+0x8c>)
 80087d4:	f001 fa6e 	bl	8009cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80087d8:	bf00      	nop
 80087da:	3728      	adds	r7, #40	; 0x28
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	40004c00 	.word	0x40004c00
 80087e4:	40023800 	.word	0x40023800
 80087e8:	40020800 	.word	0x40020800

080087ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80087f0:	e7fe      	b.n	80087f0 <NMI_Handler+0x4>

080087f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80087f2:	b480      	push	{r7}
 80087f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80087f6:	e7fe      	b.n	80087f6 <HardFault_Handler+0x4>

080087f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80087fc:	e7fe      	b.n	80087fc <MemManage_Handler+0x4>

080087fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80087fe:	b480      	push	{r7}
 8008800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008802:	e7fe      	b.n	8008802 <BusFault_Handler+0x4>

08008804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008808:	e7fe      	b.n	8008808 <UsageFault_Handler+0x4>

0800880a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800880a:	b480      	push	{r7}
 800880c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800880e:	bf00      	nop
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800881c:	bf00      	nop
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008826:	b480      	push	{r7}
 8008828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800882a:	bf00      	nop
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008838:	f000 f960 	bl	8008afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800883c:	bf00      	nop
 800883e:	bd80      	pop	{r7, pc}

08008840 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008844:	4802      	ldr	r0, [pc, #8]	; (8008850 <OTG_FS_IRQHandler+0x10>)
 8008846:	f001 fe97 	bl	800a578 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800884a:	bf00      	nop
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20001df4 	.word	0x20001df4

08008854 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
	return 1;
 8008858:	2301      	movs	r3, #1
}
 800885a:	4618      	mov	r0, r3
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <_kill>:

int _kill(int pid, int sig)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800886e:	f008 fe69 	bl	8011544 <__errno>
 8008872:	4603      	mov	r3, r0
 8008874:	2216      	movs	r2, #22
 8008876:	601a      	str	r2, [r3, #0]
	return -1;
 8008878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <_exit>:

void _exit (int status)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800888c:	f04f 31ff 	mov.w	r1, #4294967295
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7ff ffe7 	bl	8008864 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008896:	e7fe      	b.n	8008896 <_exit+0x12>

08008898 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088a4:	2300      	movs	r3, #0
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e00a      	b.n	80088c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80088aa:	f3af 8000 	nop.w
 80088ae:	4601      	mov	r1, r0
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	60ba      	str	r2, [r7, #8]
 80088b6:	b2ca      	uxtb	r2, r1
 80088b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	3301      	adds	r3, #1
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	dbf0      	blt.n	80088aa <_read+0x12>
	}

return len;
 80088c8:	687b      	ldr	r3, [r7, #4]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b086      	sub	sp, #24
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088de:	2300      	movs	r3, #0
 80088e0:	617b      	str	r3, [r7, #20]
 80088e2:	e009      	b.n	80088f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	1c5a      	adds	r2, r3, #1
 80088e8:	60ba      	str	r2, [r7, #8]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	3301      	adds	r3, #1
 80088f6:	617b      	str	r3, [r7, #20]
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	dbf1      	blt.n	80088e4 <_write+0x12>
	}
	return len;
 8008900:	687b      	ldr	r3, [r7, #4]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <_close>:

int _close(int file)
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
	return -1;
 8008912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008932:	605a      	str	r2, [r3, #4]
	return 0;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <_isatty>:

int _isatty(int file)
{
 8008942:	b480      	push	{r7}
 8008944:	b083      	sub	sp, #12
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
	return 1;
 800894a:	2301      	movs	r3, #1
}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
	return 0;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
	...

08008974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800897c:	4a14      	ldr	r2, [pc, #80]	; (80089d0 <_sbrk+0x5c>)
 800897e:	4b15      	ldr	r3, [pc, #84]	; (80089d4 <_sbrk+0x60>)
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008988:	4b13      	ldr	r3, [pc, #76]	; (80089d8 <_sbrk+0x64>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d102      	bne.n	8008996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008990:	4b11      	ldr	r3, [pc, #68]	; (80089d8 <_sbrk+0x64>)
 8008992:	4a12      	ldr	r2, [pc, #72]	; (80089dc <_sbrk+0x68>)
 8008994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008996:	4b10      	ldr	r3, [pc, #64]	; (80089d8 <_sbrk+0x64>)
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4413      	add	r3, r2
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d207      	bcs.n	80089b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80089a4:	f008 fdce 	bl	8011544 <__errno>
 80089a8:	4603      	mov	r3, r0
 80089aa:	220c      	movs	r2, #12
 80089ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80089ae:	f04f 33ff 	mov.w	r3, #4294967295
 80089b2:	e009      	b.n	80089c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80089b4:	4b08      	ldr	r3, [pc, #32]	; (80089d8 <_sbrk+0x64>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80089ba:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <_sbrk+0x64>)
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4413      	add	r3, r2
 80089c2:	4a05      	ldr	r2, [pc, #20]	; (80089d8 <_sbrk+0x64>)
 80089c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80089c6:	68fb      	ldr	r3, [r7, #12]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20020000 	.word	0x20020000
 80089d4:	00000400 	.word	0x00000400
 80089d8:	2000090c 	.word	0x2000090c
 80089dc:	20002530 	.word	0x20002530

080089e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80089e4:	4b06      	ldr	r3, [pc, #24]	; (8008a00 <SystemInit+0x20>)
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ea:	4a05      	ldr	r2, [pc, #20]	; (8008a00 <SystemInit+0x20>)
 80089ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80089f4:	bf00      	nop
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	e000ed00 	.word	0xe000ed00

08008a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008a08:	480d      	ldr	r0, [pc, #52]	; (8008a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008a0a:	490e      	ldr	r1, [pc, #56]	; (8008a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008a0c:	4a0e      	ldr	r2, [pc, #56]	; (8008a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a10:	e002      	b.n	8008a18 <LoopCopyDataInit>

08008a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a16:	3304      	adds	r3, #4

08008a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a1c:	d3f9      	bcc.n	8008a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a1e:	4a0b      	ldr	r2, [pc, #44]	; (8008a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008a20:	4c0b      	ldr	r4, [pc, #44]	; (8008a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a24:	e001      	b.n	8008a2a <LoopFillZerobss>

08008a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a28:	3204      	adds	r2, #4

08008a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a2c:	d3fb      	bcc.n	8008a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008a2e:	f7ff ffd7 	bl	80089e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008a32:	f008 ff57 	bl	80118e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a36:	f7ff f957 	bl	8007ce8 <main>
  bx  lr    
 8008a3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008a44:	200006a4 	.word	0x200006a4
  ldr r2, =_sidata
 8008a48:	080173d0 	.word	0x080173d0
  ldr r2, =_sbss
 8008a4c:	200006a8 	.word	0x200006a8
  ldr r4, =_ebss
 8008a50:	20002530 	.word	0x20002530

08008a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a54:	e7fe      	b.n	8008a54 <ADC_IRQHandler>
	...

08008a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008a5c:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <HAL_Init+0x40>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a0d      	ldr	r2, [pc, #52]	; (8008a98 <HAL_Init+0x40>)
 8008a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008a68:	4b0b      	ldr	r3, [pc, #44]	; (8008a98 <HAL_Init+0x40>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a0a      	ldr	r2, [pc, #40]	; (8008a98 <HAL_Init+0x40>)
 8008a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008a74:	4b08      	ldr	r3, [pc, #32]	; (8008a98 <HAL_Init+0x40>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a07      	ldr	r2, [pc, #28]	; (8008a98 <HAL_Init+0x40>)
 8008a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a80:	2003      	movs	r0, #3
 8008a82:	f001 f8d1 	bl	8009c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a86:	200f      	movs	r0, #15
 8008a88:	f000 f808 	bl	8008a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008a8c:	f7ff fc92 	bl	80083b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	40023c00 	.word	0x40023c00

08008a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008aa4:	4b12      	ldr	r3, [pc, #72]	; (8008af0 <HAL_InitTick+0x54>)
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	4b12      	ldr	r3, [pc, #72]	; (8008af4 <HAL_InitTick+0x58>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	4619      	mov	r1, r3
 8008aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aba:	4618      	mov	r0, r3
 8008abc:	f001 f8ed 	bl	8009c9a <HAL_SYSTICK_Config>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e00e      	b.n	8008ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b0f      	cmp	r3, #15
 8008ace:	d80a      	bhi.n	8008ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad8:	f001 f8b1 	bl	8009c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008adc:	4a06      	ldr	r2, [pc, #24]	; (8008af8 <HAL_InitTick+0x5c>)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e000      	b.n	8008ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	200003d4 	.word	0x200003d4
 8008af4:	200003dc 	.word	0x200003dc
 8008af8:	200003d8 	.word	0x200003d8

08008afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008b00:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <HAL_IncTick+0x20>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <HAL_IncTick+0x24>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	4a04      	ldr	r2, [pc, #16]	; (8008b20 <HAL_IncTick+0x24>)
 8008b0e:	6013      	str	r3, [r2, #0]
}
 8008b10:	bf00      	nop
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	200003dc 	.word	0x200003dc
 8008b20:	20000910 	.word	0x20000910

08008b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  return uwTick;
 8008b28:	4b03      	ldr	r3, [pc, #12]	; (8008b38 <HAL_GetTick+0x14>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000910 	.word	0x20000910

08008b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b44:	f7ff ffee 	bl	8008b24 <HAL_GetTick>
 8008b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b54:	d005      	beq.n	8008b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008b56:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <HAL_Delay+0x44>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008b62:	bf00      	nop
 8008b64:	f7ff ffde 	bl	8008b24 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d8f7      	bhi.n	8008b64 <HAL_Delay+0x28>
  {
  }
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	200003dc 	.word	0x200003dc

08008b84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e033      	b.n	8008c02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7ff fc2e 	bl	8008404 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bba:	f003 0310 	and.w	r3, r3, #16
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d118      	bne.n	8008bf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008bca:	f023 0302 	bic.w	r3, r3, #2
 8008bce:	f043 0202 	orr.w	r2, r3, #2
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 faa4 	bl	8009124 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	f023 0303 	bic.w	r3, r3, #3
 8008bea:	f043 0201 	orr.w	r2, r3, #1
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8008bf2:	e001      	b.n	8008bf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d101      	bne.n	8008c26 <HAL_ADC_Start+0x1a>
 8008c22:	2302      	movs	r3, #2
 8008c24:	e0b2      	b.n	8008d8c <HAL_ADC_Start+0x180>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d018      	beq.n	8008c6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689a      	ldr	r2, [r3, #8]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008c4c:	4b52      	ldr	r3, [pc, #328]	; (8008d98 <HAL_ADC_Start+0x18c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a52      	ldr	r2, [pc, #328]	; (8008d9c <HAL_ADC_Start+0x190>)
 8008c52:	fba2 2303 	umull	r2, r3, r2, r3
 8008c56:	0c9a      	lsrs	r2, r3, #18
 8008c58:	4613      	mov	r3, r2
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	4413      	add	r3, r2
 8008c5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008c60:	e002      	b.n	8008c68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1f9      	bne.n	8008c62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d17a      	bne.n	8008d72 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008c84:	f023 0301 	bic.w	r3, r3, #1
 8008c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d007      	beq.n	8008cae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008ca6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cba:	d106      	bne.n	8008cca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc0:	f023 0206 	bic.w	r2, r3, #6
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	645a      	str	r2, [r3, #68]	; 0x44
 8008cc8:	e002      	b.n	8008cd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008cd8:	4b31      	ldr	r3, [pc, #196]	; (8008da0 <HAL_ADC_Start+0x194>)
 8008cda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008ce4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f003 031f 	and.w	r3, r3, #31
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d12a      	bne.n	8008d48 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a2b      	ldr	r2, [pc, #172]	; (8008da4 <HAL_ADC_Start+0x198>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d015      	beq.n	8008d28 <HAL_ADC_Start+0x11c>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a29      	ldr	r2, [pc, #164]	; (8008da8 <HAL_ADC_Start+0x19c>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d105      	bne.n	8008d12 <HAL_ADC_Start+0x106>
 8008d06:	4b26      	ldr	r3, [pc, #152]	; (8008da0 <HAL_ADC_Start+0x194>)
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f003 031f 	and.w	r3, r3, #31
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a25      	ldr	r2, [pc, #148]	; (8008dac <HAL_ADC_Start+0x1a0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d136      	bne.n	8008d8a <HAL_ADC_Start+0x17e>
 8008d1c:	4b20      	ldr	r3, [pc, #128]	; (8008da0 <HAL_ADC_Start+0x194>)
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f003 0310 	and.w	r3, r3, #16
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d130      	bne.n	8008d8a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d129      	bne.n	8008d8a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008d44:	609a      	str	r2, [r3, #8]
 8008d46:	e020      	b.n	8008d8a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a15      	ldr	r2, [pc, #84]	; (8008da4 <HAL_ADC_Start+0x198>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d11b      	bne.n	8008d8a <HAL_ADC_Start+0x17e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d114      	bne.n	8008d8a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689a      	ldr	r2, [r3, #8]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008d6e:	609a      	str	r2, [r3, #8]
 8008d70:	e00b      	b.n	8008d8a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d76:	f043 0210 	orr.w	r2, r3, #16
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d82:	f043 0201 	orr.w	r2, r3, #1
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	200003d4 	.word	0x200003d4
 8008d9c:	431bde83 	.word	0x431bde83
 8008da0:	40012300 	.word	0x40012300
 8008da4:	40012000 	.word	0x40012000
 8008da8:	40012100 	.word	0x40012100
 8008dac:	40012200 	.word	0x40012200

08008db0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dcc:	d113      	bne.n	8008df6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ddc:	d10b      	bne.n	8008df6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f043 0220 	orr.w	r2, r3, #32
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e063      	b.n	8008ebe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008df6:	f7ff fe95 	bl	8008b24 <HAL_GetTick>
 8008dfa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008dfc:	e021      	b.n	8008e42 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d01d      	beq.n	8008e42 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d007      	beq.n	8008e1c <HAL_ADC_PollForConversion+0x6c>
 8008e0c:	f7ff fe8a 	bl	8008b24 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d212      	bcs.n	8008e42 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d00b      	beq.n	8008e42 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	f043 0204 	orr.w	r2, r3, #4
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e03d      	b.n	8008ebe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d1d6      	bne.n	8008dfe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0212 	mvn.w	r2, #18
 8008e58:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d123      	bne.n	8008ebc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d11f      	bne.n	8008ebc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d006      	beq.n	8008e98 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d111      	bne.n	8008ebc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d105      	bne.n	8008ebc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb4:	f043 0201 	orr.w	r2, r3, #1
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d101      	bne.n	8008efc <HAL_ADC_ConfigChannel+0x1c>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e105      	b.n	8009108 <HAL_ADC_ConfigChannel+0x228>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b09      	cmp	r3, #9
 8008f0a:	d925      	bls.n	8008f58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68d9      	ldr	r1, [r3, #12]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	461a      	mov	r2, r3
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	005b      	lsls	r3, r3, #1
 8008f1e:	4413      	add	r3, r2
 8008f20:	3b1e      	subs	r3, #30
 8008f22:	2207      	movs	r2, #7
 8008f24:	fa02 f303 	lsl.w	r3, r2, r3
 8008f28:	43da      	mvns	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	400a      	ands	r2, r1
 8008f30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68d9      	ldr	r1, [r3, #12]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	4618      	mov	r0, r3
 8008f44:	4603      	mov	r3, r0
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	4403      	add	r3, r0
 8008f4a:	3b1e      	subs	r3, #30
 8008f4c:	409a      	lsls	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	60da      	str	r2, [r3, #12]
 8008f56:	e022      	b.n	8008f9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6919      	ldr	r1, [r3, #16]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	461a      	mov	r2, r3
 8008f66:	4613      	mov	r3, r2
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	4413      	add	r3, r2
 8008f6c:	2207      	movs	r2, #7
 8008f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f72:	43da      	mvns	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	400a      	ands	r2, r1
 8008f7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6919      	ldr	r1, [r3, #16]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	689a      	ldr	r2, [r3, #8]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	4603      	mov	r3, r0
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	4403      	add	r3, r0
 8008f94:	409a      	lsls	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2b06      	cmp	r3, #6
 8008fa4:	d824      	bhi.n	8008ff0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	3b05      	subs	r3, #5
 8008fb8:	221f      	movs	r2, #31
 8008fba:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbe:	43da      	mvns	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	400a      	ands	r2, r1
 8008fc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	3b05      	subs	r3, #5
 8008fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	635a      	str	r2, [r3, #52]	; 0x34
 8008fee:	e04c      	b.n	800908a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	2b0c      	cmp	r3, #12
 8008ff6:	d824      	bhi.n	8009042 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	3b23      	subs	r3, #35	; 0x23
 800900a:	221f      	movs	r2, #31
 800900c:	fa02 f303 	lsl.w	r3, r2, r3
 8009010:	43da      	mvns	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	400a      	ands	r2, r1
 8009018:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	b29b      	uxth	r3, r3
 8009026:	4618      	mov	r0, r3
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	4613      	mov	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	3b23      	subs	r3, #35	; 0x23
 8009034:	fa00 f203 	lsl.w	r2, r0, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	631a      	str	r2, [r3, #48]	; 0x30
 8009040:	e023      	b.n	800908a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	4613      	mov	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	3b41      	subs	r3, #65	; 0x41
 8009054:	221f      	movs	r2, #31
 8009056:	fa02 f303 	lsl.w	r3, r2, r3
 800905a:	43da      	mvns	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	400a      	ands	r2, r1
 8009062:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	4618      	mov	r0, r3
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	4613      	mov	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	3b41      	subs	r3, #65	; 0x41
 800907e:	fa00 f203 	lsl.w	r2, r0, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800908a:	4b22      	ldr	r3, [pc, #136]	; (8009114 <HAL_ADC_ConfigChannel+0x234>)
 800908c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a21      	ldr	r2, [pc, #132]	; (8009118 <HAL_ADC_ConfigChannel+0x238>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d109      	bne.n	80090ac <HAL_ADC_ConfigChannel+0x1cc>
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b12      	cmp	r3, #18
 800909e:	d105      	bne.n	80090ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a19      	ldr	r2, [pc, #100]	; (8009118 <HAL_ADC_ConfigChannel+0x238>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d123      	bne.n	80090fe <HAL_ADC_ConfigChannel+0x21e>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b10      	cmp	r3, #16
 80090bc:	d003      	beq.n	80090c6 <HAL_ADC_ConfigChannel+0x1e6>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b11      	cmp	r3, #17
 80090c4:	d11b      	bne.n	80090fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b10      	cmp	r3, #16
 80090d8:	d111      	bne.n	80090fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80090da:	4b10      	ldr	r3, [pc, #64]	; (800911c <HAL_ADC_ConfigChannel+0x23c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a10      	ldr	r2, [pc, #64]	; (8009120 <HAL_ADC_ConfigChannel+0x240>)
 80090e0:	fba2 2303 	umull	r2, r3, r2, r3
 80090e4:	0c9a      	lsrs	r2, r3, #18
 80090e6:	4613      	mov	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80090f0:	e002      	b.n	80090f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1f9      	bne.n	80090f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	40012300 	.word	0x40012300
 8009118:	40012000 	.word	0x40012000
 800911c:	200003d4 	.word	0x200003d4
 8009120:	431bde83 	.word	0x431bde83

08009124 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800912c:	4b79      	ldr	r3, [pc, #484]	; (8009314 <ADC_Init+0x1f0>)
 800912e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	431a      	orrs	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009158:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6859      	ldr	r1, [r3, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	021a      	lsls	r2, r3, #8
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800917c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6859      	ldr	r1, [r3, #4]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800919e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6899      	ldr	r1, [r3, #8]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b6:	4a58      	ldr	r2, [pc, #352]	; (8009318 <ADC_Init+0x1f4>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d022      	beq.n	8009202 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	689a      	ldr	r2, [r3, #8]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80091ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6899      	ldr	r1, [r3, #8]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80091ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6899      	ldr	r1, [r3, #8]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	609a      	str	r2, [r3, #8]
 8009200:	e00f      	b.n	8009222 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009210:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689a      	ldr	r2, [r3, #8]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009220:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0202 	bic.w	r2, r2, #2
 8009230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6899      	ldr	r1, [r3, #8]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	7e1b      	ldrb	r3, [r3, #24]
 800923c:	005a      	lsls	r2, r3, #1
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d01b      	beq.n	8009288 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800925e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800926e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6859      	ldr	r1, [r3, #4]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927a:	3b01      	subs	r3, #1
 800927c:	035a      	lsls	r2, r3, #13
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	605a      	str	r2, [r3, #4]
 8009286:	e007      	b.n	8009298 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009296:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80092a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	051a      	lsls	r2, r3, #20
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80092cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6899      	ldr	r1, [r3, #8]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092da:	025a      	lsls	r2, r3, #9
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689a      	ldr	r2, [r3, #8]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6899      	ldr	r1, [r3, #8]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	029a      	lsls	r2, r3, #10
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	609a      	str	r2, [r3, #8]
}
 8009308:	bf00      	nop
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	40012300 	.word	0x40012300
 8009318:	0f000001 	.word	0x0f000001

0800931c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d101      	bne.n	800932e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e0ed      	b.n	800950a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d102      	bne.n	8009340 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7ff f8a6 	bl	800848c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0201 	orr.w	r2, r2, #1
 800934e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009350:	f7ff fbe8 	bl	8008b24 <HAL_GetTick>
 8009354:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009356:	e012      	b.n	800937e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009358:	f7ff fbe4 	bl	8008b24 <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	2b0a      	cmp	r3, #10
 8009364:	d90b      	bls.n	800937e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2205      	movs	r2, #5
 8009376:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e0c5      	b.n	800950a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0e5      	beq.n	8009358 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f022 0202 	bic.w	r2, r2, #2
 800939a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800939c:	f7ff fbc2 	bl	8008b24 <HAL_GetTick>
 80093a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80093a2:	e012      	b.n	80093ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80093a4:	f7ff fbbe 	bl	8008b24 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b0a      	cmp	r3, #10
 80093b0:	d90b      	bls.n	80093ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2205      	movs	r2, #5
 80093c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e09f      	b.n	800950a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e5      	bne.n	80093a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7e1b      	ldrb	r3, [r3, #24]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d108      	bne.n	80093f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80093ee:	601a      	str	r2, [r3, #0]
 80093f0:	e007      	b.n	8009402 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009400:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	7e5b      	ldrb	r3, [r3, #25]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d108      	bne.n	800941c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	e007      	b.n	800942c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800942a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	7e9b      	ldrb	r3, [r3, #26]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d108      	bne.n	8009446 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0220 	orr.w	r2, r2, #32
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	e007      	b.n	8009456 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 0220 	bic.w	r2, r2, #32
 8009454:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	7edb      	ldrb	r3, [r3, #27]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d108      	bne.n	8009470 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0210 	bic.w	r2, r2, #16
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	e007      	b.n	8009480 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f042 0210 	orr.w	r2, r2, #16
 800947e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7f1b      	ldrb	r3, [r3, #28]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d108      	bne.n	800949a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0208 	orr.w	r2, r2, #8
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	e007      	b.n	80094aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f022 0208 	bic.w	r2, r2, #8
 80094a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	7f5b      	ldrb	r3, [r3, #29]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d108      	bne.n	80094c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f042 0204 	orr.w	r2, r2, #4
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	e007      	b.n	80094d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 0204 	bic.w	r2, r2, #4
 80094d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	ea42 0103 	orr.w	r1, r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	1e5a      	subs	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800952a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800952c:	7cfb      	ldrb	r3, [r7, #19]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d003      	beq.n	800953a <HAL_CAN_ConfigFilter+0x26>
 8009532:	7cfb      	ldrb	r3, [r7, #19]
 8009534:	2b02      	cmp	r3, #2
 8009536:	f040 80be 	bne.w	80096b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800953a:	4b65      	ldr	r3, [pc, #404]	; (80096d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800953c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009544:	f043 0201 	orr.w	r2, r3, #1
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009554:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	021b      	lsls	r3, r3, #8
 800956a:	431a      	orrs	r2, r3
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	f003 031f 	and.w	r3, r3, #31
 800957a:	2201      	movs	r2, #1
 800957c:	fa02 f303 	lsl.w	r3, r2, r3
 8009580:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	43db      	mvns	r3, r3
 800958c:	401a      	ands	r2, r3
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d123      	bne.n	80095e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	43db      	mvns	r3, r3
 80095a6:	401a      	ands	r2, r3
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80095be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	3248      	adds	r2, #72	; 0x48
 80095c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80095d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80095da:	6979      	ldr	r1, [r7, #20]
 80095dc:	3348      	adds	r3, #72	; 0x48
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	440b      	add	r3, r1
 80095e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d122      	bne.n	8009632 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	431a      	orrs	r2, r3
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800960c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	3248      	adds	r2, #72	; 0x48
 8009612:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009626:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009628:	6979      	ldr	r1, [r7, #20]
 800962a:	3348      	adds	r3, #72	; 0x48
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	440b      	add	r3, r1
 8009630:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	43db      	mvns	r3, r3
 8009644:	401a      	ands	r2, r3
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800964c:	e007      	b.n	800965e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	431a      	orrs	r2, r3
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d109      	bne.n	800967a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	43db      	mvns	r3, r3
 8009670:	401a      	ands	r2, r3
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009678:	e007      	b.n	800968a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	431a      	orrs	r2, r3
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d107      	bne.n	80096a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	431a      	orrs	r2, r3
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096a8:	f023 0201 	bic.w	r2, r3, #1
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	e006      	b.n	80096c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
  }
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	371c      	adds	r7, #28
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	40006400 	.word	0x40006400

080096d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d12e      	bne.n	8009746 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0201 	bic.w	r2, r2, #1
 80096fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009700:	f7ff fa10 	bl	8008b24 <HAL_GetTick>
 8009704:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009706:	e012      	b.n	800972e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009708:	f7ff fa0c 	bl	8008b24 <HAL_GetTick>
 800970c:	4602      	mov	r2, r0
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	2b0a      	cmp	r3, #10
 8009714:	d90b      	bls.n	800972e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2205      	movs	r2, #5
 8009726:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e012      	b.n	8009754 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1e5      	bne.n	8009708 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	e006      	b.n	8009754 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
  }
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b02      	cmp	r3, #2
 800976e:	d133      	bne.n	80097d8 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f042 0201 	orr.w	r2, r2, #1
 800977e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009780:	f7ff f9d0 	bl	8008b24 <HAL_GetTick>
 8009784:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009786:	e012      	b.n	80097ae <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009788:	f7ff f9cc 	bl	8008b24 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	2b0a      	cmp	r3, #10
 8009794:	d90b      	bls.n	80097ae <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2205      	movs	r2, #5
 80097a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e01b      	b.n	80097e6 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f003 0301 	and.w	r3, r3, #1
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0e5      	beq.n	8009788 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f022 0202 	bic.w	r2, r2, #2
 80097ca:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	e006      	b.n	80097e6 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
  }
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b089      	sub	sp, #36	; 0x24
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
 80097fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009802:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800980c:	7ffb      	ldrb	r3, [r7, #31]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d003      	beq.n	800981a <HAL_CAN_AddTxMessage+0x2c>
 8009812:	7ffb      	ldrb	r3, [r7, #31]
 8009814:	2b02      	cmp	r3, #2
 8009816:	f040 80b8 	bne.w	800998a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800982a:	2b00      	cmp	r3, #0
 800982c:	d105      	bne.n	800983a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 80a0 	beq.w	800997a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	0e1b      	lsrs	r3, r3, #24
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d907      	bls.n	800985a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e09e      	b.n	8009998 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800985a:	2201      	movs	r2, #1
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	409a      	lsls	r2, r3
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10d      	bne.n	8009888 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009876:	68f9      	ldr	r1, [r7, #12]
 8009878:	6809      	ldr	r1, [r1, #0]
 800987a:	431a      	orrs	r2, r3
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	3318      	adds	r3, #24
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	440b      	add	r3, r1
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	e00f      	b.n	80098a8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009892:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009898:	68f9      	ldr	r1, [r7, #12]
 800989a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800989c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	3318      	adds	r3, #24
 80098a2:	011b      	lsls	r3, r3, #4
 80098a4:	440b      	add	r3, r1
 80098a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6819      	ldr	r1, [r3, #0]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	691a      	ldr	r2, [r3, #16]
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	3318      	adds	r3, #24
 80098b4:	011b      	lsls	r3, r3, #4
 80098b6:	440b      	add	r3, r1
 80098b8:	3304      	adds	r3, #4
 80098ba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	7d1b      	ldrb	r3, [r3, #20]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d111      	bne.n	80098e8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	3318      	adds	r3, #24
 80098cc:	011b      	lsls	r3, r3, #4
 80098ce:	4413      	add	r3, r2
 80098d0:	3304      	adds	r3, #4
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	6811      	ldr	r1, [r2, #0]
 80098d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	3318      	adds	r3, #24
 80098e0:	011b      	lsls	r3, r3, #4
 80098e2:	440b      	add	r3, r1
 80098e4:	3304      	adds	r3, #4
 80098e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	3307      	adds	r3, #7
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	061a      	lsls	r2, r3, #24
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3306      	adds	r3, #6
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	041b      	lsls	r3, r3, #16
 80098f8:	431a      	orrs	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	3305      	adds	r3, #5
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	4313      	orrs	r3, r2
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	3204      	adds	r2, #4
 8009908:	7812      	ldrb	r2, [r2, #0]
 800990a:	4610      	mov	r0, r2
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	6811      	ldr	r1, [r2, #0]
 8009910:	ea43 0200 	orr.w	r2, r3, r0
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	011b      	lsls	r3, r3, #4
 8009918:	440b      	add	r3, r1
 800991a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800991e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	3303      	adds	r3, #3
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	061a      	lsls	r2, r3, #24
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3302      	adds	r3, #2
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	041b      	lsls	r3, r3, #16
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	3301      	adds	r3, #1
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	021b      	lsls	r3, r3, #8
 800993a:	4313      	orrs	r3, r2
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	7812      	ldrb	r2, [r2, #0]
 8009940:	4610      	mov	r0, r2
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	6811      	ldr	r1, [r2, #0]
 8009946:	ea43 0200 	orr.w	r2, r3, r0
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	440b      	add	r3, r1
 8009950:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009954:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	3318      	adds	r3, #24
 800995e:	011b      	lsls	r3, r3, #4
 8009960:	4413      	add	r3, r2
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	6811      	ldr	r1, [r2, #0]
 8009968:	f043 0201 	orr.w	r2, r3, #1
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	3318      	adds	r3, #24
 8009970:	011b      	lsls	r3, r3, #4
 8009972:	440b      	add	r3, r1
 8009974:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	e00e      	b.n	8009998 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e006      	b.n	8009998 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
  }
}
 8009998:	4618      	mov	r0, r3
 800999a:	3724      	adds	r7, #36	; 0x24
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80099ac:	2300      	movs	r3, #0
 80099ae:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099b6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80099b8:	7afb      	ldrb	r3, [r7, #11]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d002      	beq.n	80099c4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80099be:	7afb      	ldrb	r3, [r7, #11]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d11d      	bne.n	8009a00 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3301      	adds	r3, #1
 80099d6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3301      	adds	r3, #1
 80099ea:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3301      	adds	r3, #1
 80099fe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8009a00:	68fb      	ldr	r3, [r7, #12]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b085      	sub	sp, #20
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a1e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d002      	beq.n	8009a2c <HAL_CAN_ActivateNotification+0x1e>
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d109      	bne.n	8009a40 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6959      	ldr	r1, [r3, #20]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	e006      	b.n	8009a4e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
  }
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
	...

08009a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a6c:	4b0c      	ldr	r3, [pc, #48]	; (8009aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009a78:	4013      	ands	r3, r2
 8009a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a8e:	4a04      	ldr	r2, [pc, #16]	; (8009aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	60d3      	str	r3, [r2, #12]
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	e000ed00 	.word	0xe000ed00

08009aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009aa8:	4b04      	ldr	r3, [pc, #16]	; (8009abc <__NVIC_GetPriorityGrouping+0x18>)
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	0a1b      	lsrs	r3, r3, #8
 8009aae:	f003 0307 	and.w	r3, r3, #7
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	e000ed00 	.word	0xe000ed00

08009ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	db0b      	blt.n	8009aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	f003 021f 	and.w	r2, r3, #31
 8009ad8:	4907      	ldr	r1, [pc, #28]	; (8009af8 <__NVIC_EnableIRQ+0x38>)
 8009ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ade:	095b      	lsrs	r3, r3, #5
 8009ae0:	2001      	movs	r0, #1
 8009ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8009ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009aea:	bf00      	nop
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	e000e100 	.word	0xe000e100

08009afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	6039      	str	r1, [r7, #0]
 8009b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	db0a      	blt.n	8009b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	490c      	ldr	r1, [pc, #48]	; (8009b48 <__NVIC_SetPriority+0x4c>)
 8009b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b1a:	0112      	lsls	r2, r2, #4
 8009b1c:	b2d2      	uxtb	r2, r2
 8009b1e:	440b      	add	r3, r1
 8009b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009b24:	e00a      	b.n	8009b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	4908      	ldr	r1, [pc, #32]	; (8009b4c <__NVIC_SetPriority+0x50>)
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	f003 030f 	and.w	r3, r3, #15
 8009b32:	3b04      	subs	r3, #4
 8009b34:	0112      	lsls	r2, r2, #4
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	440b      	add	r3, r1
 8009b3a:	761a      	strb	r2, [r3, #24]
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	e000e100 	.word	0xe000e100
 8009b4c:	e000ed00 	.word	0xe000ed00

08009b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b089      	sub	sp, #36	; 0x24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f003 0307 	and.w	r3, r3, #7
 8009b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	f1c3 0307 	rsb	r3, r3, #7
 8009b6a:	2b04      	cmp	r3, #4
 8009b6c:	bf28      	it	cs
 8009b6e:	2304      	movcs	r3, #4
 8009b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	3304      	adds	r3, #4
 8009b76:	2b06      	cmp	r3, #6
 8009b78:	d902      	bls.n	8009b80 <NVIC_EncodePriority+0x30>
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	3b03      	subs	r3, #3
 8009b7e:	e000      	b.n	8009b82 <NVIC_EncodePriority+0x32>
 8009b80:	2300      	movs	r3, #0
 8009b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b84:	f04f 32ff 	mov.w	r2, #4294967295
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8e:	43da      	mvns	r2, r3
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	401a      	ands	r2, r3
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b98:	f04f 31ff 	mov.w	r1, #4294967295
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba2:	43d9      	mvns	r1, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ba8:	4313      	orrs	r3, r2
         );
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3724      	adds	r7, #36	; 0x24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
	...

08009bb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009bbc:	f3bf 8f4f 	dsb	sy
}
 8009bc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009bc2:	4b06      	ldr	r3, [pc, #24]	; (8009bdc <__NVIC_SystemReset+0x24>)
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009bca:	4904      	ldr	r1, [pc, #16]	; (8009bdc <__NVIC_SystemReset+0x24>)
 8009bcc:	4b04      	ldr	r3, [pc, #16]	; (8009be0 <__NVIC_SystemReset+0x28>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009bd2:	f3bf 8f4f 	dsb	sy
}
 8009bd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009bd8:	bf00      	nop
 8009bda:	e7fd      	b.n	8009bd8 <__NVIC_SystemReset+0x20>
 8009bdc:	e000ed00 	.word	0xe000ed00
 8009be0:	05fa0004 	.word	0x05fa0004

08009be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bf4:	d301      	bcc.n	8009bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e00f      	b.n	8009c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009bfa:	4a0a      	ldr	r2, [pc, #40]	; (8009c24 <SysTick_Config+0x40>)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009c02:	210f      	movs	r1, #15
 8009c04:	f04f 30ff 	mov.w	r0, #4294967295
 8009c08:	f7ff ff78 	bl	8009afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <SysTick_Config+0x40>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009c12:	4b04      	ldr	r3, [pc, #16]	; (8009c24 <SysTick_Config+0x40>)
 8009c14:	2207      	movs	r2, #7
 8009c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	e000e010 	.word	0xe000e010

08009c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff ff13 	bl	8009a5c <__NVIC_SetPriorityGrouping>
}
 8009c36:	bf00      	nop
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b086      	sub	sp, #24
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	4603      	mov	r3, r0
 8009c46:	60b9      	str	r1, [r7, #8]
 8009c48:	607a      	str	r2, [r7, #4]
 8009c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009c50:	f7ff ff28 	bl	8009aa4 <__NVIC_GetPriorityGrouping>
 8009c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	68b9      	ldr	r1, [r7, #8]
 8009c5a:	6978      	ldr	r0, [r7, #20]
 8009c5c:	f7ff ff78 	bl	8009b50 <NVIC_EncodePriority>
 8009c60:	4602      	mov	r2, r0
 8009c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c66:	4611      	mov	r1, r2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff ff47 	bl	8009afc <__NVIC_SetPriority>
}
 8009c6e:	bf00      	nop
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7ff ff1b 	bl	8009ac0 <__NVIC_EnableIRQ>
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009c96:	f7ff ff8f 	bl	8009bb8 <__NVIC_SystemReset>

08009c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff ff9e 	bl	8009be4 <SysTick_Config>
 8009ca8:	4603      	mov	r3, r0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b089      	sub	sp, #36	; 0x24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009cca:	2300      	movs	r3, #0
 8009ccc:	61fb      	str	r3, [r7, #28]
 8009cce:	e16b      	b.n	8009fa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	f040 815a 	bne.w	8009fa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	f003 0303 	and.w	r3, r3, #3
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d005      	beq.n	8009d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d130      	bne.n	8009d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	2203      	movs	r2, #3
 8009d12:	fa02 f303 	lsl.w	r3, r2, r3
 8009d16:	43db      	mvns	r3, r3
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	68da      	ldr	r2, [r3, #12]
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	fa02 f303 	lsl.w	r3, r2, r3
 8009d44:	43db      	mvns	r3, r3
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	4013      	ands	r3, r2
 8009d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	091b      	lsrs	r3, r3, #4
 8009d52:	f003 0201 	and.w	r2, r3, #1
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5c:	69ba      	ldr	r2, [r7, #24]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	69ba      	ldr	r2, [r7, #24]
 8009d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f003 0303 	and.w	r3, r3, #3
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d017      	beq.n	8009da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	2203      	movs	r2, #3
 8009d80:	fa02 f303 	lsl.w	r3, r2, r3
 8009d84:	43db      	mvns	r3, r3
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	4013      	ands	r3, r2
 8009d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	689a      	ldr	r2, [r3, #8]
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	fa02 f303 	lsl.w	r3, r2, r3
 8009d98:	69ba      	ldr	r2, [r7, #24]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	69ba      	ldr	r2, [r7, #24]
 8009da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f003 0303 	and.w	r3, r3, #3
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d123      	bne.n	8009df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	08da      	lsrs	r2, r3, #3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3208      	adds	r2, #8
 8009db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	220f      	movs	r2, #15
 8009dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dcc:	43db      	mvns	r3, r3
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	691a      	ldr	r2, [r3, #16]
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	f003 0307 	and.w	r3, r3, #7
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	fa02 f303 	lsl.w	r3, r2, r3
 8009de4:	69ba      	ldr	r2, [r7, #24]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	08da      	lsrs	r2, r3, #3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3208      	adds	r2, #8
 8009df2:	69b9      	ldr	r1, [r7, #24]
 8009df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	2203      	movs	r2, #3
 8009e04:	fa02 f303 	lsl.w	r3, r2, r3
 8009e08:	43db      	mvns	r3, r3
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	f003 0203 	and.w	r2, r3, #3
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e20:	69ba      	ldr	r2, [r7, #24]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	69ba      	ldr	r2, [r7, #24]
 8009e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f000 80b4 	beq.w	8009fa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60fb      	str	r3, [r7, #12]
 8009e3e:	4b60      	ldr	r3, [pc, #384]	; (8009fc0 <HAL_GPIO_Init+0x30c>)
 8009e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e42:	4a5f      	ldr	r2, [pc, #380]	; (8009fc0 <HAL_GPIO_Init+0x30c>)
 8009e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e48:	6453      	str	r3, [r2, #68]	; 0x44
 8009e4a:	4b5d      	ldr	r3, [pc, #372]	; (8009fc0 <HAL_GPIO_Init+0x30c>)
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009e56:	4a5b      	ldr	r2, [pc, #364]	; (8009fc4 <HAL_GPIO_Init+0x310>)
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	089b      	lsrs	r3, r3, #2
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	f003 0303 	and.w	r3, r3, #3
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	220f      	movs	r2, #15
 8009e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e72:	43db      	mvns	r3, r3
 8009e74:	69ba      	ldr	r2, [r7, #24]
 8009e76:	4013      	ands	r3, r2
 8009e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a52      	ldr	r2, [pc, #328]	; (8009fc8 <HAL_GPIO_Init+0x314>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d02b      	beq.n	8009eda <HAL_GPIO_Init+0x226>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a51      	ldr	r2, [pc, #324]	; (8009fcc <HAL_GPIO_Init+0x318>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d025      	beq.n	8009ed6 <HAL_GPIO_Init+0x222>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a50      	ldr	r2, [pc, #320]	; (8009fd0 <HAL_GPIO_Init+0x31c>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d01f      	beq.n	8009ed2 <HAL_GPIO_Init+0x21e>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a4f      	ldr	r2, [pc, #316]	; (8009fd4 <HAL_GPIO_Init+0x320>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d019      	beq.n	8009ece <HAL_GPIO_Init+0x21a>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a4e      	ldr	r2, [pc, #312]	; (8009fd8 <HAL_GPIO_Init+0x324>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d013      	beq.n	8009eca <HAL_GPIO_Init+0x216>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a4d      	ldr	r2, [pc, #308]	; (8009fdc <HAL_GPIO_Init+0x328>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d00d      	beq.n	8009ec6 <HAL_GPIO_Init+0x212>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a4c      	ldr	r2, [pc, #304]	; (8009fe0 <HAL_GPIO_Init+0x32c>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d007      	beq.n	8009ec2 <HAL_GPIO_Init+0x20e>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a4b      	ldr	r2, [pc, #300]	; (8009fe4 <HAL_GPIO_Init+0x330>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d101      	bne.n	8009ebe <HAL_GPIO_Init+0x20a>
 8009eba:	2307      	movs	r3, #7
 8009ebc:	e00e      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ebe:	2308      	movs	r3, #8
 8009ec0:	e00c      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ec2:	2306      	movs	r3, #6
 8009ec4:	e00a      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ec6:	2305      	movs	r3, #5
 8009ec8:	e008      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009eca:	2304      	movs	r3, #4
 8009ecc:	e006      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e004      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e002      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009eda:	2300      	movs	r3, #0
 8009edc:	69fa      	ldr	r2, [r7, #28]
 8009ede:	f002 0203 	and.w	r2, r2, #3
 8009ee2:	0092      	lsls	r2, r2, #2
 8009ee4:	4093      	lsls	r3, r2
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009eec:	4935      	ldr	r1, [pc, #212]	; (8009fc4 <HAL_GPIO_Init+0x310>)
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	089b      	lsrs	r3, r3, #2
 8009ef2:	3302      	adds	r3, #2
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009efa:	4b3b      	ldr	r3, [pc, #236]	; (8009fe8 <HAL_GPIO_Init+0x334>)
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	43db      	mvns	r3, r3
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	4013      	ands	r3, r2
 8009f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009f1e:	4a32      	ldr	r2, [pc, #200]	; (8009fe8 <HAL_GPIO_Init+0x334>)
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009f24:	4b30      	ldr	r3, [pc, #192]	; (8009fe8 <HAL_GPIO_Init+0x334>)
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	43db      	mvns	r3, r3
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	4013      	ands	r3, r2
 8009f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009f40:	69ba      	ldr	r2, [r7, #24]
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009f48:	4a27      	ldr	r2, [pc, #156]	; (8009fe8 <HAL_GPIO_Init+0x334>)
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009f4e:	4b26      	ldr	r3, [pc, #152]	; (8009fe8 <HAL_GPIO_Init+0x334>)
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	43db      	mvns	r3, r3
 8009f58:	69ba      	ldr	r2, [r7, #24]
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009f6a:	69ba      	ldr	r2, [r7, #24]
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009f72:	4a1d      	ldr	r2, [pc, #116]	; (8009fe8 <HAL_GPIO_Init+0x334>)
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009f78:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <HAL_GPIO_Init+0x334>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	43db      	mvns	r3, r3
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	4013      	ands	r3, r2
 8009f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d003      	beq.n	8009f9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009f94:	69ba      	ldr	r2, [r7, #24]
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009f9c:	4a12      	ldr	r2, [pc, #72]	; (8009fe8 <HAL_GPIO_Init+0x334>)
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	61fb      	str	r3, [r7, #28]
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	2b0f      	cmp	r3, #15
 8009fac:	f67f ae90 	bls.w	8009cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009fb0:	bf00      	nop
 8009fb2:	bf00      	nop
 8009fb4:	3724      	adds	r7, #36	; 0x24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	40023800 	.word	0x40023800
 8009fc4:	40013800 	.word	0x40013800
 8009fc8:	40020000 	.word	0x40020000
 8009fcc:	40020400 	.word	0x40020400
 8009fd0:	40020800 	.word	0x40020800
 8009fd4:	40020c00 	.word	0x40020c00
 8009fd8:	40021000 	.word	0x40021000
 8009fdc:	40021400 	.word	0x40021400
 8009fe0:	40021800 	.word	0x40021800
 8009fe4:	40021c00 	.word	0x40021c00
 8009fe8:	40013c00 	.word	0x40013c00

08009fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	691a      	ldr	r2, [r3, #16]
 8009ffc:	887b      	ldrh	r3, [r7, #2]
 8009ffe:	4013      	ands	r3, r2
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a004:	2301      	movs	r3, #1
 800a006:	73fb      	strb	r3, [r7, #15]
 800a008:	e001      	b.n	800a00e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a00a:	2300      	movs	r3, #0
 800a00c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	807b      	strh	r3, [r7, #2]
 800a028:	4613      	mov	r3, r2
 800a02a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a02c:	787b      	ldrb	r3, [r7, #1]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d003      	beq.n	800a03a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a032:	887a      	ldrh	r2, [r7, #2]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a038:	e003      	b.n	800a042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a03a:	887b      	ldrh	r3, [r7, #2]
 800a03c:	041a      	lsls	r2, r3, #16
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	619a      	str	r2, [r3, #24]
}
 800a042:	bf00      	nop
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
	...

0800a050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e12b      	b.n	800a2ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d106      	bne.n	800a07c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7fe fa50 	bl	800851c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2224      	movs	r2, #36	; 0x24
 800a080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f022 0201 	bic.w	r2, r2, #1
 800a092:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a0b4:	f001 fffe 	bl	800c0b4 <HAL_RCC_GetPCLK1Freq>
 800a0b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	4a81      	ldr	r2, [pc, #516]	; (800a2c4 <HAL_I2C_Init+0x274>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d807      	bhi.n	800a0d4 <HAL_I2C_Init+0x84>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4a80      	ldr	r2, [pc, #512]	; (800a2c8 <HAL_I2C_Init+0x278>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	bf94      	ite	ls
 800a0cc:	2301      	movls	r3, #1
 800a0ce:	2300      	movhi	r3, #0
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	e006      	b.n	800a0e2 <HAL_I2C_Init+0x92>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	4a7d      	ldr	r2, [pc, #500]	; (800a2cc <HAL_I2C_Init+0x27c>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	bf94      	ite	ls
 800a0dc:	2301      	movls	r3, #1
 800a0de:	2300      	movhi	r3, #0
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e0e7      	b.n	800a2ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	4a78      	ldr	r2, [pc, #480]	; (800a2d0 <HAL_I2C_Init+0x280>)
 800a0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f2:	0c9b      	lsrs	r3, r3, #18
 800a0f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	430a      	orrs	r2, r1
 800a108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	4a6a      	ldr	r2, [pc, #424]	; (800a2c4 <HAL_I2C_Init+0x274>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d802      	bhi.n	800a124 <HAL_I2C_Init+0xd4>
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	3301      	adds	r3, #1
 800a122:	e009      	b.n	800a138 <HAL_I2C_Init+0xe8>
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a12a:	fb02 f303 	mul.w	r3, r2, r3
 800a12e:	4a69      	ldr	r2, [pc, #420]	; (800a2d4 <HAL_I2C_Init+0x284>)
 800a130:	fba2 2303 	umull	r2, r3, r2, r3
 800a134:	099b      	lsrs	r3, r3, #6
 800a136:	3301      	adds	r3, #1
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	6812      	ldr	r2, [r2, #0]
 800a13c:	430b      	orrs	r3, r1
 800a13e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a14a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	495c      	ldr	r1, [pc, #368]	; (800a2c4 <HAL_I2C_Init+0x274>)
 800a154:	428b      	cmp	r3, r1
 800a156:	d819      	bhi.n	800a18c <HAL_I2C_Init+0x13c>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	1e59      	subs	r1, r3, #1
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	005b      	lsls	r3, r3, #1
 800a162:	fbb1 f3f3 	udiv	r3, r1, r3
 800a166:	1c59      	adds	r1, r3, #1
 800a168:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a16c:	400b      	ands	r3, r1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00a      	beq.n	800a188 <HAL_I2C_Init+0x138>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	1e59      	subs	r1, r3, #1
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a180:	3301      	adds	r3, #1
 800a182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a186:	e051      	b.n	800a22c <HAL_I2C_Init+0x1dc>
 800a188:	2304      	movs	r3, #4
 800a18a:	e04f      	b.n	800a22c <HAL_I2C_Init+0x1dc>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d111      	bne.n	800a1b8 <HAL_I2C_Init+0x168>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	1e58      	subs	r0, r3, #1
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6859      	ldr	r1, [r3, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	005b      	lsls	r3, r3, #1
 800a1a0:	440b      	add	r3, r1
 800a1a2:	fbb0 f3f3 	udiv	r3, r0, r3
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	bf0c      	ite	eq
 800a1b0:	2301      	moveq	r3, #1
 800a1b2:	2300      	movne	r3, #0
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	e012      	b.n	800a1de <HAL_I2C_Init+0x18e>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	1e58      	subs	r0, r3, #1
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6859      	ldr	r1, [r3, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	440b      	add	r3, r1
 800a1c6:	0099      	lsls	r1, r3, #2
 800a1c8:	440b      	add	r3, r1
 800a1ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	bf0c      	ite	eq
 800a1d8:	2301      	moveq	r3, #1
 800a1da:	2300      	movne	r3, #0
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <HAL_I2C_Init+0x196>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e022      	b.n	800a22c <HAL_I2C_Init+0x1dc>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10e      	bne.n	800a20c <HAL_I2C_Init+0x1bc>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	1e58      	subs	r0, r3, #1
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6859      	ldr	r1, [r3, #4]
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	440b      	add	r3, r1
 800a1fc:	fbb0 f3f3 	udiv	r3, r0, r3
 800a200:	3301      	adds	r3, #1
 800a202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a20a:	e00f      	b.n	800a22c <HAL_I2C_Init+0x1dc>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	1e58      	subs	r0, r3, #1
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6859      	ldr	r1, [r3, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	440b      	add	r3, r1
 800a21a:	0099      	lsls	r1, r3, #2
 800a21c:	440b      	add	r3, r1
 800a21e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a222:	3301      	adds	r3, #1
 800a224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a22c:	6879      	ldr	r1, [r7, #4]
 800a22e:	6809      	ldr	r1, [r1, #0]
 800a230:	4313      	orrs	r3, r2
 800a232:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69da      	ldr	r2, [r3, #28]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	431a      	orrs	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	430a      	orrs	r2, r1
 800a24e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a25a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	6911      	ldr	r1, [r2, #16]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	68d2      	ldr	r2, [r2, #12]
 800a266:	4311      	orrs	r1, r2
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	6812      	ldr	r2, [r2, #0]
 800a26c:	430b      	orrs	r3, r1
 800a26e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	695a      	ldr	r2, [r3, #20]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	431a      	orrs	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	430a      	orrs	r2, r1
 800a28a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f042 0201 	orr.w	r2, r2, #1
 800a29a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2220      	movs	r2, #32
 800a2a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	000186a0 	.word	0x000186a0
 800a2c8:	001e847f 	.word	0x001e847f
 800a2cc:	003d08ff 	.word	0x003d08ff
 800a2d0:	431bde83 	.word	0x431bde83
 800a2d4:	10624dd3 	.word	0x10624dd3

0800a2d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2da:	b08f      	sub	sp, #60	; 0x3c
 800a2dc:	af0a      	add	r7, sp, #40	; 0x28
 800a2de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e10f      	b.n	800a50a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d106      	bne.n	800a30a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f006 fdf3 	bl	8010ef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2203      	movs	r2, #3
 800a30e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d102      	bne.n	800a324 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4618      	mov	r0, r3
 800a32a:	f003 f8da 	bl	800d4e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	687e      	ldr	r6, [r7, #4]
 800a336:	466d      	mov	r5, sp
 800a338:	f106 0410 	add.w	r4, r6, #16
 800a33c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a33e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a344:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a348:	e885 0003 	stmia.w	r5, {r0, r1}
 800a34c:	1d33      	adds	r3, r6, #4
 800a34e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a350:	6838      	ldr	r0, [r7, #0]
 800a352:	f002 ffb1 	bl	800d2b8 <USB_CoreInit>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d005      	beq.n	800a368 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e0d0      	b.n	800a50a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2100      	movs	r1, #0
 800a36e:	4618      	mov	r0, r3
 800a370:	f003 f8c8 	bl	800d504 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a374:	2300      	movs	r3, #0
 800a376:	73fb      	strb	r3, [r7, #15]
 800a378:	e04a      	b.n	800a410 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a37a:	7bfa      	ldrb	r2, [r7, #15]
 800a37c:	6879      	ldr	r1, [r7, #4]
 800a37e:	4613      	mov	r3, r2
 800a380:	00db      	lsls	r3, r3, #3
 800a382:	4413      	add	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	440b      	add	r3, r1
 800a388:	333d      	adds	r3, #61	; 0x3d
 800a38a:	2201      	movs	r2, #1
 800a38c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a38e:	7bfa      	ldrb	r2, [r7, #15]
 800a390:	6879      	ldr	r1, [r7, #4]
 800a392:	4613      	mov	r3, r2
 800a394:	00db      	lsls	r3, r3, #3
 800a396:	4413      	add	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	440b      	add	r3, r1
 800a39c:	333c      	adds	r3, #60	; 0x3c
 800a39e:	7bfa      	ldrb	r2, [r7, #15]
 800a3a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a3a2:	7bfa      	ldrb	r2, [r7, #15]
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	b298      	uxth	r0, r3
 800a3a8:	6879      	ldr	r1, [r7, #4]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	00db      	lsls	r3, r3, #3
 800a3ae:	4413      	add	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	440b      	add	r3, r1
 800a3b4:	3344      	adds	r3, #68	; 0x44
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a3ba:	7bfa      	ldrb	r2, [r7, #15]
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	440b      	add	r3, r1
 800a3c8:	3340      	adds	r3, #64	; 0x40
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a3ce:	7bfa      	ldrb	r2, [r7, #15]
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	00db      	lsls	r3, r3, #3
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	440b      	add	r3, r1
 800a3dc:	3348      	adds	r3, #72	; 0x48
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a3e2:	7bfa      	ldrb	r2, [r7, #15]
 800a3e4:	6879      	ldr	r1, [r7, #4]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	00db      	lsls	r3, r3, #3
 800a3ea:	4413      	add	r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	440b      	add	r3, r1
 800a3f0:	334c      	adds	r3, #76	; 0x4c
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a3f6:	7bfa      	ldrb	r2, [r7, #15]
 800a3f8:	6879      	ldr	r1, [r7, #4]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	00db      	lsls	r3, r3, #3
 800a3fe:	4413      	add	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	440b      	add	r3, r1
 800a404:	3354      	adds	r3, #84	; 0x54
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
 800a40c:	3301      	adds	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
 800a410:	7bfa      	ldrb	r2, [r7, #15]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	429a      	cmp	r2, r3
 800a418:	d3af      	bcc.n	800a37a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]
 800a41e:	e044      	b.n	800a4aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a420:	7bfa      	ldrb	r2, [r7, #15]
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	4613      	mov	r3, r2
 800a426:	00db      	lsls	r3, r3, #3
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	440b      	add	r3, r1
 800a42e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a436:	7bfa      	ldrb	r2, [r7, #15]
 800a438:	6879      	ldr	r1, [r7, #4]
 800a43a:	4613      	mov	r3, r2
 800a43c:	00db      	lsls	r3, r3, #3
 800a43e:	4413      	add	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	440b      	add	r3, r1
 800a444:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a448:	7bfa      	ldrb	r2, [r7, #15]
 800a44a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a44c:	7bfa      	ldrb	r2, [r7, #15]
 800a44e:	6879      	ldr	r1, [r7, #4]
 800a450:	4613      	mov	r3, r2
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	4413      	add	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	440b      	add	r3, r1
 800a45a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a45e:	2200      	movs	r2, #0
 800a460:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a462:	7bfa      	ldrb	r2, [r7, #15]
 800a464:	6879      	ldr	r1, [r7, #4]
 800a466:	4613      	mov	r3, r2
 800a468:	00db      	lsls	r3, r3, #3
 800a46a:	4413      	add	r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	440b      	add	r3, r1
 800a470:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a478:	7bfa      	ldrb	r2, [r7, #15]
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	4613      	mov	r3, r2
 800a47e:	00db      	lsls	r3, r3, #3
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a48e:	7bfa      	ldrb	r2, [r7, #15]
 800a490:	6879      	ldr	r1, [r7, #4]
 800a492:	4613      	mov	r3, r2
 800a494:	00db      	lsls	r3, r3, #3
 800a496:	4413      	add	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	440b      	add	r3, r1
 800a49c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	73fb      	strb	r3, [r7, #15]
 800a4aa:	7bfa      	ldrb	r2, [r7, #15]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d3b5      	bcc.n	800a420 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	603b      	str	r3, [r7, #0]
 800a4ba:	687e      	ldr	r6, [r7, #4]
 800a4bc:	466d      	mov	r5, sp
 800a4be:	f106 0410 	add.w	r4, r6, #16
 800a4c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a4c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a4ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a4ce:	e885 0003 	stmia.w	r5, {r0, r1}
 800a4d2:	1d33      	adds	r3, r6, #4
 800a4d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4d6:	6838      	ldr	r0, [r7, #0]
 800a4d8:	f003 f860 	bl	800d59c <USB_DevInit>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d005      	beq.n	800a4ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e00d      	b.n	800a50a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4618      	mov	r0, r3
 800a504:	f004 f9af 	bl	800e866 <USB_DevDisconnect>

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a512 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a526:	2b01      	cmp	r3, #1
 800a528:	d101      	bne.n	800a52e <HAL_PCD_Start+0x1c>
 800a52a:	2302      	movs	r3, #2
 800a52c:	e020      	b.n	800a570 <HAL_PCD_Start+0x5e>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d109      	bne.n	800a552 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a542:	2b01      	cmp	r3, #1
 800a544:	d005      	beq.n	800a552 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4618      	mov	r0, r3
 800a558:	f002 ffb2 	bl	800d4c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4618      	mov	r0, r3
 800a562:	f004 f95f 	bl	800e824 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a578:	b590      	push	{r4, r7, lr}
 800a57a:	b08d      	sub	sp, #52	; 0x34
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a586:	6a3b      	ldr	r3, [r7, #32]
 800a588:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	f004 fa1d 	bl	800e9ce <USB_GetMode>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	f040 848a 	bne.w	800aeb0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f004 f981 	bl	800e8a8 <USB_ReadInterrupts>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 8480 	beq.w	800aeae <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	0a1b      	lsrs	r3, r3, #8
 800a5b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f004 f96e 	bl	800e8a8 <USB_ReadInterrupts>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	f003 0302 	and.w	r3, r3, #2
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d107      	bne.n	800a5e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	695a      	ldr	r2, [r3, #20]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f002 0202 	and.w	r2, r2, #2
 800a5e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f004 f95c 	bl	800e8a8 <USB_ReadInterrupts>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	f003 0310 	and.w	r3, r3, #16
 800a5f6:	2b10      	cmp	r3, #16
 800a5f8:	d161      	bne.n	800a6be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	699a      	ldr	r2, [r3, #24]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f022 0210 	bic.w	r2, r2, #16
 800a608:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a60a:	6a3b      	ldr	r3, [r7, #32]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	f003 020f 	and.w	r2, r3, #15
 800a616:	4613      	mov	r3, r2
 800a618:	00db      	lsls	r3, r3, #3
 800a61a:	4413      	add	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	4413      	add	r3, r2
 800a626:	3304      	adds	r3, #4
 800a628:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	0c5b      	lsrs	r3, r3, #17
 800a62e:	f003 030f 	and.w	r3, r3, #15
 800a632:	2b02      	cmp	r3, #2
 800a634:	d124      	bne.n	800a680 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a63c:	4013      	ands	r3, r2
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d035      	beq.n	800a6ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	091b      	lsrs	r3, r3, #4
 800a64a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a64c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a650:	b29b      	uxth	r3, r3
 800a652:	461a      	mov	r2, r3
 800a654:	6a38      	ldr	r0, [r7, #32]
 800a656:	f003 ff93 	bl	800e580 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	691a      	ldr	r2, [r3, #16]
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	091b      	lsrs	r3, r3, #4
 800a662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a666:	441a      	add	r2, r3
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	6a1a      	ldr	r2, [r3, #32]
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	091b      	lsrs	r3, r3, #4
 800a674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a678:	441a      	add	r2, r3
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	621a      	str	r2, [r3, #32]
 800a67e:	e016      	b.n	800a6ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	0c5b      	lsrs	r3, r3, #17
 800a684:	f003 030f 	and.w	r3, r3, #15
 800a688:	2b06      	cmp	r3, #6
 800a68a:	d110      	bne.n	800a6ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a692:	2208      	movs	r2, #8
 800a694:	4619      	mov	r1, r3
 800a696:	6a38      	ldr	r0, [r7, #32]
 800a698:	f003 ff72 	bl	800e580 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	6a1a      	ldr	r2, [r3, #32]
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	091b      	lsrs	r3, r3, #4
 800a6a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a6a8:	441a      	add	r2, r3
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	699a      	ldr	r2, [r3, #24]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f042 0210 	orr.w	r2, r2, #16
 800a6bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f004 f8f0 	bl	800e8a8 <USB_ReadInterrupts>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a6d2:	f040 80a7 	bne.w	800a824 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f004 f8f5 	bl	800e8ce <USB_ReadDevAllOutEpInterrupt>
 800a6e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a6e6:	e099      	b.n	800a81c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 808e 	beq.w	800a810 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fa:	b2d2      	uxtb	r2, r2
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	4618      	mov	r0, r3
 800a700:	f004 f919 	bl	800e936 <USB_ReadDevOutEPInterrupt>
 800a704:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00c      	beq.n	800a72a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	4413      	add	r3, r2
 800a718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a71c:	461a      	mov	r2, r3
 800a71e:	2301      	movs	r3, #1
 800a720:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fec3 	bl	800b4b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	f003 0308 	and.w	r3, r3, #8
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00c      	beq.n	800a74e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a740:	461a      	mov	r2, r3
 800a742:	2308      	movs	r3, #8
 800a744:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 ff99 	bl	800b680 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	f003 0310 	and.w	r3, r3, #16
 800a754:	2b00      	cmp	r3, #0
 800a756:	d008      	beq.n	800a76a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a764:	461a      	mov	r2, r3
 800a766:	2310      	movs	r3, #16
 800a768:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	f003 0302 	and.w	r3, r3, #2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d030      	beq.n	800a7d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a77c:	2b80      	cmp	r3, #128	; 0x80
 800a77e:	d109      	bne.n	800a794 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	69fa      	ldr	r2, [r7, #28]
 800a78a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a78e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a792:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a796:	4613      	mov	r3, r2
 800a798:	00db      	lsls	r3, r3, #3
 800a79a:	4413      	add	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	78db      	ldrb	r3, [r3, #3]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d108      	bne.n	800a7c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	4619      	mov	r1, r3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f006 fcaa 	bl	8011118 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	f003 0320 	and.w	r3, r3, #32
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d008      	beq.n	800a7f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	015a      	lsls	r2, r3, #5
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	2320      	movs	r3, #32
 800a7f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d009      	beq.n	800a810 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a808:	461a      	mov	r2, r3
 800a80a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a80e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	3301      	adds	r3, #1
 800a814:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a818:	085b      	lsrs	r3, r3, #1
 800a81a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f47f af62 	bne.w	800a6e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4618      	mov	r0, r3
 800a82a:	f004 f83d 	bl	800e8a8 <USB_ReadInterrupts>
 800a82e:	4603      	mov	r3, r0
 800a830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a834:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a838:	f040 80db 	bne.w	800a9f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4618      	mov	r0, r3
 800a842:	f004 f85e 	bl	800e902 <USB_ReadDevAllInEpInterrupt>
 800a846:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a848:	2300      	movs	r3, #0
 800a84a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a84c:	e0cd      	b.n	800a9ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 80c2 	beq.w	800a9de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a860:	b2d2      	uxtb	r2, r2
 800a862:	4611      	mov	r1, r2
 800a864:	4618      	mov	r0, r3
 800a866:	f004 f884 	bl	800e972 <USB_ReadDevInEPInterrupt>
 800a86a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d057      	beq.n	800a926 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a878:	f003 030f 	and.w	r3, r3, #15
 800a87c:	2201      	movs	r2, #1
 800a87e:	fa02 f303 	lsl.w	r3, r2, r3
 800a882:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a88a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	43db      	mvns	r3, r3
 800a890:	69f9      	ldr	r1, [r7, #28]
 800a892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a896:	4013      	ands	r3, r2
 800a898:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d132      	bne.n	800a91a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a8b4:	6879      	ldr	r1, [r7, #4]
 800a8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	4413      	add	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	440b      	add	r3, r1
 800a8c2:	334c      	adds	r3, #76	; 0x4c
 800a8c4:	6819      	ldr	r1, [r3, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	4413      	add	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4403      	add	r3, r0
 800a8d4:	3348      	adds	r3, #72	; 0x48
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4419      	add	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8de:	4613      	mov	r3, r2
 800a8e0:	00db      	lsls	r3, r3, #3
 800a8e2:	4413      	add	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4403      	add	r3, r0
 800a8e8:	334c      	adds	r3, #76	; 0x4c
 800a8ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d113      	bne.n	800a91a <HAL_PCD_IRQHandler+0x3a2>
 800a8f2:	6879      	ldr	r1, [r7, #4]
 800a8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	4413      	add	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	440b      	add	r3, r1
 800a900:	3354      	adds	r3, #84	; 0x54
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d108      	bne.n	800a91a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6818      	ldr	r0, [r3, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a912:	461a      	mov	r2, r3
 800a914:	2101      	movs	r1, #1
 800a916:	f004 f88b 	bl	800ea30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	4619      	mov	r1, r3
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f006 fb74 	bl	801100e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f003 0308 	and.w	r3, r3, #8
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d008      	beq.n	800a942 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	015a      	lsls	r2, r3, #5
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	4413      	add	r3, r2
 800a938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a93c:	461a      	mov	r2, r3
 800a93e:	2308      	movs	r3, #8
 800a940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f003 0310 	and.w	r3, r3, #16
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d008      	beq.n	800a95e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a958:	461a      	mov	r2, r3
 800a95a:	2310      	movs	r3, #16
 800a95c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a964:	2b00      	cmp	r3, #0
 800a966:	d008      	beq.n	800a97a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a974:	461a      	mov	r2, r3
 800a976:	2340      	movs	r3, #64	; 0x40
 800a978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f003 0302 	and.w	r3, r3, #2
 800a980:	2b00      	cmp	r3, #0
 800a982:	d023      	beq.n	800a9cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a986:	6a38      	ldr	r0, [r7, #32]
 800a988:	f002 ff6c 	bl	800d864 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a98c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a98e:	4613      	mov	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	4413      	add	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	3338      	adds	r3, #56	; 0x38
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	4413      	add	r3, r2
 800a99c:	3304      	adds	r3, #4
 800a99e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	78db      	ldrb	r3, [r3, #3]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d108      	bne.n	800a9ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f006 fbc1 	bl	801113c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9bc:	015a      	lsls	r2, r3, #5
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d003      	beq.n	800a9de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a9d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fcdb 	bl	800b394 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	085b      	lsrs	r3, r3, #1
 800a9e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f47f af2e 	bne.w	800a84e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f003 ff56 	bl	800e8a8 <USB_ReadInterrupts>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa06:	d122      	bne.n	800aa4e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	69fa      	ldr	r2, [r7, #28]
 800aa12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa16:	f023 0301 	bic.w	r3, r3, #1
 800aa1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d108      	bne.n	800aa38 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800aa2e:	2100      	movs	r1, #0
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fec3 	bl	800b7bc <HAL_PCDEx_LPM_Callback>
 800aa36:	e002      	b.n	800aa3e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f006 fb5f 	bl	80110fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	695a      	ldr	r2, [r3, #20]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800aa4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f003 ff28 	bl	800e8a8 <USB_ReadInterrupts>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa62:	d112      	bne.n	800aa8a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	f003 0301 	and.w	r3, r3, #1
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d102      	bne.n	800aa7a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f006 fb1b 	bl	80110b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	695a      	ldr	r2, [r3, #20]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800aa88:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f003 ff0a 	bl	800e8a8 <USB_ReadInterrupts>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa9e:	f040 80b7 	bne.w	800ac10 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	69fa      	ldr	r2, [r7, #28]
 800aaac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aab0:	f023 0301 	bic.w	r3, r3, #1
 800aab4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2110      	movs	r1, #16
 800aabc:	4618      	mov	r0, r3
 800aabe:	f002 fed1 	bl	800d864 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aac2:	2300      	movs	r3, #0
 800aac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aac6:	e046      	b.n	800ab56 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad4:	461a      	mov	r2, r3
 800aad6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aada:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaec:	0151      	lsls	r1, r2, #5
 800aaee:	69fa      	ldr	r2, [r7, #28]
 800aaf0:	440a      	add	r2, r1
 800aaf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aafa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	015a      	lsls	r2, r3, #5
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	4413      	add	r3, r2
 800ab04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab08:	461a      	mov	r2, r3
 800ab0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab0e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	69fa      	ldr	r2, [r7, #28]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab40:	0151      	lsls	r1, r2, #5
 800ab42:	69fa      	ldr	r2, [r7, #28]
 800ab44:	440a      	add	r2, r1
 800ab46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab4e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab52:	3301      	adds	r3, #1
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d3b3      	bcc.n	800aac8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab66:	69db      	ldr	r3, [r3, #28]
 800ab68:	69fa      	ldr	r2, [r7, #28]
 800ab6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab6e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800ab72:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d016      	beq.n	800abaa <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab86:	69fa      	ldr	r2, [r7, #28]
 800ab88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab8c:	f043 030b 	orr.w	r3, r3, #11
 800ab90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab9c:	69fa      	ldr	r2, [r7, #28]
 800ab9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aba2:	f043 030b 	orr.w	r3, r3, #11
 800aba6:	6453      	str	r3, [r2, #68]	; 0x44
 800aba8:	e015      	b.n	800abd6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	69fa      	ldr	r2, [r7, #28]
 800abb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800abbc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800abc0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	69fa      	ldr	r2, [r7, #28]
 800abcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abd0:	f043 030b 	orr.w	r3, r3, #11
 800abd4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	69fa      	ldr	r2, [r7, #28]
 800abe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abe4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800abe8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6818      	ldr	r0, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800abfa:	461a      	mov	r2, r3
 800abfc:	f003 ff18 	bl	800ea30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	695a      	ldr	r2, [r3, #20]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ac0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f003 fe47 	bl	800e8a8 <USB_ReadInterrupts>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac24:	d124      	bne.n	800ac70 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f003 fedd 	bl	800e9ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f002 fe92 	bl	800d95e <USB_GetDevSpeed>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681c      	ldr	r4, [r3, #0]
 800ac46:	f001 fa29 	bl	800c09c <HAL_RCC_GetHCLKFreq>
 800ac4a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	461a      	mov	r2, r3
 800ac54:	4620      	mov	r0, r4
 800ac56:	f002 fb91 	bl	800d37c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f006 f9ff 	bl	801105e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	695a      	ldr	r2, [r3, #20]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ac6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f003 fe17 	bl	800e8a8 <USB_ReadInterrupts>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	f003 0308 	and.w	r3, r3, #8
 800ac80:	2b08      	cmp	r3, #8
 800ac82:	d10a      	bne.n	800ac9a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f006 f9dc 	bl	8011042 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	695a      	ldr	r2, [r3, #20]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f002 0208 	and.w	r2, r2, #8
 800ac98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f003 fe02 	bl	800e8a8 <USB_ReadInterrupts>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acaa:	2b80      	cmp	r3, #128	; 0x80
 800acac:	d122      	bne.n	800acf4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acb6:	6a3b      	ldr	r3, [r7, #32]
 800acb8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800acba:	2301      	movs	r3, #1
 800acbc:	627b      	str	r3, [r7, #36]	; 0x24
 800acbe:	e014      	b.n	800acea <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800acc0:	6879      	ldr	r1, [r7, #4]
 800acc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc4:	4613      	mov	r3, r2
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	4413      	add	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d105      	bne.n	800ace4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fb27 	bl	800b332 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	3301      	adds	r3, #1
 800ace8:	627b      	str	r3, [r7, #36]	; 0x24
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d3e5      	bcc.n	800acc0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f003 fdd5 	bl	800e8a8 <USB_ReadInterrupts>
 800acfe:	4603      	mov	r3, r0
 800ad00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad08:	d13b      	bne.n	800ad82 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad0e:	e02b      	b.n	800ad68 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800ad10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad12:	015a      	lsls	r2, r3, #5
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	4413      	add	r3, r2
 800ad18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ad20:	6879      	ldr	r1, [r7, #4]
 800ad22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad24:	4613      	mov	r3, r2
 800ad26:	00db      	lsls	r3, r3, #3
 800ad28:	4413      	add	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	440b      	add	r3, r1
 800ad2e:	3340      	adds	r3, #64	; 0x40
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d115      	bne.n	800ad62 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800ad36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	da12      	bge.n	800ad62 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800ad3c:	6879      	ldr	r1, [r7, #4]
 800ad3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad40:	4613      	mov	r3, r2
 800ad42:	00db      	lsls	r3, r3, #3
 800ad44:	4413      	add	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	440b      	add	r3, r1
 800ad4a:	333f      	adds	r3, #63	; 0x3f
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fae8 	bl	800b332 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ad62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad64:	3301      	adds	r3, #1
 800ad66:	627b      	str	r3, [r7, #36]	; 0x24
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d3ce      	bcc.n	800ad10 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	695a      	ldr	r2, [r3, #20]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ad80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f003 fd8e 	bl	800e8a8 <USB_ReadInterrupts>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad96:	d155      	bne.n	800ae44 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ad98:	2301      	movs	r3, #1
 800ad9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad9c:	e045      	b.n	800ae2a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adb2:	4613      	mov	r3, r2
 800adb4:	00db      	lsls	r3, r3, #3
 800adb6:	4413      	add	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	440b      	add	r3, r1
 800adbc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d12e      	bne.n	800ae24 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800adc6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800adc8:	2b00      	cmp	r3, #0
 800adca:	da2b      	bge.n	800ae24 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800add8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800addc:	429a      	cmp	r2, r3
 800adde:	d121      	bne.n	800ae24 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ade0:	6879      	ldr	r1, [r7, #4]
 800ade2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ade4:	4613      	mov	r3, r2
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	4413      	add	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	440b      	add	r3, r1
 800adee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800adf2:	2201      	movs	r2, #1
 800adf4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10a      	bne.n	800ae24 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	69fa      	ldr	r2, [r7, #28]
 800ae18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae20:	6053      	str	r3, [r2, #4]
            break;
 800ae22:	e007      	b.n	800ae34 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	3301      	adds	r3, #1
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d3b4      	bcc.n	800ad9e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	695a      	ldr	r2, [r3, #20]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ae42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f003 fd2d 	bl	800e8a8 <USB_ReadInterrupts>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae58:	d10a      	bne.n	800ae70 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f006 f980 	bl	8011160 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	695a      	ldr	r2, [r3, #20]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ae6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f003 fd17 	bl	800e8a8 <USB_ReadInterrupts>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	f003 0304 	and.w	r3, r3, #4
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d115      	bne.n	800aeb0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	f003 0304 	and.w	r3, r3, #4
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d002      	beq.n	800ae9c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f006 f970 	bl	801117c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6859      	ldr	r1, [r3, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	605a      	str	r2, [r3, #4]
 800aeac:	e000      	b.n	800aeb0 <HAL_PCD_IRQHandler+0x938>
      return;
 800aeae:	bf00      	nop
    }
  }
}
 800aeb0:	3734      	adds	r7, #52	; 0x34
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd90      	pop	{r4, r7, pc}

0800aeb6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	460b      	mov	r3, r1
 800aec0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d101      	bne.n	800aed0 <HAL_PCD_SetAddress+0x1a>
 800aecc:	2302      	movs	r3, #2
 800aece:	e013      	b.n	800aef8 <HAL_PCD_SetAddress+0x42>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	78fa      	ldrb	r2, [r7, #3]
 800aedc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	78fa      	ldrb	r2, [r7, #3]
 800aee6:	4611      	mov	r1, r2
 800aee8:	4618      	mov	r0, r3
 800aeea:	f003 fc75 	bl	800e7d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	4608      	mov	r0, r1
 800af0a:	4611      	mov	r1, r2
 800af0c:	461a      	mov	r2, r3
 800af0e:	4603      	mov	r3, r0
 800af10:	70fb      	strb	r3, [r7, #3]
 800af12:	460b      	mov	r3, r1
 800af14:	803b      	strh	r3, [r7, #0]
 800af16:	4613      	mov	r3, r2
 800af18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800af1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af22:	2b00      	cmp	r3, #0
 800af24:	da0f      	bge.n	800af46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af26:	78fb      	ldrb	r3, [r7, #3]
 800af28:	f003 020f 	and.w	r2, r3, #15
 800af2c:	4613      	mov	r3, r2
 800af2e:	00db      	lsls	r3, r3, #3
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	3338      	adds	r3, #56	; 0x38
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	4413      	add	r3, r2
 800af3a:	3304      	adds	r3, #4
 800af3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2201      	movs	r2, #1
 800af42:	705a      	strb	r2, [r3, #1]
 800af44:	e00f      	b.n	800af66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800af46:	78fb      	ldrb	r3, [r7, #3]
 800af48:	f003 020f 	and.w	r2, r3, #15
 800af4c:	4613      	mov	r3, r2
 800af4e:	00db      	lsls	r3, r3, #3
 800af50:	4413      	add	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	4413      	add	r3, r2
 800af5c:	3304      	adds	r3, #4
 800af5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800af66:	78fb      	ldrb	r3, [r7, #3]
 800af68:	f003 030f 	and.w	r3, r3, #15
 800af6c:	b2da      	uxtb	r2, r3
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800af72:	883a      	ldrh	r2, [r7, #0]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	78ba      	ldrb	r2, [r7, #2]
 800af7c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	785b      	ldrb	r3, [r3, #1]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d004      	beq.n	800af90 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800af90:	78bb      	ldrb	r3, [r7, #2]
 800af92:	2b02      	cmp	r3, #2
 800af94:	d102      	bne.n	800af9c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d101      	bne.n	800afaa <HAL_PCD_EP_Open+0xaa>
 800afa6:	2302      	movs	r3, #2
 800afa8:	e00e      	b.n	800afc8 <HAL_PCD_EP_Open+0xc8>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68f9      	ldr	r1, [r7, #12]
 800afb8:	4618      	mov	r0, r3
 800afba:	f002 fcf5 	bl	800d9a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800afc6:	7afb      	ldrb	r3, [r7, #11]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	460b      	mov	r3, r1
 800afda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800afdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	da0f      	bge.n	800b004 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	f003 020f 	and.w	r2, r3, #15
 800afea:	4613      	mov	r3, r2
 800afec:	00db      	lsls	r3, r3, #3
 800afee:	4413      	add	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	3338      	adds	r3, #56	; 0x38
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	4413      	add	r3, r2
 800aff8:	3304      	adds	r3, #4
 800affa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2201      	movs	r2, #1
 800b000:	705a      	strb	r2, [r3, #1]
 800b002:	e00f      	b.n	800b024 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	f003 020f 	and.w	r2, r3, #15
 800b00a:	4613      	mov	r3, r2
 800b00c:	00db      	lsls	r3, r3, #3
 800b00e:	4413      	add	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	4413      	add	r3, r2
 800b01a:	3304      	adds	r3, #4
 800b01c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b024:	78fb      	ldrb	r3, [r7, #3]
 800b026:	f003 030f 	and.w	r3, r3, #15
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b036:	2b01      	cmp	r3, #1
 800b038:	d101      	bne.n	800b03e <HAL_PCD_EP_Close+0x6e>
 800b03a:	2302      	movs	r3, #2
 800b03c:	e00e      	b.n	800b05c <HAL_PCD_EP_Close+0x8c>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f002 fd33 	bl	800dab8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	607a      	str	r2, [r7, #4]
 800b06e:	603b      	str	r3, [r7, #0]
 800b070:	460b      	mov	r3, r1
 800b072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b074:	7afb      	ldrb	r3, [r7, #11]
 800b076:	f003 020f 	and.w	r2, r3, #15
 800b07a:	4613      	mov	r3, r2
 800b07c:	00db      	lsls	r3, r3, #3
 800b07e:	4413      	add	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	4413      	add	r3, r2
 800b08a:	3304      	adds	r3, #4
 800b08c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2200      	movs	r2, #0
 800b09e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b0a6:	7afb      	ldrb	r3, [r7, #11]
 800b0a8:	f003 030f 	and.w	r3, r3, #15
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d102      	bne.n	800b0c0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b0c0:	7afb      	ldrb	r3, [r7, #11]
 800b0c2:	f003 030f 	and.w	r3, r3, #15
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d109      	bne.n	800b0de <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6818      	ldr	r0, [r3, #0]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	6979      	ldr	r1, [r7, #20]
 800b0d8:	f003 f812 	bl	800e100 <USB_EP0StartXfer>
 800b0dc:	e008      	b.n	800b0f0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6818      	ldr	r0, [r3, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	6979      	ldr	r1, [r7, #20]
 800b0ec:	f002 fdc0 	bl	800dc70 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	460b      	mov	r3, r1
 800b104:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b106:	78fb      	ldrb	r3, [r7, #3]
 800b108:	f003 020f 	and.w	r2, r3, #15
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	4613      	mov	r3, r2
 800b110:	00db      	lsls	r3, r3, #3
 800b112:	4413      	add	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	440b      	add	r3, r1
 800b118:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800b11c:	681b      	ldr	r3, [r3, #0]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b086      	sub	sp, #24
 800b12e:	af00      	add	r7, sp, #0
 800b130:	60f8      	str	r0, [r7, #12]
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	603b      	str	r3, [r7, #0]
 800b136:	460b      	mov	r3, r1
 800b138:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b13a:	7afb      	ldrb	r3, [r7, #11]
 800b13c:	f003 020f 	and.w	r2, r3, #15
 800b140:	4613      	mov	r3, r2
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	4413      	add	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	3338      	adds	r3, #56	; 0x38
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	4413      	add	r3, r2
 800b14e:	3304      	adds	r3, #4
 800b150:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	2200      	movs	r2, #0
 800b162:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	2201      	movs	r2, #1
 800b168:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b16a:	7afb      	ldrb	r3, [r7, #11]
 800b16c:	f003 030f 	and.w	r3, r3, #15
 800b170:	b2da      	uxtb	r2, r3
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d102      	bne.n	800b184 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b184:	7afb      	ldrb	r3, [r7, #11]
 800b186:	f003 030f 	and.w	r3, r3, #15
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d109      	bne.n	800b1a2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6818      	ldr	r0, [r3, #0]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	b2db      	uxtb	r3, r3
 800b198:	461a      	mov	r2, r3
 800b19a:	6979      	ldr	r1, [r7, #20]
 800b19c:	f002 ffb0 	bl	800e100 <USB_EP0StartXfer>
 800b1a0:	e008      	b.n	800b1b4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	6979      	ldr	r1, [r7, #20]
 800b1b0:	f002 fd5e 	bl	800dc70 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3718      	adds	r7, #24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b1ca:	78fb      	ldrb	r3, [r7, #3]
 800b1cc:	f003 020f 	and.w	r2, r3, #15
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d901      	bls.n	800b1dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e050      	b.n	800b27e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b1dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	da0f      	bge.n	800b204 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b1e4:	78fb      	ldrb	r3, [r7, #3]
 800b1e6:	f003 020f 	and.w	r2, r3, #15
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	4413      	add	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	3338      	adds	r3, #56	; 0x38
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2201      	movs	r2, #1
 800b200:	705a      	strb	r2, [r3, #1]
 800b202:	e00d      	b.n	800b220 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b204:	78fa      	ldrb	r2, [r7, #3]
 800b206:	4613      	mov	r3, r2
 800b208:	00db      	lsls	r3, r3, #3
 800b20a:	4413      	add	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	4413      	add	r3, r2
 800b216:	3304      	adds	r3, #4
 800b218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2201      	movs	r2, #1
 800b224:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b226:	78fb      	ldrb	r3, [r7, #3]
 800b228:	f003 030f 	and.w	r3, r3, #15
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_PCD_EP_SetStall+0x82>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e01e      	b.n	800b27e <HAL_PCD_EP_SetStall+0xc0>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68f9      	ldr	r1, [r7, #12]
 800b24e:	4618      	mov	r0, r3
 800b250:	f003 f9ee 	bl	800e630 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b254:	78fb      	ldrb	r3, [r7, #3]
 800b256:	f003 030f 	and.w	r3, r3, #15
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10a      	bne.n	800b274 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6818      	ldr	r0, [r3, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	b2d9      	uxtb	r1, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b26e:	461a      	mov	r2, r3
 800b270:	f003 fbde 	bl	800ea30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b084      	sub	sp, #16
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	460b      	mov	r3, r1
 800b290:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b292:	78fb      	ldrb	r3, [r7, #3]
 800b294:	f003 020f 	and.w	r2, r3, #15
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d901      	bls.n	800b2a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e042      	b.n	800b32a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b2a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	da0f      	bge.n	800b2cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b2ac:	78fb      	ldrb	r3, [r7, #3]
 800b2ae:	f003 020f 	and.w	r2, r3, #15
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	00db      	lsls	r3, r3, #3
 800b2b6:	4413      	add	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	3338      	adds	r3, #56	; 0x38
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	4413      	add	r3, r2
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	705a      	strb	r2, [r3, #1]
 800b2ca:	e00f      	b.n	800b2ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b2cc:	78fb      	ldrb	r3, [r7, #3]
 800b2ce:	f003 020f 	and.w	r2, r3, #15
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	00db      	lsls	r3, r3, #3
 800b2d6:	4413      	add	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b2f2:	78fb      	ldrb	r3, [r7, #3]
 800b2f4:	f003 030f 	and.w	r3, r3, #15
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b304:	2b01      	cmp	r3, #1
 800b306:	d101      	bne.n	800b30c <HAL_PCD_EP_ClrStall+0x86>
 800b308:	2302      	movs	r3, #2
 800b30a:	e00e      	b.n	800b32a <HAL_PCD_EP_ClrStall+0xa4>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68f9      	ldr	r1, [r7, #12]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f003 f9f6 	bl	800e70c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	460b      	mov	r3, r1
 800b33c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b33e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b342:	2b00      	cmp	r3, #0
 800b344:	da0c      	bge.n	800b360 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b346:	78fb      	ldrb	r3, [r7, #3]
 800b348:	f003 020f 	and.w	r2, r3, #15
 800b34c:	4613      	mov	r3, r2
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	4413      	add	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	3338      	adds	r3, #56	; 0x38
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	4413      	add	r3, r2
 800b35a:	3304      	adds	r3, #4
 800b35c:	60fb      	str	r3, [r7, #12]
 800b35e:	e00c      	b.n	800b37a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b360:	78fb      	ldrb	r3, [r7, #3]
 800b362:	f003 020f 	and.w	r2, r3, #15
 800b366:	4613      	mov	r3, r2
 800b368:	00db      	lsls	r3, r3, #3
 800b36a:	4413      	add	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	4413      	add	r3, r2
 800b376:	3304      	adds	r3, #4
 800b378:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68f9      	ldr	r1, [r7, #12]
 800b380:	4618      	mov	r0, r3
 800b382:	f003 f815 	bl	800e3b0 <USB_EPStopXfer>
 800b386:	4603      	mov	r3, r0
 800b388:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b38a:	7afb      	ldrb	r3, [r7, #11]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b08a      	sub	sp, #40	; 0x28
 800b398:	af02      	add	r7, sp, #8
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	00db      	lsls	r3, r3, #3
 800b3ae:	4413      	add	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	3338      	adds	r3, #56	; 0x38
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	3304      	adds	r3, #4
 800b3ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6a1a      	ldr	r2, [r3, #32]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d901      	bls.n	800b3cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e06c      	b.n	800b4a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	699a      	ldr	r2, [r3, #24]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6a1b      	ldr	r3, [r3, #32]
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	69fa      	ldr	r2, [r7, #28]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d902      	bls.n	800b3e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	3303      	adds	r3, #3
 800b3ec:	089b      	lsrs	r3, r3, #2
 800b3ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b3f0:	e02b      	b.n	800b44a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	699a      	ldr	r2, [r3, #24]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6a1b      	ldr	r3, [r3, #32]
 800b3fa:	1ad3      	subs	r3, r2, r3
 800b3fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	69fa      	ldr	r2, [r7, #28]
 800b404:	429a      	cmp	r2, r3
 800b406:	d902      	bls.n	800b40e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	3303      	adds	r3, #3
 800b412:	089b      	lsrs	r3, r3, #2
 800b414:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6919      	ldr	r1, [r3, #16]
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b426:	b2db      	uxtb	r3, r3
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	4603      	mov	r3, r0
 800b42c:	6978      	ldr	r0, [r7, #20]
 800b42e:	f003 f869 	bl	800e504 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	691a      	ldr	r2, [r3, #16]
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	441a      	add	r2, r3
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6a1a      	ldr	r2, [r3, #32]
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	441a      	add	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	015a      	lsls	r2, r3, #5
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	4413      	add	r3, r2
 800b452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	69ba      	ldr	r2, [r7, #24]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d809      	bhi.n	800b474 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6a1a      	ldr	r2, [r3, #32]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b468:	429a      	cmp	r2, r3
 800b46a:	d203      	bcs.n	800b474 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1be      	bne.n	800b3f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	699a      	ldr	r2, [r3, #24]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6a1b      	ldr	r3, [r3, #32]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d811      	bhi.n	800b4a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	f003 030f 	and.w	r3, r3, #15
 800b486:	2201      	movs	r2, #1
 800b488:	fa02 f303 	lsl.w	r3, r2, r3
 800b48c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	43db      	mvns	r3, r3
 800b49a:	6939      	ldr	r1, [r7, #16]
 800b49c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3720      	adds	r7, #32
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b088      	sub	sp, #32
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	333c      	adds	r3, #60	; 0x3c
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	015a      	lsls	r2, r3, #5
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d17b      	bne.n	800b5de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	f003 0308 	and.w	r3, r3, #8
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d015      	beq.n	800b51c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	4a61      	ldr	r2, [pc, #388]	; (800b678 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	f240 80b9 	bls.w	800b66c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 80b3 	beq.w	800b66c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	015a      	lsls	r2, r3, #5
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	4413      	add	r3, r2
 800b50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b512:	461a      	mov	r2, r3
 800b514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b518:	6093      	str	r3, [r2, #8]
 800b51a:	e0a7      	b.n	800b66c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	f003 0320 	and.w	r3, r3, #32
 800b522:	2b00      	cmp	r3, #0
 800b524:	d009      	beq.n	800b53a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	015a      	lsls	r2, r3, #5
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	4413      	add	r3, r2
 800b52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b532:	461a      	mov	r2, r3
 800b534:	2320      	movs	r3, #32
 800b536:	6093      	str	r3, [r2, #8]
 800b538:	e098      	b.n	800b66c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b540:	2b00      	cmp	r3, #0
 800b542:	f040 8093 	bne.w	800b66c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	4a4b      	ldr	r2, [pc, #300]	; (800b678 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d90f      	bls.n	800b56e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00a      	beq.n	800b56e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	015a      	lsls	r2, r3, #5
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	4413      	add	r3, r2
 800b560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b564:	461a      	mov	r2, r3
 800b566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b56a:	6093      	str	r3, [r2, #8]
 800b56c:	e07e      	b.n	800b66c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	4613      	mov	r3, r2
 800b572:	00db      	lsls	r3, r3, #3
 800b574:	4413      	add	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	4413      	add	r3, r2
 800b580:	3304      	adds	r3, #4
 800b582:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	69da      	ldr	r2, [r3, #28]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	0159      	lsls	r1, r3, #5
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	440b      	add	r3, r1
 800b590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b59a:	1ad2      	subs	r2, r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d114      	bne.n	800b5d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d109      	bne.n	800b5c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6818      	ldr	r0, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	f003 fa38 	bl	800ea30 <USB_EP0_OutStart>
 800b5c0:	e006      	b.n	800b5d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	691a      	ldr	r2, [r3, #16]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	441a      	add	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f005 fcfe 	bl	8010fd8 <HAL_PCD_DataOutStageCallback>
 800b5dc:	e046      	b.n	800b66c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	4a26      	ldr	r2, [pc, #152]	; (800b67c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d124      	bne.n	800b630 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00a      	beq.n	800b606 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	015a      	lsls	r2, r3, #5
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b602:	6093      	str	r3, [r2, #8]
 800b604:	e032      	b.n	800b66c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	f003 0320 	and.w	r3, r3, #32
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d008      	beq.n	800b622 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	015a      	lsls	r2, r3, #5
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	4413      	add	r3, r2
 800b618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b61c:	461a      	mov	r2, r3
 800b61e:	2320      	movs	r3, #32
 800b620:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	b2db      	uxtb	r3, r3
 800b626:	4619      	mov	r1, r3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f005 fcd5 	bl	8010fd8 <HAL_PCD_DataOutStageCallback>
 800b62e:	e01d      	b.n	800b66c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d114      	bne.n	800b660 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b636:	6879      	ldr	r1, [r7, #4]
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	4613      	mov	r3, r2
 800b63c:	00db      	lsls	r3, r3, #3
 800b63e:	4413      	add	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	440b      	add	r3, r1
 800b644:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d108      	bne.n	800b660 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6818      	ldr	r0, [r3, #0]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b658:	461a      	mov	r2, r3
 800b65a:	2100      	movs	r1, #0
 800b65c:	f003 f9e8 	bl	800ea30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	b2db      	uxtb	r3, r3
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f005 fcb6 	bl	8010fd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3720      	adds	r7, #32
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	4f54300a 	.word	0x4f54300a
 800b67c:	4f54310a 	.word	0x4f54310a

0800b680 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	333c      	adds	r3, #60	; 0x3c
 800b698:	3304      	adds	r3, #4
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	4a15      	ldr	r2, [pc, #84]	; (800b708 <PCD_EP_OutSetupPacket_int+0x88>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d90e      	bls.n	800b6d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d009      	beq.n	800b6d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f005 fc6d 	bl	8010fb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4a0a      	ldr	r2, [pc, #40]	; (800b708 <PCD_EP_OutSetupPacket_int+0x88>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d90c      	bls.n	800b6fc <PCD_EP_OutSetupPacket_int+0x7c>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d108      	bne.n	800b6fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6818      	ldr	r0, [r3, #0]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	2101      	movs	r1, #1
 800b6f8:	f003 f99a 	bl	800ea30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	4f54300a 	.word	0x4f54300a

0800b70c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	460b      	mov	r3, r1
 800b716:	70fb      	strb	r3, [r7, #3]
 800b718:	4613      	mov	r3, r2
 800b71a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b724:	78fb      	ldrb	r3, [r7, #3]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d107      	bne.n	800b73a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b72a:	883b      	ldrh	r3, [r7, #0]
 800b72c:	0419      	lsls	r1, r3, #16
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68ba      	ldr	r2, [r7, #8]
 800b734:	430a      	orrs	r2, r1
 800b736:	629a      	str	r2, [r3, #40]	; 0x28
 800b738:	e028      	b.n	800b78c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b740:	0c1b      	lsrs	r3, r3, #16
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	4413      	add	r3, r2
 800b746:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b748:	2300      	movs	r3, #0
 800b74a:	73fb      	strb	r3, [r7, #15]
 800b74c:	e00d      	b.n	800b76a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	7bfb      	ldrb	r3, [r7, #15]
 800b754:	3340      	adds	r3, #64	; 0x40
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	0c1b      	lsrs	r3, r3, #16
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	4413      	add	r3, r2
 800b762:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b764:	7bfb      	ldrb	r3, [r7, #15]
 800b766:	3301      	adds	r3, #1
 800b768:	73fb      	strb	r3, [r7, #15]
 800b76a:	7bfa      	ldrb	r2, [r7, #15]
 800b76c:	78fb      	ldrb	r3, [r7, #3]
 800b76e:	3b01      	subs	r3, #1
 800b770:	429a      	cmp	r2, r3
 800b772:	d3ec      	bcc.n	800b74e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b774:	883b      	ldrh	r3, [r7, #0]
 800b776:	0418      	lsls	r0, r3, #16
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6819      	ldr	r1, [r3, #0]
 800b77c:	78fb      	ldrb	r3, [r7, #3]
 800b77e:	3b01      	subs	r3, #1
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	4302      	orrs	r2, r0
 800b784:	3340      	adds	r3, #64	; 0x40
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	440b      	add	r3, r1
 800b78a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b79a:	b480      	push	{r7}
 800b79c:	b083      	sub	sp, #12
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	887a      	ldrh	r2, [r7, #2]
 800b7ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b7c8:	bf00      	nop
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e267      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d075      	beq.n	800b8de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b7f2:	4b88      	ldr	r3, [pc, #544]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f003 030c 	and.w	r3, r3, #12
 800b7fa:	2b04      	cmp	r3, #4
 800b7fc:	d00c      	beq.n	800b818 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b7fe:	4b85      	ldr	r3, [pc, #532]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b806:	2b08      	cmp	r3, #8
 800b808:	d112      	bne.n	800b830 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b80a:	4b82      	ldr	r3, [pc, #520]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b816:	d10b      	bne.n	800b830 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b818:	4b7e      	ldr	r3, [pc, #504]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b820:	2b00      	cmp	r3, #0
 800b822:	d05b      	beq.n	800b8dc <HAL_RCC_OscConfig+0x108>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d157      	bne.n	800b8dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e242      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b838:	d106      	bne.n	800b848 <HAL_RCC_OscConfig+0x74>
 800b83a:	4b76      	ldr	r3, [pc, #472]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a75      	ldr	r2, [pc, #468]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b844:	6013      	str	r3, [r2, #0]
 800b846:	e01d      	b.n	800b884 <HAL_RCC_OscConfig+0xb0>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b850:	d10c      	bne.n	800b86c <HAL_RCC_OscConfig+0x98>
 800b852:	4b70      	ldr	r3, [pc, #448]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a6f      	ldr	r2, [pc, #444]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	4b6d      	ldr	r3, [pc, #436]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a6c      	ldr	r2, [pc, #432]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	e00b      	b.n	800b884 <HAL_RCC_OscConfig+0xb0>
 800b86c:	4b69      	ldr	r3, [pc, #420]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a68      	ldr	r2, [pc, #416]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b876:	6013      	str	r3, [r2, #0]
 800b878:	4b66      	ldr	r3, [pc, #408]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a65      	ldr	r2, [pc, #404]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b87e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d013      	beq.n	800b8b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b88c:	f7fd f94a 	bl	8008b24 <HAL_GetTick>
 800b890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b892:	e008      	b.n	800b8a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b894:	f7fd f946 	bl	8008b24 <HAL_GetTick>
 800b898:	4602      	mov	r2, r0
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	2b64      	cmp	r3, #100	; 0x64
 800b8a0:	d901      	bls.n	800b8a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e207      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8a6:	4b5b      	ldr	r3, [pc, #364]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d0f0      	beq.n	800b894 <HAL_RCC_OscConfig+0xc0>
 800b8b2:	e014      	b.n	800b8de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8b4:	f7fd f936 	bl	8008b24 <HAL_GetTick>
 800b8b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8ba:	e008      	b.n	800b8ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b8bc:	f7fd f932 	bl	8008b24 <HAL_GetTick>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	2b64      	cmp	r3, #100	; 0x64
 800b8c8:	d901      	bls.n	800b8ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	e1f3      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8ce:	4b51      	ldr	r3, [pc, #324]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1f0      	bne.n	800b8bc <HAL_RCC_OscConfig+0xe8>
 800b8da:	e000      	b.n	800b8de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f003 0302 	and.w	r3, r3, #2
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d063      	beq.n	800b9b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b8ea:	4b4a      	ldr	r3, [pc, #296]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	f003 030c 	and.w	r3, r3, #12
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00b      	beq.n	800b90e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b8f6:	4b47      	ldr	r3, [pc, #284]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b8fe:	2b08      	cmp	r3, #8
 800b900:	d11c      	bne.n	800b93c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b902:	4b44      	ldr	r3, [pc, #272]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d116      	bne.n	800b93c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b90e:	4b41      	ldr	r3, [pc, #260]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 0302 	and.w	r3, r3, #2
 800b916:	2b00      	cmp	r3, #0
 800b918:	d005      	beq.n	800b926 <HAL_RCC_OscConfig+0x152>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d001      	beq.n	800b926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e1c7      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b926:	4b3b      	ldr	r3, [pc, #236]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	00db      	lsls	r3, r3, #3
 800b934:	4937      	ldr	r1, [pc, #220]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b936:	4313      	orrs	r3, r2
 800b938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b93a:	e03a      	b.n	800b9b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d020      	beq.n	800b986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b944:	4b34      	ldr	r3, [pc, #208]	; (800ba18 <HAL_RCC_OscConfig+0x244>)
 800b946:	2201      	movs	r2, #1
 800b948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b94a:	f7fd f8eb 	bl	8008b24 <HAL_GetTick>
 800b94e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b950:	e008      	b.n	800b964 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b952:	f7fd f8e7 	bl	8008b24 <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d901      	bls.n	800b964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b960:	2303      	movs	r3, #3
 800b962:	e1a8      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b964:	4b2b      	ldr	r3, [pc, #172]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 0302 	and.w	r3, r3, #2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0f0      	beq.n	800b952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b970:	4b28      	ldr	r3, [pc, #160]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	00db      	lsls	r3, r3, #3
 800b97e:	4925      	ldr	r1, [pc, #148]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b980:	4313      	orrs	r3, r2
 800b982:	600b      	str	r3, [r1, #0]
 800b984:	e015      	b.n	800b9b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b986:	4b24      	ldr	r3, [pc, #144]	; (800ba18 <HAL_RCC_OscConfig+0x244>)
 800b988:	2200      	movs	r2, #0
 800b98a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b98c:	f7fd f8ca 	bl	8008b24 <HAL_GetTick>
 800b990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b992:	e008      	b.n	800b9a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b994:	f7fd f8c6 	bl	8008b24 <HAL_GetTick>
 800b998:	4602      	mov	r2, r0
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d901      	bls.n	800b9a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	e187      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9a6:	4b1b      	ldr	r3, [pc, #108]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 0302 	and.w	r3, r3, #2
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1f0      	bne.n	800b994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 0308 	and.w	r3, r3, #8
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d036      	beq.n	800ba2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d016      	beq.n	800b9f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b9c6:	4b15      	ldr	r3, [pc, #84]	; (800ba1c <HAL_RCC_OscConfig+0x248>)
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9cc:	f7fd f8aa 	bl	8008b24 <HAL_GetTick>
 800b9d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9d2:	e008      	b.n	800b9e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b9d4:	f7fd f8a6 	bl	8008b24 <HAL_GetTick>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d901      	bls.n	800b9e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	e167      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ba14 <HAL_RCC_OscConfig+0x240>)
 800b9e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9ea:	f003 0302 	and.w	r3, r3, #2
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d0f0      	beq.n	800b9d4 <HAL_RCC_OscConfig+0x200>
 800b9f2:	e01b      	b.n	800ba2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9f4:	4b09      	ldr	r3, [pc, #36]	; (800ba1c <HAL_RCC_OscConfig+0x248>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b9fa:	f7fd f893 	bl	8008b24 <HAL_GetTick>
 800b9fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba00:	e00e      	b.n	800ba20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ba02:	f7fd f88f 	bl	8008b24 <HAL_GetTick>
 800ba06:	4602      	mov	r2, r0
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d907      	bls.n	800ba20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e150      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
 800ba14:	40023800 	.word	0x40023800
 800ba18:	42470000 	.word	0x42470000
 800ba1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba20:	4b88      	ldr	r3, [pc, #544]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800ba22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba24:	f003 0302 	and.w	r3, r3, #2
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1ea      	bne.n	800ba02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 0304 	and.w	r3, r3, #4
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 8097 	beq.w	800bb68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba3e:	4b81      	ldr	r3, [pc, #516]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800ba40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10f      	bne.n	800ba6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	60bb      	str	r3, [r7, #8]
 800ba4e:	4b7d      	ldr	r3, [pc, #500]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800ba50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba52:	4a7c      	ldr	r2, [pc, #496]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800ba54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba58:	6413      	str	r3, [r2, #64]	; 0x40
 800ba5a:	4b7a      	ldr	r3, [pc, #488]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800ba5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba62:	60bb      	str	r3, [r7, #8]
 800ba64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba66:	2301      	movs	r3, #1
 800ba68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba6a:	4b77      	ldr	r3, [pc, #476]	; (800bc48 <HAL_RCC_OscConfig+0x474>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d118      	bne.n	800baa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ba76:	4b74      	ldr	r3, [pc, #464]	; (800bc48 <HAL_RCC_OscConfig+0x474>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a73      	ldr	r2, [pc, #460]	; (800bc48 <HAL_RCC_OscConfig+0x474>)
 800ba7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba82:	f7fd f84f 	bl	8008b24 <HAL_GetTick>
 800ba86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba88:	e008      	b.n	800ba9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba8a:	f7fd f84b 	bl	8008b24 <HAL_GetTick>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d901      	bls.n	800ba9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ba98:	2303      	movs	r3, #3
 800ba9a:	e10c      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba9c:	4b6a      	ldr	r3, [pc, #424]	; (800bc48 <HAL_RCC_OscConfig+0x474>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d0f0      	beq.n	800ba8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d106      	bne.n	800babe <HAL_RCC_OscConfig+0x2ea>
 800bab0:	4b64      	ldr	r3, [pc, #400]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bab4:	4a63      	ldr	r2, [pc, #396]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bab6:	f043 0301 	orr.w	r3, r3, #1
 800baba:	6713      	str	r3, [r2, #112]	; 0x70
 800babc:	e01c      	b.n	800baf8 <HAL_RCC_OscConfig+0x324>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	2b05      	cmp	r3, #5
 800bac4:	d10c      	bne.n	800bae0 <HAL_RCC_OscConfig+0x30c>
 800bac6:	4b5f      	ldr	r3, [pc, #380]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baca:	4a5e      	ldr	r2, [pc, #376]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bacc:	f043 0304 	orr.w	r3, r3, #4
 800bad0:	6713      	str	r3, [r2, #112]	; 0x70
 800bad2:	4b5c      	ldr	r3, [pc, #368]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad6:	4a5b      	ldr	r2, [pc, #364]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bad8:	f043 0301 	orr.w	r3, r3, #1
 800badc:	6713      	str	r3, [r2, #112]	; 0x70
 800bade:	e00b      	b.n	800baf8 <HAL_RCC_OscConfig+0x324>
 800bae0:	4b58      	ldr	r3, [pc, #352]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bae4:	4a57      	ldr	r2, [pc, #348]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bae6:	f023 0301 	bic.w	r3, r3, #1
 800baea:	6713      	str	r3, [r2, #112]	; 0x70
 800baec:	4b55      	ldr	r3, [pc, #340]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800baee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf0:	4a54      	ldr	r2, [pc, #336]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800baf2:	f023 0304 	bic.w	r3, r3, #4
 800baf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d015      	beq.n	800bb2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb00:	f7fd f810 	bl	8008b24 <HAL_GetTick>
 800bb04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb06:	e00a      	b.n	800bb1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb08:	f7fd f80c 	bl	8008b24 <HAL_GetTick>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d901      	bls.n	800bb1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	e0cb      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb1e:	4b49      	ldr	r3, [pc, #292]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb22:	f003 0302 	and.w	r3, r3, #2
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d0ee      	beq.n	800bb08 <HAL_RCC_OscConfig+0x334>
 800bb2a:	e014      	b.n	800bb56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb2c:	f7fc fffa 	bl	8008b24 <HAL_GetTick>
 800bb30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb32:	e00a      	b.n	800bb4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb34:	f7fc fff6 	bl	8008b24 <HAL_GetTick>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d901      	bls.n	800bb4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e0b5      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb4a:	4b3e      	ldr	r3, [pc, #248]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bb4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb4e:	f003 0302 	and.w	r3, r3, #2
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1ee      	bne.n	800bb34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d105      	bne.n	800bb68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb5c:	4b39      	ldr	r3, [pc, #228]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb60:	4a38      	ldr	r2, [pc, #224]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bb62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f000 80a1 	beq.w	800bcb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bb72:	4b34      	ldr	r3, [pc, #208]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	f003 030c 	and.w	r3, r3, #12
 800bb7a:	2b08      	cmp	r3, #8
 800bb7c:	d05c      	beq.n	800bc38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d141      	bne.n	800bc0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb86:	4b31      	ldr	r3, [pc, #196]	; (800bc4c <HAL_RCC_OscConfig+0x478>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb8c:	f7fc ffca 	bl	8008b24 <HAL_GetTick>
 800bb90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb92:	e008      	b.n	800bba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb94:	f7fc ffc6 	bl	8008b24 <HAL_GetTick>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	1ad3      	subs	r3, r2, r3
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d901      	bls.n	800bba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e087      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bba6:	4b27      	ldr	r3, [pc, #156]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1f0      	bne.n	800bb94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	69da      	ldr	r2, [r3, #28]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	431a      	orrs	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc0:	019b      	lsls	r3, r3, #6
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc8:	085b      	lsrs	r3, r3, #1
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	041b      	lsls	r3, r3, #16
 800bbce:	431a      	orrs	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd4:	061b      	lsls	r3, r3, #24
 800bbd6:	491b      	ldr	r1, [pc, #108]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bbdc:	4b1b      	ldr	r3, [pc, #108]	; (800bc4c <HAL_RCC_OscConfig+0x478>)
 800bbde:	2201      	movs	r2, #1
 800bbe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbe2:	f7fc ff9f 	bl	8008b24 <HAL_GetTick>
 800bbe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bbe8:	e008      	b.n	800bbfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bbea:	f7fc ff9b 	bl	8008b24 <HAL_GetTick>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	2b02      	cmp	r3, #2
 800bbf6:	d901      	bls.n	800bbfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	e05c      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bbfc:	4b11      	ldr	r3, [pc, #68]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d0f0      	beq.n	800bbea <HAL_RCC_OscConfig+0x416>
 800bc08:	e054      	b.n	800bcb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc0a:	4b10      	ldr	r3, [pc, #64]	; (800bc4c <HAL_RCC_OscConfig+0x478>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc10:	f7fc ff88 	bl	8008b24 <HAL_GetTick>
 800bc14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc16:	e008      	b.n	800bc2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc18:	f7fc ff84 	bl	8008b24 <HAL_GetTick>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d901      	bls.n	800bc2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800bc26:	2303      	movs	r3, #3
 800bc28:	e045      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc2a:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <HAL_RCC_OscConfig+0x470>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1f0      	bne.n	800bc18 <HAL_RCC_OscConfig+0x444>
 800bc36:	e03d      	b.n	800bcb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	699b      	ldr	r3, [r3, #24]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d107      	bne.n	800bc50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	e038      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
 800bc44:	40023800 	.word	0x40023800
 800bc48:	40007000 	.word	0x40007000
 800bc4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bc50:	4b1b      	ldr	r3, [pc, #108]	; (800bcc0 <HAL_RCC_OscConfig+0x4ec>)
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d028      	beq.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d121      	bne.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d11a      	bne.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bc80:	4013      	ands	r3, r2
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d111      	bne.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc96:	085b      	lsrs	r3, r3, #1
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d107      	bne.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d001      	beq.n	800bcb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e000      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3718      	adds	r7, #24
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	40023800 	.word	0x40023800

0800bcc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d101      	bne.n	800bcd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e0cc      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bcd8:	4b68      	ldr	r3, [pc, #416]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0307 	and.w	r3, r3, #7
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d90c      	bls.n	800bd00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bce6:	4b65      	ldr	r3, [pc, #404]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	b2d2      	uxtb	r2, r2
 800bcec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcee:	4b63      	ldr	r3, [pc, #396]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 0307 	and.w	r3, r3, #7
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d001      	beq.n	800bd00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e0b8      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 0302 	and.w	r3, r3, #2
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d020      	beq.n	800bd4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 0304 	and.w	r3, r3, #4
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d005      	beq.n	800bd24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bd18:	4b59      	ldr	r3, [pc, #356]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	4a58      	ldr	r2, [pc, #352]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bd22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 0308 	and.w	r3, r3, #8
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d005      	beq.n	800bd3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bd30:	4b53      	ldr	r3, [pc, #332]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	4a52      	ldr	r2, [pc, #328]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bd3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd3c:	4b50      	ldr	r3, [pc, #320]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	494d      	ldr	r1, [pc, #308]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d044      	beq.n	800bde4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d107      	bne.n	800bd72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd62:	4b47      	ldr	r3, [pc, #284]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d119      	bne.n	800bda2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e07f      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d003      	beq.n	800bd82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd7e:	2b03      	cmp	r3, #3
 800bd80:	d107      	bne.n	800bd92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd82:	4b3f      	ldr	r3, [pc, #252]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d109      	bne.n	800bda2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e06f      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd92:	4b3b      	ldr	r3, [pc, #236]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e067      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bda2:	4b37      	ldr	r3, [pc, #220]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	f023 0203 	bic.w	r2, r3, #3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	4934      	ldr	r1, [pc, #208]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bdb4:	f7fc feb6 	bl	8008b24 <HAL_GetTick>
 800bdb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdba:	e00a      	b.n	800bdd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdbc:	f7fc feb2 	bl	8008b24 <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d901      	bls.n	800bdd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	e04f      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdd2:	4b2b      	ldr	r3, [pc, #172]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	f003 020c 	and.w	r2, r3, #12
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d1eb      	bne.n	800bdbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bde4:	4b25      	ldr	r3, [pc, #148]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 0307 	and.w	r3, r3, #7
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d20c      	bcs.n	800be0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdf2:	4b22      	ldr	r3, [pc, #136]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bdf4:	683a      	ldr	r2, [r7, #0]
 800bdf6:	b2d2      	uxtb	r2, r2
 800bdf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdfa:	4b20      	ldr	r3, [pc, #128]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 0307 	and.w	r3, r3, #7
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	429a      	cmp	r2, r3
 800be06:	d001      	beq.n	800be0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	e032      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 0304 	and.w	r3, r3, #4
 800be14:	2b00      	cmp	r3, #0
 800be16:	d008      	beq.n	800be2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800be18:	4b19      	ldr	r3, [pc, #100]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	4916      	ldr	r1, [pc, #88]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800be26:	4313      	orrs	r3, r2
 800be28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f003 0308 	and.w	r3, r3, #8
 800be32:	2b00      	cmp	r3, #0
 800be34:	d009      	beq.n	800be4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800be36:	4b12      	ldr	r3, [pc, #72]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	00db      	lsls	r3, r3, #3
 800be44:	490e      	ldr	r1, [pc, #56]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800be46:	4313      	orrs	r3, r2
 800be48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800be4a:	f000 f821 	bl	800be90 <HAL_RCC_GetSysClockFreq>
 800be4e:	4602      	mov	r2, r0
 800be50:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	091b      	lsrs	r3, r3, #4
 800be56:	f003 030f 	and.w	r3, r3, #15
 800be5a:	490a      	ldr	r1, [pc, #40]	; (800be84 <HAL_RCC_ClockConfig+0x1c0>)
 800be5c:	5ccb      	ldrb	r3, [r1, r3]
 800be5e:	fa22 f303 	lsr.w	r3, r2, r3
 800be62:	4a09      	ldr	r2, [pc, #36]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800be64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800be66:	4b09      	ldr	r3, [pc, #36]	; (800be8c <HAL_RCC_ClockConfig+0x1c8>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fc fe16 	bl	8008a9c <HAL_InitTick>

  return HAL_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	40023c00 	.word	0x40023c00
 800be80:	40023800 	.word	0x40023800
 800be84:	08016e8c 	.word	0x08016e8c
 800be88:	200003d4 	.word	0x200003d4
 800be8c:	200003d8 	.word	0x200003d8

0800be90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be94:	b094      	sub	sp, #80	; 0x50
 800be96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800be98:	2300      	movs	r3, #0
 800be9a:	647b      	str	r3, [r7, #68]	; 0x44
 800be9c:	2300      	movs	r3, #0
 800be9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bea0:	2300      	movs	r3, #0
 800bea2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800bea4:	2300      	movs	r3, #0
 800bea6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bea8:	4b79      	ldr	r3, [pc, #484]	; (800c090 <HAL_RCC_GetSysClockFreq+0x200>)
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	f003 030c 	and.w	r3, r3, #12
 800beb0:	2b08      	cmp	r3, #8
 800beb2:	d00d      	beq.n	800bed0 <HAL_RCC_GetSysClockFreq+0x40>
 800beb4:	2b08      	cmp	r3, #8
 800beb6:	f200 80e1 	bhi.w	800c07c <HAL_RCC_GetSysClockFreq+0x1ec>
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d002      	beq.n	800bec4 <HAL_RCC_GetSysClockFreq+0x34>
 800bebe:	2b04      	cmp	r3, #4
 800bec0:	d003      	beq.n	800beca <HAL_RCC_GetSysClockFreq+0x3a>
 800bec2:	e0db      	b.n	800c07c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bec4:	4b73      	ldr	r3, [pc, #460]	; (800c094 <HAL_RCC_GetSysClockFreq+0x204>)
 800bec6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800bec8:	e0db      	b.n	800c082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800beca:	4b73      	ldr	r3, [pc, #460]	; (800c098 <HAL_RCC_GetSysClockFreq+0x208>)
 800becc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bece:	e0d8      	b.n	800c082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bed0:	4b6f      	ldr	r3, [pc, #444]	; (800c090 <HAL_RCC_GetSysClockFreq+0x200>)
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bed8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800beda:	4b6d      	ldr	r3, [pc, #436]	; (800c090 <HAL_RCC_GetSysClockFreq+0x200>)
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d063      	beq.n	800bfae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bee6:	4b6a      	ldr	r3, [pc, #424]	; (800c090 <HAL_RCC_GetSysClockFreq+0x200>)
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	099b      	lsrs	r3, r3, #6
 800beec:	2200      	movs	r2, #0
 800beee:	63bb      	str	r3, [r7, #56]	; 0x38
 800bef0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef8:	633b      	str	r3, [r7, #48]	; 0x30
 800befa:	2300      	movs	r3, #0
 800befc:	637b      	str	r3, [r7, #52]	; 0x34
 800befe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bf02:	4622      	mov	r2, r4
 800bf04:	462b      	mov	r3, r5
 800bf06:	f04f 0000 	mov.w	r0, #0
 800bf0a:	f04f 0100 	mov.w	r1, #0
 800bf0e:	0159      	lsls	r1, r3, #5
 800bf10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bf14:	0150      	lsls	r0, r2, #5
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	1a51      	subs	r1, r2, r1
 800bf1e:	6139      	str	r1, [r7, #16]
 800bf20:	4629      	mov	r1, r5
 800bf22:	eb63 0301 	sbc.w	r3, r3, r1
 800bf26:	617b      	str	r3, [r7, #20]
 800bf28:	f04f 0200 	mov.w	r2, #0
 800bf2c:	f04f 0300 	mov.w	r3, #0
 800bf30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf34:	4659      	mov	r1, fp
 800bf36:	018b      	lsls	r3, r1, #6
 800bf38:	4651      	mov	r1, sl
 800bf3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bf3e:	4651      	mov	r1, sl
 800bf40:	018a      	lsls	r2, r1, #6
 800bf42:	4651      	mov	r1, sl
 800bf44:	ebb2 0801 	subs.w	r8, r2, r1
 800bf48:	4659      	mov	r1, fp
 800bf4a:	eb63 0901 	sbc.w	r9, r3, r1
 800bf4e:	f04f 0200 	mov.w	r2, #0
 800bf52:	f04f 0300 	mov.w	r3, #0
 800bf56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bf5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bf5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bf62:	4690      	mov	r8, r2
 800bf64:	4699      	mov	r9, r3
 800bf66:	4623      	mov	r3, r4
 800bf68:	eb18 0303 	adds.w	r3, r8, r3
 800bf6c:	60bb      	str	r3, [r7, #8]
 800bf6e:	462b      	mov	r3, r5
 800bf70:	eb49 0303 	adc.w	r3, r9, r3
 800bf74:	60fb      	str	r3, [r7, #12]
 800bf76:	f04f 0200 	mov.w	r2, #0
 800bf7a:	f04f 0300 	mov.w	r3, #0
 800bf7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800bf82:	4629      	mov	r1, r5
 800bf84:	024b      	lsls	r3, r1, #9
 800bf86:	4621      	mov	r1, r4
 800bf88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	024a      	lsls	r2, r1, #9
 800bf90:	4610      	mov	r0, r2
 800bf92:	4619      	mov	r1, r3
 800bf94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf96:	2200      	movs	r2, #0
 800bf98:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bfa0:	f7f4 fe72 	bl	8000c88 <__aeabi_uldivmod>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfac:	e058      	b.n	800c060 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bfae:	4b38      	ldr	r3, [pc, #224]	; (800c090 <HAL_RCC_GetSysClockFreq+0x200>)
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	099b      	lsrs	r3, r3, #6
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	4611      	mov	r1, r2
 800bfba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800bfbe:	623b      	str	r3, [r7, #32]
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	627b      	str	r3, [r7, #36]	; 0x24
 800bfc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800bfc8:	4642      	mov	r2, r8
 800bfca:	464b      	mov	r3, r9
 800bfcc:	f04f 0000 	mov.w	r0, #0
 800bfd0:	f04f 0100 	mov.w	r1, #0
 800bfd4:	0159      	lsls	r1, r3, #5
 800bfd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bfda:	0150      	lsls	r0, r2, #5
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	4641      	mov	r1, r8
 800bfe2:	ebb2 0a01 	subs.w	sl, r2, r1
 800bfe6:	4649      	mov	r1, r9
 800bfe8:	eb63 0b01 	sbc.w	fp, r3, r1
 800bfec:	f04f 0200 	mov.w	r2, #0
 800bff0:	f04f 0300 	mov.w	r3, #0
 800bff4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800bff8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800bffc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c000:	ebb2 040a 	subs.w	r4, r2, sl
 800c004:	eb63 050b 	sbc.w	r5, r3, fp
 800c008:	f04f 0200 	mov.w	r2, #0
 800c00c:	f04f 0300 	mov.w	r3, #0
 800c010:	00eb      	lsls	r3, r5, #3
 800c012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c016:	00e2      	lsls	r2, r4, #3
 800c018:	4614      	mov	r4, r2
 800c01a:	461d      	mov	r5, r3
 800c01c:	4643      	mov	r3, r8
 800c01e:	18e3      	adds	r3, r4, r3
 800c020:	603b      	str	r3, [r7, #0]
 800c022:	464b      	mov	r3, r9
 800c024:	eb45 0303 	adc.w	r3, r5, r3
 800c028:	607b      	str	r3, [r7, #4]
 800c02a:	f04f 0200 	mov.w	r2, #0
 800c02e:	f04f 0300 	mov.w	r3, #0
 800c032:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c036:	4629      	mov	r1, r5
 800c038:	028b      	lsls	r3, r1, #10
 800c03a:	4621      	mov	r1, r4
 800c03c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c040:	4621      	mov	r1, r4
 800c042:	028a      	lsls	r2, r1, #10
 800c044:	4610      	mov	r0, r2
 800c046:	4619      	mov	r1, r3
 800c048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c04a:	2200      	movs	r2, #0
 800c04c:	61bb      	str	r3, [r7, #24]
 800c04e:	61fa      	str	r2, [r7, #28]
 800c050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c054:	f7f4 fe18 	bl	8000c88 <__aeabi_uldivmod>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	4613      	mov	r3, r2
 800c05e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c060:	4b0b      	ldr	r3, [pc, #44]	; (800c090 <HAL_RCC_GetSysClockFreq+0x200>)
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	0c1b      	lsrs	r3, r3, #16
 800c066:	f003 0303 	and.w	r3, r3, #3
 800c06a:	3301      	adds	r3, #1
 800c06c:	005b      	lsls	r3, r3, #1
 800c06e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800c070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c074:	fbb2 f3f3 	udiv	r3, r2, r3
 800c078:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c07a:	e002      	b.n	800c082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c07c:	4b05      	ldr	r3, [pc, #20]	; (800c094 <HAL_RCC_GetSysClockFreq+0x204>)
 800c07e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c080:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c084:	4618      	mov	r0, r3
 800c086:	3750      	adds	r7, #80	; 0x50
 800c088:	46bd      	mov	sp, r7
 800c08a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c08e:	bf00      	nop
 800c090:	40023800 	.word	0x40023800
 800c094:	00f42400 	.word	0x00f42400
 800c098:	007a1200 	.word	0x007a1200

0800c09c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c09c:	b480      	push	{r7}
 800c09e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c0a0:	4b03      	ldr	r3, [pc, #12]	; (800c0b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	200003d4 	.word	0x200003d4

0800c0b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c0b8:	f7ff fff0 	bl	800c09c <HAL_RCC_GetHCLKFreq>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	4b05      	ldr	r3, [pc, #20]	; (800c0d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	0a9b      	lsrs	r3, r3, #10
 800c0c4:	f003 0307 	and.w	r3, r3, #7
 800c0c8:	4903      	ldr	r1, [pc, #12]	; (800c0d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c0ca:	5ccb      	ldrb	r3, [r1, r3]
 800c0cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	40023800 	.word	0x40023800
 800c0d8:	08016e9c 	.word	0x08016e9c

0800c0dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c0e0:	f7ff ffdc 	bl	800c09c <HAL_RCC_GetHCLKFreq>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	0b5b      	lsrs	r3, r3, #13
 800c0ec:	f003 0307 	and.w	r3, r3, #7
 800c0f0:	4903      	ldr	r1, [pc, #12]	; (800c100 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c0f2:	5ccb      	ldrb	r3, [r1, r3]
 800c0f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	40023800 	.word	0x40023800
 800c100:	08016e9c 	.word	0x08016e9c

0800c104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d101      	bne.n	800c116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	e07b      	b.n	800c20e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d108      	bne.n	800c130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c126:	d009      	beq.n	800c13c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	61da      	str	r2, [r3, #28]
 800c12e:	e005      	b.n	800c13c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d106      	bne.n	800c15c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7fc fa5c 	bl	8008614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c172:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c184:	431a      	orrs	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c18e:	431a      	orrs	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	f003 0302 	and.w	r3, r3, #2
 800c198:	431a      	orrs	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	f003 0301 	and.w	r3, r3, #1
 800c1a2:	431a      	orrs	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	69db      	ldr	r3, [r3, #28]
 800c1b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1b6:	431a      	orrs	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6a1b      	ldr	r3, [r3, #32]
 800c1bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1c0:	ea42 0103 	orr.w	r1, r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	430a      	orrs	r2, r1
 800c1d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	0c1b      	lsrs	r3, r3, #16
 800c1da:	f003 0104 	and.w	r1, r3, #4
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e2:	f003 0210 	and.w	r2, r3, #16
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	430a      	orrs	r2, r1
 800c1ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	69da      	ldr	r2, [r3, #28]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3708      	adds	r7, #8
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
	...

0800c218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d001      	beq.n	800c230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e04e      	b.n	800c2ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2202      	movs	r2, #2
 800c234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68da      	ldr	r2, [r3, #12]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f042 0201 	orr.w	r2, r2, #1
 800c246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a23      	ldr	r2, [pc, #140]	; (800c2dc <HAL_TIM_Base_Start_IT+0xc4>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d022      	beq.n	800c298 <HAL_TIM_Base_Start_IT+0x80>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c25a:	d01d      	beq.n	800c298 <HAL_TIM_Base_Start_IT+0x80>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a1f      	ldr	r2, [pc, #124]	; (800c2e0 <HAL_TIM_Base_Start_IT+0xc8>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d018      	beq.n	800c298 <HAL_TIM_Base_Start_IT+0x80>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a1e      	ldr	r2, [pc, #120]	; (800c2e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d013      	beq.n	800c298 <HAL_TIM_Base_Start_IT+0x80>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a1c      	ldr	r2, [pc, #112]	; (800c2e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d00e      	beq.n	800c298 <HAL_TIM_Base_Start_IT+0x80>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a1b      	ldr	r2, [pc, #108]	; (800c2ec <HAL_TIM_Base_Start_IT+0xd4>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d009      	beq.n	800c298 <HAL_TIM_Base_Start_IT+0x80>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a19      	ldr	r2, [pc, #100]	; (800c2f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d004      	beq.n	800c298 <HAL_TIM_Base_Start_IT+0x80>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a18      	ldr	r2, [pc, #96]	; (800c2f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d111      	bne.n	800c2bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	f003 0307 	and.w	r3, r3, #7
 800c2a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2b06      	cmp	r3, #6
 800c2a8:	d010      	beq.n	800c2cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f042 0201 	orr.w	r2, r2, #1
 800c2b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2ba:	e007      	b.n	800c2cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f042 0201 	orr.w	r2, r2, #1
 800c2ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3714      	adds	r7, #20
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	40010000 	.word	0x40010000
 800c2e0:	40000400 	.word	0x40000400
 800c2e4:	40000800 	.word	0x40000800
 800c2e8:	40000c00 	.word	0x40000c00
 800c2ec:	40010400 	.word	0x40010400
 800c2f0:	40014000 	.word	0x40014000
 800c2f4:	40001800 	.word	0x40001800

0800c2f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e041      	b.n	800c38e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c310:	b2db      	uxtb	r3, r3
 800c312:	2b00      	cmp	r3, #0
 800c314:	d106      	bne.n	800c324 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7fc f9c0 	bl	80086a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2202      	movs	r2, #2
 800c328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	3304      	adds	r3, #4
 800c334:	4619      	mov	r1, r3
 800c336:	4610      	mov	r0, r2
 800c338:	f000 f9b8 	bl	800c6ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2201      	movs	r2, #1
 800c370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2201      	movs	r2, #1
 800c378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2201      	movs	r2, #1
 800c380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3708      	adds	r7, #8
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
	...

0800c398 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d109      	bne.n	800c3bc <HAL_TIM_PWM_Start+0x24>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	bf14      	ite	ne
 800c3b4:	2301      	movne	r3, #1
 800c3b6:	2300      	moveq	r3, #0
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	e022      	b.n	800c402 <HAL_TIM_PWM_Start+0x6a>
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2b04      	cmp	r3, #4
 800c3c0:	d109      	bne.n	800c3d6 <HAL_TIM_PWM_Start+0x3e>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	bf14      	ite	ne
 800c3ce:	2301      	movne	r3, #1
 800c3d0:	2300      	moveq	r3, #0
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	e015      	b.n	800c402 <HAL_TIM_PWM_Start+0x6a>
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	2b08      	cmp	r3, #8
 800c3da:	d109      	bne.n	800c3f0 <HAL_TIM_PWM_Start+0x58>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	bf14      	ite	ne
 800c3e8:	2301      	movne	r3, #1
 800c3ea:	2300      	moveq	r3, #0
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	e008      	b.n	800c402 <HAL_TIM_PWM_Start+0x6a>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	bf14      	ite	ne
 800c3fc:	2301      	movne	r3, #1
 800c3fe:	2300      	moveq	r3, #0
 800c400:	b2db      	uxtb	r3, r3
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	e07c      	b.n	800c504 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d104      	bne.n	800c41a <HAL_TIM_PWM_Start+0x82>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2202      	movs	r2, #2
 800c414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c418:	e013      	b.n	800c442 <HAL_TIM_PWM_Start+0xaa>
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b04      	cmp	r3, #4
 800c41e:	d104      	bne.n	800c42a <HAL_TIM_PWM_Start+0x92>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2202      	movs	r2, #2
 800c424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c428:	e00b      	b.n	800c442 <HAL_TIM_PWM_Start+0xaa>
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b08      	cmp	r3, #8
 800c42e:	d104      	bne.n	800c43a <HAL_TIM_PWM_Start+0xa2>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2202      	movs	r2, #2
 800c434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c438:	e003      	b.n	800c442 <HAL_TIM_PWM_Start+0xaa>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2202      	movs	r2, #2
 800c43e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2201      	movs	r2, #1
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 fb7e 	bl	800cb4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a2d      	ldr	r2, [pc, #180]	; (800c50c <HAL_TIM_PWM_Start+0x174>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d004      	beq.n	800c464 <HAL_TIM_PWM_Start+0xcc>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a2c      	ldr	r2, [pc, #176]	; (800c510 <HAL_TIM_PWM_Start+0x178>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d101      	bne.n	800c468 <HAL_TIM_PWM_Start+0xd0>
 800c464:	2301      	movs	r3, #1
 800c466:	e000      	b.n	800c46a <HAL_TIM_PWM_Start+0xd2>
 800c468:	2300      	movs	r3, #0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d007      	beq.n	800c47e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c47c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a22      	ldr	r2, [pc, #136]	; (800c50c <HAL_TIM_PWM_Start+0x174>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d022      	beq.n	800c4ce <HAL_TIM_PWM_Start+0x136>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c490:	d01d      	beq.n	800c4ce <HAL_TIM_PWM_Start+0x136>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a1f      	ldr	r2, [pc, #124]	; (800c514 <HAL_TIM_PWM_Start+0x17c>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d018      	beq.n	800c4ce <HAL_TIM_PWM_Start+0x136>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a1d      	ldr	r2, [pc, #116]	; (800c518 <HAL_TIM_PWM_Start+0x180>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d013      	beq.n	800c4ce <HAL_TIM_PWM_Start+0x136>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a1c      	ldr	r2, [pc, #112]	; (800c51c <HAL_TIM_PWM_Start+0x184>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d00e      	beq.n	800c4ce <HAL_TIM_PWM_Start+0x136>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a16      	ldr	r2, [pc, #88]	; (800c510 <HAL_TIM_PWM_Start+0x178>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d009      	beq.n	800c4ce <HAL_TIM_PWM_Start+0x136>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a18      	ldr	r2, [pc, #96]	; (800c520 <HAL_TIM_PWM_Start+0x188>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d004      	beq.n	800c4ce <HAL_TIM_PWM_Start+0x136>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a16      	ldr	r2, [pc, #88]	; (800c524 <HAL_TIM_PWM_Start+0x18c>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d111      	bne.n	800c4f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	f003 0307 	and.w	r3, r3, #7
 800c4d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2b06      	cmp	r3, #6
 800c4de:	d010      	beq.n	800c502 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f042 0201 	orr.w	r2, r2, #1
 800c4ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4f0:	e007      	b.n	800c502 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f042 0201 	orr.w	r2, r2, #1
 800c500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c502:	2300      	movs	r3, #0
}
 800c504:	4618      	mov	r0, r3
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	40010000 	.word	0x40010000
 800c510:	40010400 	.word	0x40010400
 800c514:	40000400 	.word	0x40000400
 800c518:	40000800 	.word	0x40000800
 800c51c:	40000c00 	.word	0x40000c00
 800c520:	40014000 	.word	0x40014000
 800c524:	40001800 	.word	0x40001800

0800c528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d101      	bne.n	800c546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c542:	2302      	movs	r3, #2
 800c544:	e0ae      	b.n	800c6a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2201      	movs	r2, #1
 800c54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2b0c      	cmp	r3, #12
 800c552:	f200 809f 	bhi.w	800c694 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c556:	a201      	add	r2, pc, #4	; (adr r2, 800c55c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c55c:	0800c591 	.word	0x0800c591
 800c560:	0800c695 	.word	0x0800c695
 800c564:	0800c695 	.word	0x0800c695
 800c568:	0800c695 	.word	0x0800c695
 800c56c:	0800c5d1 	.word	0x0800c5d1
 800c570:	0800c695 	.word	0x0800c695
 800c574:	0800c695 	.word	0x0800c695
 800c578:	0800c695 	.word	0x0800c695
 800c57c:	0800c613 	.word	0x0800c613
 800c580:	0800c695 	.word	0x0800c695
 800c584:	0800c695 	.word	0x0800c695
 800c588:	0800c695 	.word	0x0800c695
 800c58c:	0800c653 	.word	0x0800c653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68b9      	ldr	r1, [r7, #8]
 800c596:	4618      	mov	r0, r3
 800c598:	f000 f928 	bl	800c7ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	699a      	ldr	r2, [r3, #24]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f042 0208 	orr.w	r2, r2, #8
 800c5aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	699a      	ldr	r2, [r3, #24]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f022 0204 	bic.w	r2, r2, #4
 800c5ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6999      	ldr	r1, [r3, #24]
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	691a      	ldr	r2, [r3, #16]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	430a      	orrs	r2, r1
 800c5cc:	619a      	str	r2, [r3, #24]
      break;
 800c5ce:	e064      	b.n	800c69a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	68b9      	ldr	r1, [r7, #8]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f000 f978 	bl	800c8cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	699a      	ldr	r2, [r3, #24]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	699a      	ldr	r2, [r3, #24]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6999      	ldr	r1, [r3, #24]
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	021a      	lsls	r2, r3, #8
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	430a      	orrs	r2, r1
 800c60e:	619a      	str	r2, [r3, #24]
      break;
 800c610:	e043      	b.n	800c69a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68b9      	ldr	r1, [r7, #8]
 800c618:	4618      	mov	r0, r3
 800c61a:	f000 f9cd 	bl	800c9b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	69da      	ldr	r2, [r3, #28]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f042 0208 	orr.w	r2, r2, #8
 800c62c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	69da      	ldr	r2, [r3, #28]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f022 0204 	bic.w	r2, r2, #4
 800c63c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	69d9      	ldr	r1, [r3, #28]
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	691a      	ldr	r2, [r3, #16]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	430a      	orrs	r2, r1
 800c64e:	61da      	str	r2, [r3, #28]
      break;
 800c650:	e023      	b.n	800c69a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68b9      	ldr	r1, [r7, #8]
 800c658:	4618      	mov	r0, r3
 800c65a:	f000 fa21 	bl	800caa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	69da      	ldr	r2, [r3, #28]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c66c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	69da      	ldr	r2, [r3, #28]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c67c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	69d9      	ldr	r1, [r3, #28]
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	021a      	lsls	r2, r3, #8
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	430a      	orrs	r2, r1
 800c690:	61da      	str	r2, [r3, #28]
      break;
 800c692:	e002      	b.n	800c69a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	75fb      	strb	r3, [r7, #23]
      break;
 800c698:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3718      	adds	r7, #24
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a40      	ldr	r2, [pc, #256]	; (800c7c0 <TIM_Base_SetConfig+0x114>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d013      	beq.n	800c6ec <TIM_Base_SetConfig+0x40>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6ca:	d00f      	beq.n	800c6ec <TIM_Base_SetConfig+0x40>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a3d      	ldr	r2, [pc, #244]	; (800c7c4 <TIM_Base_SetConfig+0x118>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d00b      	beq.n	800c6ec <TIM_Base_SetConfig+0x40>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a3c      	ldr	r2, [pc, #240]	; (800c7c8 <TIM_Base_SetConfig+0x11c>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d007      	beq.n	800c6ec <TIM_Base_SetConfig+0x40>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a3b      	ldr	r2, [pc, #236]	; (800c7cc <TIM_Base_SetConfig+0x120>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d003      	beq.n	800c6ec <TIM_Base_SetConfig+0x40>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a3a      	ldr	r2, [pc, #232]	; (800c7d0 <TIM_Base_SetConfig+0x124>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d108      	bne.n	800c6fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a2f      	ldr	r2, [pc, #188]	; (800c7c0 <TIM_Base_SetConfig+0x114>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d02b      	beq.n	800c75e <TIM_Base_SetConfig+0xb2>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c70c:	d027      	beq.n	800c75e <TIM_Base_SetConfig+0xb2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a2c      	ldr	r2, [pc, #176]	; (800c7c4 <TIM_Base_SetConfig+0x118>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d023      	beq.n	800c75e <TIM_Base_SetConfig+0xb2>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a2b      	ldr	r2, [pc, #172]	; (800c7c8 <TIM_Base_SetConfig+0x11c>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d01f      	beq.n	800c75e <TIM_Base_SetConfig+0xb2>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a2a      	ldr	r2, [pc, #168]	; (800c7cc <TIM_Base_SetConfig+0x120>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d01b      	beq.n	800c75e <TIM_Base_SetConfig+0xb2>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a29      	ldr	r2, [pc, #164]	; (800c7d0 <TIM_Base_SetConfig+0x124>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d017      	beq.n	800c75e <TIM_Base_SetConfig+0xb2>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a28      	ldr	r2, [pc, #160]	; (800c7d4 <TIM_Base_SetConfig+0x128>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d013      	beq.n	800c75e <TIM_Base_SetConfig+0xb2>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4a27      	ldr	r2, [pc, #156]	; (800c7d8 <TIM_Base_SetConfig+0x12c>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d00f      	beq.n	800c75e <TIM_Base_SetConfig+0xb2>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a26      	ldr	r2, [pc, #152]	; (800c7dc <TIM_Base_SetConfig+0x130>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d00b      	beq.n	800c75e <TIM_Base_SetConfig+0xb2>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a25      	ldr	r2, [pc, #148]	; (800c7e0 <TIM_Base_SetConfig+0x134>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d007      	beq.n	800c75e <TIM_Base_SetConfig+0xb2>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4a24      	ldr	r2, [pc, #144]	; (800c7e4 <TIM_Base_SetConfig+0x138>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d003      	beq.n	800c75e <TIM_Base_SetConfig+0xb2>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4a23      	ldr	r2, [pc, #140]	; (800c7e8 <TIM_Base_SetConfig+0x13c>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d108      	bne.n	800c770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	689a      	ldr	r2, [r3, #8]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a0a      	ldr	r2, [pc, #40]	; (800c7c0 <TIM_Base_SetConfig+0x114>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d003      	beq.n	800c7a4 <TIM_Base_SetConfig+0xf8>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4a0c      	ldr	r2, [pc, #48]	; (800c7d0 <TIM_Base_SetConfig+0x124>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d103      	bne.n	800c7ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	691a      	ldr	r2, [r3, #16]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	615a      	str	r2, [r3, #20]
}
 800c7b2:	bf00      	nop
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	40010000 	.word	0x40010000
 800c7c4:	40000400 	.word	0x40000400
 800c7c8:	40000800 	.word	0x40000800
 800c7cc:	40000c00 	.word	0x40000c00
 800c7d0:	40010400 	.word	0x40010400
 800c7d4:	40014000 	.word	0x40014000
 800c7d8:	40014400 	.word	0x40014400
 800c7dc:	40014800 	.word	0x40014800
 800c7e0:	40001800 	.word	0x40001800
 800c7e4:	40001c00 	.word	0x40001c00
 800c7e8:	40002000 	.word	0x40002000

0800c7ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b087      	sub	sp, #28
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a1b      	ldr	r3, [r3, #32]
 800c7fa:	f023 0201 	bic.w	r2, r3, #1
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a1b      	ldr	r3, [r3, #32]
 800c806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c81a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f023 0303 	bic.w	r3, r3, #3
 800c822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f023 0302 	bic.w	r3, r3, #2
 800c834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	689b      	ldr	r3, [r3, #8]
 800c83a:	697a      	ldr	r2, [r7, #20]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a20      	ldr	r2, [pc, #128]	; (800c8c4 <TIM_OC1_SetConfig+0xd8>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d003      	beq.n	800c850 <TIM_OC1_SetConfig+0x64>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a1f      	ldr	r2, [pc, #124]	; (800c8c8 <TIM_OC1_SetConfig+0xdc>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d10c      	bne.n	800c86a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	f023 0308 	bic.w	r3, r3, #8
 800c856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	4313      	orrs	r3, r2
 800c860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f023 0304 	bic.w	r3, r3, #4
 800c868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a15      	ldr	r2, [pc, #84]	; (800c8c4 <TIM_OC1_SetConfig+0xd8>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d003      	beq.n	800c87a <TIM_OC1_SetConfig+0x8e>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a14      	ldr	r2, [pc, #80]	; (800c8c8 <TIM_OC1_SetConfig+0xdc>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d111      	bne.n	800c89e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	693a      	ldr	r2, [r7, #16]
 800c890:	4313      	orrs	r3, r2
 800c892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	693a      	ldr	r2, [r7, #16]
 800c89a:	4313      	orrs	r3, r2
 800c89c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	685a      	ldr	r2, [r3, #4]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	621a      	str	r2, [r3, #32]
}
 800c8b8:	bf00      	nop
 800c8ba:	371c      	adds	r7, #28
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr
 800c8c4:	40010000 	.word	0x40010000
 800c8c8:	40010400 	.word	0x40010400

0800c8cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	f023 0210 	bic.w	r2, r3, #16
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	699b      	ldr	r3, [r3, #24]
 800c8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	021b      	lsls	r3, r3, #8
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	f023 0320 	bic.w	r3, r3, #32
 800c916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	011b      	lsls	r3, r3, #4
 800c91e:	697a      	ldr	r2, [r7, #20]
 800c920:	4313      	orrs	r3, r2
 800c922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4a22      	ldr	r2, [pc, #136]	; (800c9b0 <TIM_OC2_SetConfig+0xe4>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d003      	beq.n	800c934 <TIM_OC2_SetConfig+0x68>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	4a21      	ldr	r2, [pc, #132]	; (800c9b4 <TIM_OC2_SetConfig+0xe8>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d10d      	bne.n	800c950 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c93a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	011b      	lsls	r3, r3, #4
 800c942:	697a      	ldr	r2, [r7, #20]
 800c944:	4313      	orrs	r3, r2
 800c946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c94e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a17      	ldr	r2, [pc, #92]	; (800c9b0 <TIM_OC2_SetConfig+0xe4>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d003      	beq.n	800c960 <TIM_OC2_SetConfig+0x94>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a16      	ldr	r2, [pc, #88]	; (800c9b4 <TIM_OC2_SetConfig+0xe8>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d113      	bne.n	800c988 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c96e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	695b      	ldr	r3, [r3, #20]
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	4313      	orrs	r3, r2
 800c97a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	699b      	ldr	r3, [r3, #24]
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	693a      	ldr	r2, [r7, #16]
 800c984:	4313      	orrs	r3, r2
 800c986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	693a      	ldr	r2, [r7, #16]
 800c98c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	685a      	ldr	r2, [r3, #4]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	621a      	str	r2, [r3, #32]
}
 800c9a2:	bf00      	nop
 800c9a4:	371c      	adds	r7, #28
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	40010000 	.word	0x40010000
 800c9b4:	40010400 	.word	0x40010400

0800c9b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b087      	sub	sp, #28
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a1b      	ldr	r3, [r3, #32]
 800c9d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	69db      	ldr	r3, [r3, #28]
 800c9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f023 0303 	bic.w	r3, r3, #3
 800c9ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ca00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	021b      	lsls	r3, r3, #8
 800ca08:	697a      	ldr	r2, [r7, #20]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a21      	ldr	r2, [pc, #132]	; (800ca98 <TIM_OC3_SetConfig+0xe0>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d003      	beq.n	800ca1e <TIM_OC3_SetConfig+0x66>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a20      	ldr	r2, [pc, #128]	; (800ca9c <TIM_OC3_SetConfig+0xe4>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d10d      	bne.n	800ca3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	021b      	lsls	r3, r3, #8
 800ca2c:	697a      	ldr	r2, [r7, #20]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a16      	ldr	r2, [pc, #88]	; (800ca98 <TIM_OC3_SetConfig+0xe0>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d003      	beq.n	800ca4a <TIM_OC3_SetConfig+0x92>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a15      	ldr	r2, [pc, #84]	; (800ca9c <TIM_OC3_SetConfig+0xe4>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d113      	bne.n	800ca72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	695b      	ldr	r3, [r3, #20]
 800ca5e:	011b      	lsls	r3, r3, #4
 800ca60:	693a      	ldr	r2, [r7, #16]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	011b      	lsls	r3, r3, #4
 800ca6c:	693a      	ldr	r2, [r7, #16]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	693a      	ldr	r2, [r7, #16]
 800ca76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	685a      	ldr	r2, [r3, #4]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	697a      	ldr	r2, [r7, #20]
 800ca8a:	621a      	str	r2, [r3, #32]
}
 800ca8c:	bf00      	nop
 800ca8e:	371c      	adds	r7, #28
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	40010000 	.word	0x40010000
 800ca9c:	40010400 	.word	0x40010400

0800caa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b087      	sub	sp, #28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	69db      	ldr	r3, [r3, #28]
 800cac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	021b      	lsls	r3, r3, #8
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800caea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	031b      	lsls	r3, r3, #12
 800caf2:	693a      	ldr	r2, [r7, #16]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4a12      	ldr	r2, [pc, #72]	; (800cb44 <TIM_OC4_SetConfig+0xa4>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d003      	beq.n	800cb08 <TIM_OC4_SetConfig+0x68>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a11      	ldr	r2, [pc, #68]	; (800cb48 <TIM_OC4_SetConfig+0xa8>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d109      	bne.n	800cb1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	695b      	ldr	r3, [r3, #20]
 800cb14:	019b      	lsls	r3, r3, #6
 800cb16:	697a      	ldr	r2, [r7, #20]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	693a      	ldr	r2, [r7, #16]
 800cb34:	621a      	str	r2, [r3, #32]
}
 800cb36:	bf00      	nop
 800cb38:	371c      	adds	r7, #28
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	40010000 	.word	0x40010000
 800cb48:	40010400 	.word	0x40010400

0800cb4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b087      	sub	sp, #28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	f003 031f 	and.w	r3, r3, #31
 800cb5e:	2201      	movs	r2, #1
 800cb60:	fa02 f303 	lsl.w	r3, r2, r3
 800cb64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6a1a      	ldr	r2, [r3, #32]
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	43db      	mvns	r3, r3
 800cb6e:	401a      	ands	r2, r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6a1a      	ldr	r2, [r3, #32]
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	f003 031f 	and.w	r3, r3, #31
 800cb7e:	6879      	ldr	r1, [r7, #4]
 800cb80:	fa01 f303 	lsl.w	r3, r1, r3
 800cb84:	431a      	orrs	r2, r3
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	621a      	str	r2, [r3, #32]
}
 800cb8a:	bf00      	nop
 800cb8c:	371c      	adds	r7, #28
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
	...

0800cb98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d101      	bne.n	800cbb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cbac:	2302      	movs	r3, #2
 800cbae:	e05a      	b.n	800cc66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2202      	movs	r2, #2
 800cbbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a21      	ldr	r2, [pc, #132]	; (800cc74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d022      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbfc:	d01d      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a1d      	ldr	r2, [pc, #116]	; (800cc78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d018      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a1b      	ldr	r2, [pc, #108]	; (800cc7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d013      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a1a      	ldr	r2, [pc, #104]	; (800cc80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d00e      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a18      	ldr	r2, [pc, #96]	; (800cc84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d009      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a17      	ldr	r2, [pc, #92]	; (800cc88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d004      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a15      	ldr	r2, [pc, #84]	; (800cc8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d10c      	bne.n	800cc54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	68ba      	ldr	r2, [r7, #8]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	40010000 	.word	0x40010000
 800cc78:	40000400 	.word	0x40000400
 800cc7c:	40000800 	.word	0x40000800
 800cc80:	40000c00 	.word	0x40000c00
 800cc84:	40010400 	.word	0x40010400
 800cc88:	40014000 	.word	0x40014000
 800cc8c:	40001800 	.word	0x40001800

0800cc90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d101      	bne.n	800ccac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cca8:	2302      	movs	r3, #2
 800ccaa:	e03d      	b.n	800cd28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4313      	orrs	r3, r2
 800ccea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	69db      	ldr	r3, [r3, #28]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68fa      	ldr	r2, [r7, #12]
 800cd1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3714      	adds	r7, #20
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e03f      	b.n	800cdc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d106      	bne.n	800cd60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7fb fcfe 	bl	800875c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2224      	movs	r2, #36	; 0x24
 800cd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68da      	ldr	r2, [r3, #12]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 f829 	bl	800cdd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	691a      	ldr	r2, [r3, #16]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	695a      	ldr	r2, [r3, #20]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68da      	ldr	r2, [r3, #12]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cdac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2220      	movs	r2, #32
 800cdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2220      	movs	r2, #32
 800cdc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdd4:	b0c0      	sub	sp, #256	; 0x100
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cde8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdec:	68d9      	ldr	r1, [r3, #12]
 800cdee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	ea40 0301 	orr.w	r3, r0, r1
 800cdf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cdfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdfe:	689a      	ldr	r2, [r3, #8]
 800ce00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	431a      	orrs	r2, r3
 800ce08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce0c:	695b      	ldr	r3, [r3, #20]
 800ce0e:	431a      	orrs	r2, r3
 800ce10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce14:	69db      	ldr	r3, [r3, #28]
 800ce16:	4313      	orrs	r3, r2
 800ce18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ce28:	f021 010c 	bic.w	r1, r1, #12
 800ce2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce36:	430b      	orrs	r3, r1
 800ce38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	695b      	ldr	r3, [r3, #20]
 800ce42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ce46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce4a:	6999      	ldr	r1, [r3, #24]
 800ce4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	ea40 0301 	orr.w	r3, r0, r1
 800ce56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ce58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	4b8f      	ldr	r3, [pc, #572]	; (800d09c <UART_SetConfig+0x2cc>)
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d005      	beq.n	800ce70 <UART_SetConfig+0xa0>
 800ce64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	4b8d      	ldr	r3, [pc, #564]	; (800d0a0 <UART_SetConfig+0x2d0>)
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d104      	bne.n	800ce7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ce70:	f7ff f934 	bl	800c0dc <HAL_RCC_GetPCLK2Freq>
 800ce74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ce78:	e003      	b.n	800ce82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ce7a:	f7ff f91b 	bl	800c0b4 <HAL_RCC_GetPCLK1Freq>
 800ce7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce86:	69db      	ldr	r3, [r3, #28]
 800ce88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce8c:	f040 810c 	bne.w	800d0a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ce90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce94:	2200      	movs	r2, #0
 800ce96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ce9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ce9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cea2:	4622      	mov	r2, r4
 800cea4:	462b      	mov	r3, r5
 800cea6:	1891      	adds	r1, r2, r2
 800cea8:	65b9      	str	r1, [r7, #88]	; 0x58
 800ceaa:	415b      	adcs	r3, r3
 800ceac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ceae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	eb12 0801 	adds.w	r8, r2, r1
 800ceb8:	4629      	mov	r1, r5
 800ceba:	eb43 0901 	adc.w	r9, r3, r1
 800cebe:	f04f 0200 	mov.w	r2, #0
 800cec2:	f04f 0300 	mov.w	r3, #0
 800cec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ceca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ced2:	4690      	mov	r8, r2
 800ced4:	4699      	mov	r9, r3
 800ced6:	4623      	mov	r3, r4
 800ced8:	eb18 0303 	adds.w	r3, r8, r3
 800cedc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cee0:	462b      	mov	r3, r5
 800cee2:	eb49 0303 	adc.w	r3, r9, r3
 800cee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ceea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cef6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cefa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cefe:	460b      	mov	r3, r1
 800cf00:	18db      	adds	r3, r3, r3
 800cf02:	653b      	str	r3, [r7, #80]	; 0x50
 800cf04:	4613      	mov	r3, r2
 800cf06:	eb42 0303 	adc.w	r3, r2, r3
 800cf0a:	657b      	str	r3, [r7, #84]	; 0x54
 800cf0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cf10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cf14:	f7f3 feb8 	bl	8000c88 <__aeabi_uldivmod>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	4b61      	ldr	r3, [pc, #388]	; (800d0a4 <UART_SetConfig+0x2d4>)
 800cf1e:	fba3 2302 	umull	r2, r3, r3, r2
 800cf22:	095b      	lsrs	r3, r3, #5
 800cf24:	011c      	lsls	r4, r3, #4
 800cf26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cf34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cf38:	4642      	mov	r2, r8
 800cf3a:	464b      	mov	r3, r9
 800cf3c:	1891      	adds	r1, r2, r2
 800cf3e:	64b9      	str	r1, [r7, #72]	; 0x48
 800cf40:	415b      	adcs	r3, r3
 800cf42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cf48:	4641      	mov	r1, r8
 800cf4a:	eb12 0a01 	adds.w	sl, r2, r1
 800cf4e:	4649      	mov	r1, r9
 800cf50:	eb43 0b01 	adc.w	fp, r3, r1
 800cf54:	f04f 0200 	mov.w	r2, #0
 800cf58:	f04f 0300 	mov.w	r3, #0
 800cf5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cf64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf68:	4692      	mov	sl, r2
 800cf6a:	469b      	mov	fp, r3
 800cf6c:	4643      	mov	r3, r8
 800cf6e:	eb1a 0303 	adds.w	r3, sl, r3
 800cf72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf76:	464b      	mov	r3, r9
 800cf78:	eb4b 0303 	adc.w	r3, fp, r3
 800cf7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cf80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cf90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cf94:	460b      	mov	r3, r1
 800cf96:	18db      	adds	r3, r3, r3
 800cf98:	643b      	str	r3, [r7, #64]	; 0x40
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	eb42 0303 	adc.w	r3, r2, r3
 800cfa0:	647b      	str	r3, [r7, #68]	; 0x44
 800cfa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cfa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cfaa:	f7f3 fe6d 	bl	8000c88 <__aeabi_uldivmod>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	4611      	mov	r1, r2
 800cfb4:	4b3b      	ldr	r3, [pc, #236]	; (800d0a4 <UART_SetConfig+0x2d4>)
 800cfb6:	fba3 2301 	umull	r2, r3, r3, r1
 800cfba:	095b      	lsrs	r3, r3, #5
 800cfbc:	2264      	movs	r2, #100	; 0x64
 800cfbe:	fb02 f303 	mul.w	r3, r2, r3
 800cfc2:	1acb      	subs	r3, r1, r3
 800cfc4:	00db      	lsls	r3, r3, #3
 800cfc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cfca:	4b36      	ldr	r3, [pc, #216]	; (800d0a4 <UART_SetConfig+0x2d4>)
 800cfcc:	fba3 2302 	umull	r2, r3, r3, r2
 800cfd0:	095b      	lsrs	r3, r3, #5
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cfd8:	441c      	add	r4, r3
 800cfda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cfe4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cfe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cfec:	4642      	mov	r2, r8
 800cfee:	464b      	mov	r3, r9
 800cff0:	1891      	adds	r1, r2, r2
 800cff2:	63b9      	str	r1, [r7, #56]	; 0x38
 800cff4:	415b      	adcs	r3, r3
 800cff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cffc:	4641      	mov	r1, r8
 800cffe:	1851      	adds	r1, r2, r1
 800d000:	6339      	str	r1, [r7, #48]	; 0x30
 800d002:	4649      	mov	r1, r9
 800d004:	414b      	adcs	r3, r1
 800d006:	637b      	str	r3, [r7, #52]	; 0x34
 800d008:	f04f 0200 	mov.w	r2, #0
 800d00c:	f04f 0300 	mov.w	r3, #0
 800d010:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d014:	4659      	mov	r1, fp
 800d016:	00cb      	lsls	r3, r1, #3
 800d018:	4651      	mov	r1, sl
 800d01a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d01e:	4651      	mov	r1, sl
 800d020:	00ca      	lsls	r2, r1, #3
 800d022:	4610      	mov	r0, r2
 800d024:	4619      	mov	r1, r3
 800d026:	4603      	mov	r3, r0
 800d028:	4642      	mov	r2, r8
 800d02a:	189b      	adds	r3, r3, r2
 800d02c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d030:	464b      	mov	r3, r9
 800d032:	460a      	mov	r2, r1
 800d034:	eb42 0303 	adc.w	r3, r2, r3
 800d038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d048:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d04c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d050:	460b      	mov	r3, r1
 800d052:	18db      	adds	r3, r3, r3
 800d054:	62bb      	str	r3, [r7, #40]	; 0x28
 800d056:	4613      	mov	r3, r2
 800d058:	eb42 0303 	adc.w	r3, r2, r3
 800d05c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d05e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d062:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d066:	f7f3 fe0f 	bl	8000c88 <__aeabi_uldivmod>
 800d06a:	4602      	mov	r2, r0
 800d06c:	460b      	mov	r3, r1
 800d06e:	4b0d      	ldr	r3, [pc, #52]	; (800d0a4 <UART_SetConfig+0x2d4>)
 800d070:	fba3 1302 	umull	r1, r3, r3, r2
 800d074:	095b      	lsrs	r3, r3, #5
 800d076:	2164      	movs	r1, #100	; 0x64
 800d078:	fb01 f303 	mul.w	r3, r1, r3
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	00db      	lsls	r3, r3, #3
 800d080:	3332      	adds	r3, #50	; 0x32
 800d082:	4a08      	ldr	r2, [pc, #32]	; (800d0a4 <UART_SetConfig+0x2d4>)
 800d084:	fba2 2303 	umull	r2, r3, r2, r3
 800d088:	095b      	lsrs	r3, r3, #5
 800d08a:	f003 0207 	and.w	r2, r3, #7
 800d08e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4422      	add	r2, r4
 800d096:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d098:	e105      	b.n	800d2a6 <UART_SetConfig+0x4d6>
 800d09a:	bf00      	nop
 800d09c:	40011000 	.word	0x40011000
 800d0a0:	40011400 	.word	0x40011400
 800d0a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d0b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d0b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d0ba:	4642      	mov	r2, r8
 800d0bc:	464b      	mov	r3, r9
 800d0be:	1891      	adds	r1, r2, r2
 800d0c0:	6239      	str	r1, [r7, #32]
 800d0c2:	415b      	adcs	r3, r3
 800d0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800d0c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d0ca:	4641      	mov	r1, r8
 800d0cc:	1854      	adds	r4, r2, r1
 800d0ce:	4649      	mov	r1, r9
 800d0d0:	eb43 0501 	adc.w	r5, r3, r1
 800d0d4:	f04f 0200 	mov.w	r2, #0
 800d0d8:	f04f 0300 	mov.w	r3, #0
 800d0dc:	00eb      	lsls	r3, r5, #3
 800d0de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d0e2:	00e2      	lsls	r2, r4, #3
 800d0e4:	4614      	mov	r4, r2
 800d0e6:	461d      	mov	r5, r3
 800d0e8:	4643      	mov	r3, r8
 800d0ea:	18e3      	adds	r3, r4, r3
 800d0ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d0f0:	464b      	mov	r3, r9
 800d0f2:	eb45 0303 	adc.w	r3, r5, r3
 800d0f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	2200      	movs	r2, #0
 800d102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d10a:	f04f 0200 	mov.w	r2, #0
 800d10e:	f04f 0300 	mov.w	r3, #0
 800d112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d116:	4629      	mov	r1, r5
 800d118:	008b      	lsls	r3, r1, #2
 800d11a:	4621      	mov	r1, r4
 800d11c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d120:	4621      	mov	r1, r4
 800d122:	008a      	lsls	r2, r1, #2
 800d124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d128:	f7f3 fdae 	bl	8000c88 <__aeabi_uldivmod>
 800d12c:	4602      	mov	r2, r0
 800d12e:	460b      	mov	r3, r1
 800d130:	4b60      	ldr	r3, [pc, #384]	; (800d2b4 <UART_SetConfig+0x4e4>)
 800d132:	fba3 2302 	umull	r2, r3, r3, r2
 800d136:	095b      	lsrs	r3, r3, #5
 800d138:	011c      	lsls	r4, r3, #4
 800d13a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d13e:	2200      	movs	r2, #0
 800d140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d144:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d148:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d14c:	4642      	mov	r2, r8
 800d14e:	464b      	mov	r3, r9
 800d150:	1891      	adds	r1, r2, r2
 800d152:	61b9      	str	r1, [r7, #24]
 800d154:	415b      	adcs	r3, r3
 800d156:	61fb      	str	r3, [r7, #28]
 800d158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d15c:	4641      	mov	r1, r8
 800d15e:	1851      	adds	r1, r2, r1
 800d160:	6139      	str	r1, [r7, #16]
 800d162:	4649      	mov	r1, r9
 800d164:	414b      	adcs	r3, r1
 800d166:	617b      	str	r3, [r7, #20]
 800d168:	f04f 0200 	mov.w	r2, #0
 800d16c:	f04f 0300 	mov.w	r3, #0
 800d170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d174:	4659      	mov	r1, fp
 800d176:	00cb      	lsls	r3, r1, #3
 800d178:	4651      	mov	r1, sl
 800d17a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d17e:	4651      	mov	r1, sl
 800d180:	00ca      	lsls	r2, r1, #3
 800d182:	4610      	mov	r0, r2
 800d184:	4619      	mov	r1, r3
 800d186:	4603      	mov	r3, r0
 800d188:	4642      	mov	r2, r8
 800d18a:	189b      	adds	r3, r3, r2
 800d18c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d190:	464b      	mov	r3, r9
 800d192:	460a      	mov	r2, r1
 800d194:	eb42 0303 	adc.w	r3, r2, r3
 800d198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d19c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800d1a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d1a8:	f04f 0200 	mov.w	r2, #0
 800d1ac:	f04f 0300 	mov.w	r3, #0
 800d1b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d1b4:	4649      	mov	r1, r9
 800d1b6:	008b      	lsls	r3, r1, #2
 800d1b8:	4641      	mov	r1, r8
 800d1ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1be:	4641      	mov	r1, r8
 800d1c0:	008a      	lsls	r2, r1, #2
 800d1c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d1c6:	f7f3 fd5f 	bl	8000c88 <__aeabi_uldivmod>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	4b39      	ldr	r3, [pc, #228]	; (800d2b4 <UART_SetConfig+0x4e4>)
 800d1d0:	fba3 1302 	umull	r1, r3, r3, r2
 800d1d4:	095b      	lsrs	r3, r3, #5
 800d1d6:	2164      	movs	r1, #100	; 0x64
 800d1d8:	fb01 f303 	mul.w	r3, r1, r3
 800d1dc:	1ad3      	subs	r3, r2, r3
 800d1de:	011b      	lsls	r3, r3, #4
 800d1e0:	3332      	adds	r3, #50	; 0x32
 800d1e2:	4a34      	ldr	r2, [pc, #208]	; (800d2b4 <UART_SetConfig+0x4e4>)
 800d1e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d1e8:	095b      	lsrs	r3, r3, #5
 800d1ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1ee:	441c      	add	r4, r3
 800d1f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	673b      	str	r3, [r7, #112]	; 0x70
 800d1f8:	677a      	str	r2, [r7, #116]	; 0x74
 800d1fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d1fe:	4642      	mov	r2, r8
 800d200:	464b      	mov	r3, r9
 800d202:	1891      	adds	r1, r2, r2
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	415b      	adcs	r3, r3
 800d208:	60fb      	str	r3, [r7, #12]
 800d20a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d20e:	4641      	mov	r1, r8
 800d210:	1851      	adds	r1, r2, r1
 800d212:	6039      	str	r1, [r7, #0]
 800d214:	4649      	mov	r1, r9
 800d216:	414b      	adcs	r3, r1
 800d218:	607b      	str	r3, [r7, #4]
 800d21a:	f04f 0200 	mov.w	r2, #0
 800d21e:	f04f 0300 	mov.w	r3, #0
 800d222:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d226:	4659      	mov	r1, fp
 800d228:	00cb      	lsls	r3, r1, #3
 800d22a:	4651      	mov	r1, sl
 800d22c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d230:	4651      	mov	r1, sl
 800d232:	00ca      	lsls	r2, r1, #3
 800d234:	4610      	mov	r0, r2
 800d236:	4619      	mov	r1, r3
 800d238:	4603      	mov	r3, r0
 800d23a:	4642      	mov	r2, r8
 800d23c:	189b      	adds	r3, r3, r2
 800d23e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d240:	464b      	mov	r3, r9
 800d242:	460a      	mov	r2, r1
 800d244:	eb42 0303 	adc.w	r3, r2, r3
 800d248:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	2200      	movs	r2, #0
 800d252:	663b      	str	r3, [r7, #96]	; 0x60
 800d254:	667a      	str	r2, [r7, #100]	; 0x64
 800d256:	f04f 0200 	mov.w	r2, #0
 800d25a:	f04f 0300 	mov.w	r3, #0
 800d25e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d262:	4649      	mov	r1, r9
 800d264:	008b      	lsls	r3, r1, #2
 800d266:	4641      	mov	r1, r8
 800d268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d26c:	4641      	mov	r1, r8
 800d26e:	008a      	lsls	r2, r1, #2
 800d270:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d274:	f7f3 fd08 	bl	8000c88 <__aeabi_uldivmod>
 800d278:	4602      	mov	r2, r0
 800d27a:	460b      	mov	r3, r1
 800d27c:	4b0d      	ldr	r3, [pc, #52]	; (800d2b4 <UART_SetConfig+0x4e4>)
 800d27e:	fba3 1302 	umull	r1, r3, r3, r2
 800d282:	095b      	lsrs	r3, r3, #5
 800d284:	2164      	movs	r1, #100	; 0x64
 800d286:	fb01 f303 	mul.w	r3, r1, r3
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	011b      	lsls	r3, r3, #4
 800d28e:	3332      	adds	r3, #50	; 0x32
 800d290:	4a08      	ldr	r2, [pc, #32]	; (800d2b4 <UART_SetConfig+0x4e4>)
 800d292:	fba2 2303 	umull	r2, r3, r2, r3
 800d296:	095b      	lsrs	r3, r3, #5
 800d298:	f003 020f 	and.w	r2, r3, #15
 800d29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4422      	add	r2, r4
 800d2a4:	609a      	str	r2, [r3, #8]
}
 800d2a6:	bf00      	nop
 800d2a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2b2:	bf00      	nop
 800d2b4:	51eb851f 	.word	0x51eb851f

0800d2b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b084      	sub	sp, #16
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	f107 001c 	add.w	r0, r7, #28
 800d2c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d122      	bne.n	800d316 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d2e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d105      	bne.n	800d30a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f001 fbee 	bl	800eaec <USB_CoreReset>
 800d310:	4603      	mov	r3, r0
 800d312:	73fb      	strb	r3, [r7, #15]
 800d314:	e01a      	b.n	800d34c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f001 fbe2 	bl	800eaec <USB_CoreReset>
 800d328:	4603      	mov	r3, r0
 800d32a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d32c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d106      	bne.n	800d340 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d336:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	639a      	str	r2, [r3, #56]	; 0x38
 800d33e:	e005      	b.n	800d34c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d344:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d10b      	bne.n	800d36a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	f043 0206 	orr.w	r2, r3, #6
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	f043 0220 	orr.w	r2, r3, #32
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d376:	b004      	add	sp, #16
 800d378:	4770      	bx	lr
	...

0800d37c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b087      	sub	sp, #28
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	4613      	mov	r3, r2
 800d388:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d38a:	79fb      	ldrb	r3, [r7, #7]
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	d165      	bne.n	800d45c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	4a41      	ldr	r2, [pc, #260]	; (800d498 <USB_SetTurnaroundTime+0x11c>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d906      	bls.n	800d3a6 <USB_SetTurnaroundTime+0x2a>
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	4a40      	ldr	r2, [pc, #256]	; (800d49c <USB_SetTurnaroundTime+0x120>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d202      	bcs.n	800d3a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d3a0:	230f      	movs	r3, #15
 800d3a2:	617b      	str	r3, [r7, #20]
 800d3a4:	e062      	b.n	800d46c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	4a3c      	ldr	r2, [pc, #240]	; (800d49c <USB_SetTurnaroundTime+0x120>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d306      	bcc.n	800d3bc <USB_SetTurnaroundTime+0x40>
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	4a3b      	ldr	r2, [pc, #236]	; (800d4a0 <USB_SetTurnaroundTime+0x124>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d202      	bcs.n	800d3bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d3b6:	230e      	movs	r3, #14
 800d3b8:	617b      	str	r3, [r7, #20]
 800d3ba:	e057      	b.n	800d46c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	4a38      	ldr	r2, [pc, #224]	; (800d4a0 <USB_SetTurnaroundTime+0x124>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d306      	bcc.n	800d3d2 <USB_SetTurnaroundTime+0x56>
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	4a37      	ldr	r2, [pc, #220]	; (800d4a4 <USB_SetTurnaroundTime+0x128>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d202      	bcs.n	800d3d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d3cc:	230d      	movs	r3, #13
 800d3ce:	617b      	str	r3, [r7, #20]
 800d3d0:	e04c      	b.n	800d46c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	4a33      	ldr	r2, [pc, #204]	; (800d4a4 <USB_SetTurnaroundTime+0x128>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d306      	bcc.n	800d3e8 <USB_SetTurnaroundTime+0x6c>
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	4a32      	ldr	r2, [pc, #200]	; (800d4a8 <USB_SetTurnaroundTime+0x12c>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d802      	bhi.n	800d3e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d3e2:	230c      	movs	r3, #12
 800d3e4:	617b      	str	r3, [r7, #20]
 800d3e6:	e041      	b.n	800d46c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	4a2f      	ldr	r2, [pc, #188]	; (800d4a8 <USB_SetTurnaroundTime+0x12c>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d906      	bls.n	800d3fe <USB_SetTurnaroundTime+0x82>
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	4a2e      	ldr	r2, [pc, #184]	; (800d4ac <USB_SetTurnaroundTime+0x130>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d802      	bhi.n	800d3fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d3f8:	230b      	movs	r3, #11
 800d3fa:	617b      	str	r3, [r7, #20]
 800d3fc:	e036      	b.n	800d46c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	4a2a      	ldr	r2, [pc, #168]	; (800d4ac <USB_SetTurnaroundTime+0x130>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d906      	bls.n	800d414 <USB_SetTurnaroundTime+0x98>
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	4a29      	ldr	r2, [pc, #164]	; (800d4b0 <USB_SetTurnaroundTime+0x134>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d802      	bhi.n	800d414 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d40e:	230a      	movs	r3, #10
 800d410:	617b      	str	r3, [r7, #20]
 800d412:	e02b      	b.n	800d46c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	4a26      	ldr	r2, [pc, #152]	; (800d4b0 <USB_SetTurnaroundTime+0x134>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d906      	bls.n	800d42a <USB_SetTurnaroundTime+0xae>
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	4a25      	ldr	r2, [pc, #148]	; (800d4b4 <USB_SetTurnaroundTime+0x138>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d202      	bcs.n	800d42a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d424:	2309      	movs	r3, #9
 800d426:	617b      	str	r3, [r7, #20]
 800d428:	e020      	b.n	800d46c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	4a21      	ldr	r2, [pc, #132]	; (800d4b4 <USB_SetTurnaroundTime+0x138>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d306      	bcc.n	800d440 <USB_SetTurnaroundTime+0xc4>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	4a20      	ldr	r2, [pc, #128]	; (800d4b8 <USB_SetTurnaroundTime+0x13c>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d802      	bhi.n	800d440 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d43a:	2308      	movs	r3, #8
 800d43c:	617b      	str	r3, [r7, #20]
 800d43e:	e015      	b.n	800d46c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	4a1d      	ldr	r2, [pc, #116]	; (800d4b8 <USB_SetTurnaroundTime+0x13c>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d906      	bls.n	800d456 <USB_SetTurnaroundTime+0xda>
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	4a1c      	ldr	r2, [pc, #112]	; (800d4bc <USB_SetTurnaroundTime+0x140>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d202      	bcs.n	800d456 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d450:	2307      	movs	r3, #7
 800d452:	617b      	str	r3, [r7, #20]
 800d454:	e00a      	b.n	800d46c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d456:	2306      	movs	r3, #6
 800d458:	617b      	str	r3, [r7, #20]
 800d45a:	e007      	b.n	800d46c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d45c:	79fb      	ldrb	r3, [r7, #7]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d102      	bne.n	800d468 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d462:	2309      	movs	r3, #9
 800d464:	617b      	str	r3, [r7, #20]
 800d466:	e001      	b.n	800d46c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d468:	2309      	movs	r3, #9
 800d46a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	68da      	ldr	r2, [r3, #12]
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	029b      	lsls	r3, r3, #10
 800d480:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d484:	431a      	orrs	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	371c      	adds	r7, #28
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr
 800d498:	00d8acbf 	.word	0x00d8acbf
 800d49c:	00e4e1c0 	.word	0x00e4e1c0
 800d4a0:	00f42400 	.word	0x00f42400
 800d4a4:	01067380 	.word	0x01067380
 800d4a8:	011a499f 	.word	0x011a499f
 800d4ac:	01312cff 	.word	0x01312cff
 800d4b0:	014ca43f 	.word	0x014ca43f
 800d4b4:	016e3600 	.word	0x016e3600
 800d4b8:	01a6ab1f 	.word	0x01a6ab1f
 800d4bc:	01e84800 	.word	0x01e84800

0800d4c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	f043 0201 	orr.w	r2, r3, #1
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b083      	sub	sp, #12
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	f023 0201 	bic.w	r2, r3, #1
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d4f6:	2300      	movs	r3, #0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d510:	2300      	movs	r3, #0
 800d512:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d520:	78fb      	ldrb	r3, [r7, #3]
 800d522:	2b01      	cmp	r3, #1
 800d524:	d115      	bne.n	800d552 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d532:	2001      	movs	r0, #1
 800d534:	f7fb fb02 	bl	8008b3c <HAL_Delay>
      ms++;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	3301      	adds	r3, #1
 800d53c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f001 fa45 	bl	800e9ce <USB_GetMode>
 800d544:	4603      	mov	r3, r0
 800d546:	2b01      	cmp	r3, #1
 800d548:	d01e      	beq.n	800d588 <USB_SetCurrentMode+0x84>
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2b31      	cmp	r3, #49	; 0x31
 800d54e:	d9f0      	bls.n	800d532 <USB_SetCurrentMode+0x2e>
 800d550:	e01a      	b.n	800d588 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d552:	78fb      	ldrb	r3, [r7, #3]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d115      	bne.n	800d584 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d564:	2001      	movs	r0, #1
 800d566:	f7fb fae9 	bl	8008b3c <HAL_Delay>
      ms++;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	3301      	adds	r3, #1
 800d56e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f001 fa2c 	bl	800e9ce <USB_GetMode>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d005      	beq.n	800d588 <USB_SetCurrentMode+0x84>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b31      	cmp	r3, #49	; 0x31
 800d580:	d9f0      	bls.n	800d564 <USB_SetCurrentMode+0x60>
 800d582:	e001      	b.n	800d588 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d584:	2301      	movs	r3, #1
 800d586:	e005      	b.n	800d594 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2b32      	cmp	r3, #50	; 0x32
 800d58c:	d101      	bne.n	800d592 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d58e:	2301      	movs	r3, #1
 800d590:	e000      	b.n	800d594 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d592:	2300      	movs	r3, #0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d59c:	b084      	sub	sp, #16
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b086      	sub	sp, #24
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
 800d5a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d5aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	613b      	str	r3, [r7, #16]
 800d5ba:	e009      	b.n	800d5d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	3340      	adds	r3, #64	; 0x40
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	613b      	str	r3, [r7, #16]
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	2b0e      	cmp	r3, #14
 800d5d4:	d9f2      	bls.n	800d5bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d11c      	bne.n	800d616 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5ea:	f043 0302 	orr.w	r3, r3, #2
 800d5ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d600:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d60c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	639a      	str	r2, [r3, #56]	; 0x38
 800d614:	e00b      	b.n	800d62e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d626:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d634:	461a      	mov	r2, r3
 800d636:	2300      	movs	r3, #0
 800d638:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d640:	4619      	mov	r1, r3
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d648:	461a      	mov	r2, r3
 800d64a:	680b      	ldr	r3, [r1, #0]
 800d64c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d650:	2b01      	cmp	r3, #1
 800d652:	d10c      	bne.n	800d66e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d656:	2b00      	cmp	r3, #0
 800d658:	d104      	bne.n	800d664 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d65a:	2100      	movs	r1, #0
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 f965 	bl	800d92c <USB_SetDevSpeed>
 800d662:	e008      	b.n	800d676 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d664:	2101      	movs	r1, #1
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f960 	bl	800d92c <USB_SetDevSpeed>
 800d66c:	e003      	b.n	800d676 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d66e:	2103      	movs	r1, #3
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 f95b 	bl	800d92c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d676:	2110      	movs	r1, #16
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 f8f3 	bl	800d864 <USB_FlushTxFifo>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d001      	beq.n	800d688 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 f91f 	bl	800d8cc <USB_FlushRxFifo>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d694:	2301      	movs	r3, #1
 800d696:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d69e:	461a      	mov	r2, r3
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6bc:	2300      	movs	r3, #0
 800d6be:	613b      	str	r3, [r7, #16]
 800d6c0:	e043      	b.n	800d74a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	015a      	lsls	r2, r3, #5
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6d8:	d118      	bne.n	800d70c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10a      	bne.n	800d6f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	015a      	lsls	r2, r3, #5
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	4413      	add	r3, r2
 800d6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d6f2:	6013      	str	r3, [r2, #0]
 800d6f4:	e013      	b.n	800d71e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	015a      	lsls	r2, r3, #5
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d702:	461a      	mov	r2, r3
 800d704:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d708:	6013      	str	r3, [r2, #0]
 800d70a:	e008      	b.n	800d71e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	015a      	lsls	r2, r3, #5
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	4413      	add	r3, r2
 800d714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d718:	461a      	mov	r2, r3
 800d71a:	2300      	movs	r3, #0
 800d71c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	015a      	lsls	r2, r3, #5
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	4413      	add	r3, r2
 800d726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d72a:	461a      	mov	r2, r3
 800d72c:	2300      	movs	r3, #0
 800d72e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	015a      	lsls	r2, r3, #5
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	4413      	add	r3, r2
 800d738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d73c:	461a      	mov	r2, r3
 800d73e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d742:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	3301      	adds	r3, #1
 800d748:	613b      	str	r3, [r7, #16]
 800d74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74c:	693a      	ldr	r2, [r7, #16]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d3b7      	bcc.n	800d6c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d752:	2300      	movs	r3, #0
 800d754:	613b      	str	r3, [r7, #16]
 800d756:	e043      	b.n	800d7e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	015a      	lsls	r2, r3, #5
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	4413      	add	r3, r2
 800d760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d76a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d76e:	d118      	bne.n	800d7a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d10a      	bne.n	800d78c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	015a      	lsls	r2, r3, #5
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	4413      	add	r3, r2
 800d77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d782:	461a      	mov	r2, r3
 800d784:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d788:	6013      	str	r3, [r2, #0]
 800d78a:	e013      	b.n	800d7b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	015a      	lsls	r2, r3, #5
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	4413      	add	r3, r2
 800d794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d798:	461a      	mov	r2, r3
 800d79a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d79e:	6013      	str	r3, [r2, #0]
 800d7a0:	e008      	b.n	800d7b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	015a      	lsls	r2, r3, #5
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	015a      	lsls	r2, r3, #5
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	015a      	lsls	r2, r3, #5
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d7d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	613b      	str	r3, [r7, #16]
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e2:	693a      	ldr	r2, [r7, #16]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d3b7      	bcc.n	800d758 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d808:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d105      	bne.n	800d81c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	699b      	ldr	r3, [r3, #24]
 800d814:	f043 0210 	orr.w	r2, r3, #16
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	699a      	ldr	r2, [r3, #24]
 800d820:	4b0f      	ldr	r3, [pc, #60]	; (800d860 <USB_DevInit+0x2c4>)
 800d822:	4313      	orrs	r3, r2
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d005      	beq.n	800d83a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	f043 0208 	orr.w	r2, r3, #8
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d107      	bne.n	800d850 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	699b      	ldr	r3, [r3, #24]
 800d844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d848:	f043 0304 	orr.w	r3, r3, #4
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d850:	7dfb      	ldrb	r3, [r7, #23]
}
 800d852:	4618      	mov	r0, r3
 800d854:	3718      	adds	r7, #24
 800d856:	46bd      	mov	sp, r7
 800d858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d85c:	b004      	add	sp, #16
 800d85e:	4770      	bx	lr
 800d860:	803c3800 	.word	0x803c3800

0800d864 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d864:	b480      	push	{r7}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d86e:	2300      	movs	r3, #0
 800d870:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	3301      	adds	r3, #1
 800d876:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	4a13      	ldr	r2, [pc, #76]	; (800d8c8 <USB_FlushTxFifo+0x64>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d901      	bls.n	800d884 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d880:	2303      	movs	r3, #3
 800d882:	e01b      	b.n	800d8bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	daf2      	bge.n	800d872 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d88c:	2300      	movs	r3, #0
 800d88e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	019b      	lsls	r3, r3, #6
 800d894:	f043 0220 	orr.w	r2, r3, #32
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	4a08      	ldr	r2, [pc, #32]	; (800d8c8 <USB_FlushTxFifo+0x64>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d901      	bls.n	800d8ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d8aa:	2303      	movs	r3, #3
 800d8ac:	e006      	b.n	800d8bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	f003 0320 	and.w	r3, r3, #32
 800d8b6:	2b20      	cmp	r3, #32
 800d8b8:	d0f0      	beq.n	800d89c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3714      	adds	r7, #20
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr
 800d8c8:	00030d40 	.word	0x00030d40

0800d8cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b085      	sub	sp, #20
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	4a11      	ldr	r2, [pc, #68]	; (800d928 <USB_FlushRxFifo+0x5c>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d901      	bls.n	800d8ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d8e6:	2303      	movs	r3, #3
 800d8e8:	e018      	b.n	800d91c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	691b      	ldr	r3, [r3, #16]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	daf2      	bge.n	800d8d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2210      	movs	r2, #16
 800d8fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	3301      	adds	r3, #1
 800d900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	4a08      	ldr	r2, [pc, #32]	; (800d928 <USB_FlushRxFifo+0x5c>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d901      	bls.n	800d90e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d90a:	2303      	movs	r3, #3
 800d90c:	e006      	b.n	800d91c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	f003 0310 	and.w	r3, r3, #16
 800d916:	2b10      	cmp	r3, #16
 800d918:	d0f0      	beq.n	800d8fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	00030d40 	.word	0x00030d40

0800d92c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	460b      	mov	r3, r1
 800d936:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	78fb      	ldrb	r3, [r7, #3]
 800d946:	68f9      	ldr	r1, [r7, #12]
 800d948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d94c:	4313      	orrs	r3, r2
 800d94e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3714      	adds	r7, #20
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d95e:	b480      	push	{r7}
 800d960:	b087      	sub	sp, #28
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	f003 0306 	and.w	r3, r3, #6
 800d976:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d102      	bne.n	800d984 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d97e:	2300      	movs	r3, #0
 800d980:	75fb      	strb	r3, [r7, #23]
 800d982:	e00a      	b.n	800d99a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2b02      	cmp	r3, #2
 800d988:	d002      	beq.n	800d990 <USB_GetDevSpeed+0x32>
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2b06      	cmp	r3, #6
 800d98e:	d102      	bne.n	800d996 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d990:	2302      	movs	r3, #2
 800d992:	75fb      	strb	r3, [r7, #23]
 800d994:	e001      	b.n	800d99a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d996:	230f      	movs	r3, #15
 800d998:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d99a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	371c      	adds	r7, #28
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	785b      	ldrb	r3, [r3, #1]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d13a      	bne.n	800da3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9ca:	69da      	ldr	r2, [r3, #28]
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	f003 030f 	and.w	r3, r3, #15
 800d9d4:	2101      	movs	r1, #1
 800d9d6:	fa01 f303 	lsl.w	r3, r1, r3
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	68f9      	ldr	r1, [r7, #12]
 800d9de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	015a      	lsls	r2, r3, #5
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d155      	bne.n	800daa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	015a      	lsls	r2, r3, #5
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	4413      	add	r3, r2
 800da04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	791b      	ldrb	r3, [r3, #4]
 800da16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	059b      	lsls	r3, r3, #22
 800da1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da20:	4313      	orrs	r3, r2
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	0151      	lsls	r1, r2, #5
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	440a      	add	r2, r1
 800da2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da36:	6013      	str	r3, [r2, #0]
 800da38:	e036      	b.n	800daa8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da40:	69da      	ldr	r2, [r3, #28]
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	f003 030f 	and.w	r3, r3, #15
 800da4a:	2101      	movs	r1, #1
 800da4c:	fa01 f303 	lsl.w	r3, r1, r3
 800da50:	041b      	lsls	r3, r3, #16
 800da52:	68f9      	ldr	r1, [r7, #12]
 800da54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da58:	4313      	orrs	r3, r2
 800da5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	015a      	lsls	r2, r3, #5
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	4413      	add	r3, r2
 800da64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d11a      	bne.n	800daa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	015a      	lsls	r2, r3, #5
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	4413      	add	r3, r2
 800da7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	791b      	ldrb	r3, [r3, #4]
 800da8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800da8e:	430b      	orrs	r3, r1
 800da90:	4313      	orrs	r3, r2
 800da92:	68ba      	ldr	r2, [r7, #8]
 800da94:	0151      	lsls	r1, r2, #5
 800da96:	68fa      	ldr	r2, [r7, #12]
 800da98:	440a      	add	r2, r1
 800da9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800daa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800daa6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3714      	adds	r7, #20
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
	...

0800dab8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dab8:	b480      	push	{r7}
 800daba:	b085      	sub	sp, #20
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	785b      	ldrb	r3, [r3, #1]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d161      	bne.n	800db98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	015a      	lsls	r2, r3, #5
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	4413      	add	r3, r2
 800dadc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800daea:	d11f      	bne.n	800db2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	015a      	lsls	r2, r3, #5
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	4413      	add	r3, r2
 800daf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	0151      	lsls	r1, r2, #5
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	440a      	add	r2, r1
 800db02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800db0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	015a      	lsls	r2, r3, #5
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	4413      	add	r3, r2
 800db14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	0151      	lsls	r1, r2, #5
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	440a      	add	r2, r1
 800db22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	f003 030f 	and.w	r3, r3, #15
 800db3c:	2101      	movs	r1, #1
 800db3e:	fa01 f303 	lsl.w	r3, r1, r3
 800db42:	b29b      	uxth	r3, r3
 800db44:	43db      	mvns	r3, r3
 800db46:	68f9      	ldr	r1, [r7, #12]
 800db48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db4c:	4013      	ands	r3, r2
 800db4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db56:	69da      	ldr	r2, [r3, #28]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	f003 030f 	and.w	r3, r3, #15
 800db60:	2101      	movs	r1, #1
 800db62:	fa01 f303 	lsl.w	r3, r1, r3
 800db66:	b29b      	uxth	r3, r3
 800db68:	43db      	mvns	r3, r3
 800db6a:	68f9      	ldr	r1, [r7, #12]
 800db6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db70:	4013      	ands	r3, r2
 800db72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	015a      	lsls	r2, r3, #5
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	4413      	add	r3, r2
 800db7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	0159      	lsls	r1, r3, #5
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	440b      	add	r3, r1
 800db8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db8e:	4619      	mov	r1, r3
 800db90:	4b35      	ldr	r3, [pc, #212]	; (800dc68 <USB_DeactivateEndpoint+0x1b0>)
 800db92:	4013      	ands	r3, r2
 800db94:	600b      	str	r3, [r1, #0]
 800db96:	e060      	b.n	800dc5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	015a      	lsls	r2, r3, #5
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	4413      	add	r3, r2
 800dba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbae:	d11f      	bne.n	800dbf0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	015a      	lsls	r2, r3, #5
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	68ba      	ldr	r2, [r7, #8]
 800dbc0:	0151      	lsls	r1, r2, #5
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	440a      	add	r2, r1
 800dbc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dbce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	015a      	lsls	r2, r3, #5
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	4413      	add	r3, r2
 800dbd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	68ba      	ldr	r2, [r7, #8]
 800dbe0:	0151      	lsls	r1, r2, #5
 800dbe2:	68fa      	ldr	r2, [r7, #12]
 800dbe4:	440a      	add	r2, r1
 800dbe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	f003 030f 	and.w	r3, r3, #15
 800dc00:	2101      	movs	r1, #1
 800dc02:	fa01 f303 	lsl.w	r3, r1, r3
 800dc06:	041b      	lsls	r3, r3, #16
 800dc08:	43db      	mvns	r3, r3
 800dc0a:	68f9      	ldr	r1, [r7, #12]
 800dc0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc10:	4013      	ands	r3, r2
 800dc12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc1a:	69da      	ldr	r2, [r3, #28]
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	f003 030f 	and.w	r3, r3, #15
 800dc24:	2101      	movs	r1, #1
 800dc26:	fa01 f303 	lsl.w	r3, r1, r3
 800dc2a:	041b      	lsls	r3, r3, #16
 800dc2c:	43db      	mvns	r3, r3
 800dc2e:	68f9      	ldr	r1, [r7, #12]
 800dc30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc34:	4013      	ands	r3, r2
 800dc36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	015a      	lsls	r2, r3, #5
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	4413      	add	r3, r2
 800dc40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	0159      	lsls	r1, r3, #5
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	440b      	add	r3, r1
 800dc4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc52:	4619      	mov	r1, r3
 800dc54:	4b05      	ldr	r3, [pc, #20]	; (800dc6c <USB_DeactivateEndpoint+0x1b4>)
 800dc56:	4013      	ands	r3, r2
 800dc58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3714      	adds	r7, #20
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr
 800dc68:	ec337800 	.word	0xec337800
 800dc6c:	eff37800 	.word	0xeff37800

0800dc70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b08a      	sub	sp, #40	; 0x28
 800dc74:	af02      	add	r7, sp, #8
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	4613      	mov	r3, r2
 800dc7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	785b      	ldrb	r3, [r3, #1]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	f040 815c 	bne.w	800df4a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	699b      	ldr	r3, [r3, #24]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d132      	bne.n	800dd00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	015a      	lsls	r2, r3, #5
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	4413      	add	r3, r2
 800dca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	69ba      	ldr	r2, [r7, #24]
 800dcaa:	0151      	lsls	r1, r2, #5
 800dcac:	69fa      	ldr	r2, [r7, #28]
 800dcae:	440a      	add	r2, r1
 800dcb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dcb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dcbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	015a      	lsls	r2, r3, #5
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcca:	691b      	ldr	r3, [r3, #16]
 800dccc:	69ba      	ldr	r2, [r7, #24]
 800dcce:	0151      	lsls	r1, r2, #5
 800dcd0:	69fa      	ldr	r2, [r7, #28]
 800dcd2:	440a      	add	r2, r1
 800dcd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dcdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	015a      	lsls	r2, r3, #5
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	4413      	add	r3, r2
 800dce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcea:	691b      	ldr	r3, [r3, #16]
 800dcec:	69ba      	ldr	r2, [r7, #24]
 800dcee:	0151      	lsls	r1, r2, #5
 800dcf0:	69fa      	ldr	r2, [r7, #28]
 800dcf2:	440a      	add	r2, r1
 800dcf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcf8:	0cdb      	lsrs	r3, r3, #19
 800dcfa:	04db      	lsls	r3, r3, #19
 800dcfc:	6113      	str	r3, [r2, #16]
 800dcfe:	e074      	b.n	800ddea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	015a      	lsls	r2, r3, #5
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	4413      	add	r3, r2
 800dd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	69ba      	ldr	r2, [r7, #24]
 800dd10:	0151      	lsls	r1, r2, #5
 800dd12:	69fa      	ldr	r2, [r7, #28]
 800dd14:	440a      	add	r2, r1
 800dd16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd1a:	0cdb      	lsrs	r3, r3, #19
 800dd1c:	04db      	lsls	r3, r3, #19
 800dd1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	015a      	lsls	r2, r3, #5
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	4413      	add	r3, r2
 800dd28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd2c:	691b      	ldr	r3, [r3, #16]
 800dd2e:	69ba      	ldr	r2, [r7, #24]
 800dd30:	0151      	lsls	r1, r2, #5
 800dd32:	69fa      	ldr	r2, [r7, #28]
 800dd34:	440a      	add	r2, r1
 800dd36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dd3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dd42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	015a      	lsls	r2, r3, #5
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	6999      	ldr	r1, [r3, #24]
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	440b      	add	r3, r1
 800dd5c:	1e59      	subs	r1, r3, #1
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	fbb1 f3f3 	udiv	r3, r1, r3
 800dd66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dd68:	4b9d      	ldr	r3, [pc, #628]	; (800dfe0 <USB_EPStartXfer+0x370>)
 800dd6a:	400b      	ands	r3, r1
 800dd6c:	69b9      	ldr	r1, [r7, #24]
 800dd6e:	0148      	lsls	r0, r1, #5
 800dd70:	69f9      	ldr	r1, [r7, #28]
 800dd72:	4401      	add	r1, r0
 800dd74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	015a      	lsls	r2, r3, #5
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	4413      	add	r3, r2
 800dd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd88:	691a      	ldr	r2, [r3, #16]
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	699b      	ldr	r3, [r3, #24]
 800dd8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd92:	69b9      	ldr	r1, [r7, #24]
 800dd94:	0148      	lsls	r0, r1, #5
 800dd96:	69f9      	ldr	r1, [r7, #28]
 800dd98:	4401      	add	r1, r0
 800dd9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dd9e:	4313      	orrs	r3, r2
 800dda0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	791b      	ldrb	r3, [r3, #4]
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d11f      	bne.n	800ddea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	015a      	lsls	r2, r3, #5
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	69ba      	ldr	r2, [r7, #24]
 800ddba:	0151      	lsls	r1, r2, #5
 800ddbc:	69fa      	ldr	r2, [r7, #28]
 800ddbe:	440a      	add	r2, r1
 800ddc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ddc8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	015a      	lsls	r2, r3, #5
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	69ba      	ldr	r2, [r7, #24]
 800ddda:	0151      	lsls	r1, r2, #5
 800dddc:	69fa      	ldr	r2, [r7, #28]
 800ddde:	440a      	add	r2, r1
 800dde0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dde4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dde8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ddea:	79fb      	ldrb	r3, [r7, #7]
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d14b      	bne.n	800de88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	695b      	ldr	r3, [r3, #20]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d009      	beq.n	800de0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	015a      	lsls	r2, r3, #5
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	4413      	add	r3, r2
 800de00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de04:	461a      	mov	r2, r3
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	695b      	ldr	r3, [r3, #20]
 800de0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	791b      	ldrb	r3, [r3, #4]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d128      	bne.n	800de66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de20:	2b00      	cmp	r3, #0
 800de22:	d110      	bne.n	800de46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	015a      	lsls	r2, r3, #5
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	4413      	add	r3, r2
 800de2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	69ba      	ldr	r2, [r7, #24]
 800de34:	0151      	lsls	r1, r2, #5
 800de36:	69fa      	ldr	r2, [r7, #28]
 800de38:	440a      	add	r2, r1
 800de3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800de42:	6013      	str	r3, [r2, #0]
 800de44:	e00f      	b.n	800de66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	015a      	lsls	r2, r3, #5
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	4413      	add	r3, r2
 800de4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	69ba      	ldr	r2, [r7, #24]
 800de56:	0151      	lsls	r1, r2, #5
 800de58:	69fa      	ldr	r2, [r7, #28]
 800de5a:	440a      	add	r2, r1
 800de5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	015a      	lsls	r2, r3, #5
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	4413      	add	r3, r2
 800de6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	69ba      	ldr	r2, [r7, #24]
 800de76:	0151      	lsls	r1, r2, #5
 800de78:	69fa      	ldr	r2, [r7, #28]
 800de7a:	440a      	add	r2, r1
 800de7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de84:	6013      	str	r3, [r2, #0]
 800de86:	e133      	b.n	800e0f0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	69ba      	ldr	r2, [r7, #24]
 800de98:	0151      	lsls	r1, r2, #5
 800de9a:	69fa      	ldr	r2, [r7, #28]
 800de9c:	440a      	add	r2, r1
 800de9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dea2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dea6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	791b      	ldrb	r3, [r3, #4]
 800deac:	2b01      	cmp	r3, #1
 800deae:	d015      	beq.n	800dedc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f000 811b 	beq.w	800e0f0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	f003 030f 	and.w	r3, r3, #15
 800deca:	2101      	movs	r1, #1
 800decc:	fa01 f303 	lsl.w	r3, r1, r3
 800ded0:	69f9      	ldr	r1, [r7, #28]
 800ded2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ded6:	4313      	orrs	r3, r2
 800ded8:	634b      	str	r3, [r1, #52]	; 0x34
 800deda:	e109      	b.n	800e0f0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d110      	bne.n	800df0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	015a      	lsls	r2, r3, #5
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	4413      	add	r3, r2
 800def4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	69ba      	ldr	r2, [r7, #24]
 800defc:	0151      	lsls	r1, r2, #5
 800defe:	69fa      	ldr	r2, [r7, #28]
 800df00:	440a      	add	r2, r1
 800df02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df0a:	6013      	str	r3, [r2, #0]
 800df0c:	e00f      	b.n	800df2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	015a      	lsls	r2, r3, #5
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	4413      	add	r3, r2
 800df16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	69ba      	ldr	r2, [r7, #24]
 800df1e:	0151      	lsls	r1, r2, #5
 800df20:	69fa      	ldr	r2, [r7, #28]
 800df22:	440a      	add	r2, r1
 800df24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	6919      	ldr	r1, [r3, #16]
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	781a      	ldrb	r2, [r3, #0]
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	699b      	ldr	r3, [r3, #24]
 800df3a:	b298      	uxth	r0, r3
 800df3c:	79fb      	ldrb	r3, [r7, #7]
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	4603      	mov	r3, r0
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f000 fade 	bl	800e504 <USB_WritePacket>
 800df48:	e0d2      	b.n	800e0f0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	015a      	lsls	r2, r3, #5
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	4413      	add	r3, r2
 800df52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	69ba      	ldr	r2, [r7, #24]
 800df5a:	0151      	lsls	r1, r2, #5
 800df5c:	69fa      	ldr	r2, [r7, #28]
 800df5e:	440a      	add	r2, r1
 800df60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df64:	0cdb      	lsrs	r3, r3, #19
 800df66:	04db      	lsls	r3, r3, #19
 800df68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	015a      	lsls	r2, r3, #5
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	4413      	add	r3, r2
 800df72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	69ba      	ldr	r2, [r7, #24]
 800df7a:	0151      	lsls	r1, r2, #5
 800df7c:	69fa      	ldr	r2, [r7, #28]
 800df7e:	440a      	add	r2, r1
 800df80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800df88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800df8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d126      	bne.n	800dfe4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfa2:	691a      	ldr	r2, [r3, #16]
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dfac:	69b9      	ldr	r1, [r7, #24]
 800dfae:	0148      	lsls	r0, r1, #5
 800dfb0:	69f9      	ldr	r1, [r7, #28]
 800dfb2:	4401      	add	r1, r0
 800dfb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	015a      	lsls	r2, r3, #5
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfc8:	691b      	ldr	r3, [r3, #16]
 800dfca:	69ba      	ldr	r2, [r7, #24]
 800dfcc:	0151      	lsls	r1, r2, #5
 800dfce:	69fa      	ldr	r2, [r7, #28]
 800dfd0:	440a      	add	r2, r1
 800dfd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dfda:	6113      	str	r3, [r2, #16]
 800dfdc:	e03a      	b.n	800e054 <USB_EPStartXfer+0x3e4>
 800dfde:	bf00      	nop
 800dfe0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	699a      	ldr	r2, [r3, #24]
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	4413      	add	r3, r2
 800dfee:	1e5a      	subs	r2, r3, #1
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	8afa      	ldrh	r2, [r7, #22]
 800e000:	fb03 f202 	mul.w	r2, r3, r2
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	015a      	lsls	r2, r3, #5
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	4413      	add	r3, r2
 800e010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e014:	691a      	ldr	r2, [r3, #16]
 800e016:	8afb      	ldrh	r3, [r7, #22]
 800e018:	04d9      	lsls	r1, r3, #19
 800e01a:	4b38      	ldr	r3, [pc, #224]	; (800e0fc <USB_EPStartXfer+0x48c>)
 800e01c:	400b      	ands	r3, r1
 800e01e:	69b9      	ldr	r1, [r7, #24]
 800e020:	0148      	lsls	r0, r1, #5
 800e022:	69f9      	ldr	r1, [r7, #28]
 800e024:	4401      	add	r1, r0
 800e026:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e02a:	4313      	orrs	r3, r2
 800e02c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	015a      	lsls	r2, r3, #5
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	4413      	add	r3, r2
 800e036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e03a:	691a      	ldr	r2, [r3, #16]
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	69db      	ldr	r3, [r3, #28]
 800e040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e044:	69b9      	ldr	r1, [r7, #24]
 800e046:	0148      	lsls	r0, r1, #5
 800e048:	69f9      	ldr	r1, [r7, #28]
 800e04a:	4401      	add	r1, r0
 800e04c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e050:	4313      	orrs	r3, r2
 800e052:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e054:	79fb      	ldrb	r3, [r7, #7]
 800e056:	2b01      	cmp	r3, #1
 800e058:	d10d      	bne.n	800e076 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d009      	beq.n	800e076 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	6919      	ldr	r1, [r3, #16]
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	015a      	lsls	r2, r3, #5
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	4413      	add	r3, r2
 800e06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e072:	460a      	mov	r2, r1
 800e074:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	791b      	ldrb	r3, [r3, #4]
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d128      	bne.n	800e0d0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d110      	bne.n	800e0b0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	015a      	lsls	r2, r3, #5
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	4413      	add	r3, r2
 800e096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	69ba      	ldr	r2, [r7, #24]
 800e09e:	0151      	lsls	r1, r2, #5
 800e0a0:	69fa      	ldr	r2, [r7, #28]
 800e0a2:	440a      	add	r2, r1
 800e0a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0ac:	6013      	str	r3, [r2, #0]
 800e0ae:	e00f      	b.n	800e0d0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e0b0:	69bb      	ldr	r3, [r7, #24]
 800e0b2:	015a      	lsls	r2, r3, #5
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	69ba      	ldr	r2, [r7, #24]
 800e0c0:	0151      	lsls	r1, r2, #5
 800e0c2:	69fa      	ldr	r2, [r7, #28]
 800e0c4:	440a      	add	r2, r1
 800e0c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	015a      	lsls	r2, r3, #5
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	69ba      	ldr	r2, [r7, #24]
 800e0e0:	0151      	lsls	r1, r2, #5
 800e0e2:	69fa      	ldr	r2, [r7, #28]
 800e0e4:	440a      	add	r2, r1
 800e0e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0f0:	2300      	movs	r3, #0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3720      	adds	r7, #32
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	1ff80000 	.word	0x1ff80000

0800e100 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e100:	b480      	push	{r7}
 800e102:	b087      	sub	sp, #28
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	4613      	mov	r3, r2
 800e10c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	785b      	ldrb	r3, [r3, #1]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	f040 80ce 	bne.w	800e2be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	699b      	ldr	r3, [r3, #24]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d132      	bne.n	800e190 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	015a      	lsls	r2, r3, #5
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	4413      	add	r3, r2
 800e132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e136:	691b      	ldr	r3, [r3, #16]
 800e138:	693a      	ldr	r2, [r7, #16]
 800e13a:	0151      	lsls	r1, r2, #5
 800e13c:	697a      	ldr	r2, [r7, #20]
 800e13e:	440a      	add	r2, r1
 800e140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e144:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e148:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e14c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	015a      	lsls	r2, r3, #5
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	4413      	add	r3, r2
 800e156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e15a:	691b      	ldr	r3, [r3, #16]
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	0151      	lsls	r1, r2, #5
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	440a      	add	r2, r1
 800e164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e168:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e16c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	015a      	lsls	r2, r3, #5
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	4413      	add	r3, r2
 800e176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e17a:	691b      	ldr	r3, [r3, #16]
 800e17c:	693a      	ldr	r2, [r7, #16]
 800e17e:	0151      	lsls	r1, r2, #5
 800e180:	697a      	ldr	r2, [r7, #20]
 800e182:	440a      	add	r2, r1
 800e184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e188:	0cdb      	lsrs	r3, r3, #19
 800e18a:	04db      	lsls	r3, r3, #19
 800e18c:	6113      	str	r3, [r2, #16]
 800e18e:	e04e      	b.n	800e22e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	015a      	lsls	r2, r3, #5
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	4413      	add	r3, r2
 800e198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e19c:	691b      	ldr	r3, [r3, #16]
 800e19e:	693a      	ldr	r2, [r7, #16]
 800e1a0:	0151      	lsls	r1, r2, #5
 800e1a2:	697a      	ldr	r2, [r7, #20]
 800e1a4:	440a      	add	r2, r1
 800e1a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1aa:	0cdb      	lsrs	r3, r3, #19
 800e1ac:	04db      	lsls	r3, r3, #19
 800e1ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	015a      	lsls	r2, r3, #5
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1bc:	691b      	ldr	r3, [r3, #16]
 800e1be:	693a      	ldr	r2, [r7, #16]
 800e1c0:	0151      	lsls	r1, r2, #5
 800e1c2:	697a      	ldr	r2, [r7, #20]
 800e1c4:	440a      	add	r2, r1
 800e1c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e1ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e1d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	699a      	ldr	r2, [r3, #24]
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d903      	bls.n	800e1e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	68da      	ldr	r2, [r3, #12]
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	015a      	lsls	r2, r3, #5
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	693a      	ldr	r2, [r7, #16]
 800e1f8:	0151      	lsls	r1, r2, #5
 800e1fa:	697a      	ldr	r2, [r7, #20]
 800e1fc:	440a      	add	r2, r1
 800e1fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	015a      	lsls	r2, r3, #5
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	4413      	add	r3, r2
 800e210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e214:	691a      	ldr	r2, [r3, #16]
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	699b      	ldr	r3, [r3, #24]
 800e21a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e21e:	6939      	ldr	r1, [r7, #16]
 800e220:	0148      	lsls	r0, r1, #5
 800e222:	6979      	ldr	r1, [r7, #20]
 800e224:	4401      	add	r1, r0
 800e226:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e22a:	4313      	orrs	r3, r2
 800e22c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e22e:	79fb      	ldrb	r3, [r7, #7]
 800e230:	2b01      	cmp	r3, #1
 800e232:	d11e      	bne.n	800e272 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	695b      	ldr	r3, [r3, #20]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d009      	beq.n	800e250 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	015a      	lsls	r2, r3, #5
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	4413      	add	r3, r2
 800e244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e248:	461a      	mov	r2, r3
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	695b      	ldr	r3, [r3, #20]
 800e24e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	015a      	lsls	r2, r3, #5
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	4413      	add	r3, r2
 800e258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	693a      	ldr	r2, [r7, #16]
 800e260:	0151      	lsls	r1, r2, #5
 800e262:	697a      	ldr	r2, [r7, #20]
 800e264:	440a      	add	r2, r1
 800e266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e26a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e26e:	6013      	str	r3, [r2, #0]
 800e270:	e097      	b.n	800e3a2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	015a      	lsls	r2, r3, #5
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	4413      	add	r3, r2
 800e27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	693a      	ldr	r2, [r7, #16]
 800e282:	0151      	lsls	r1, r2, #5
 800e284:	697a      	ldr	r2, [r7, #20]
 800e286:	440a      	add	r2, r1
 800e288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e28c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e290:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	699b      	ldr	r3, [r3, #24]
 800e296:	2b00      	cmp	r3, #0
 800e298:	f000 8083 	beq.w	800e3a2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	f003 030f 	and.w	r3, r3, #15
 800e2ac:	2101      	movs	r1, #1
 800e2ae:	fa01 f303 	lsl.w	r3, r1, r3
 800e2b2:	6979      	ldr	r1, [r7, #20]
 800e2b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	634b      	str	r3, [r1, #52]	; 0x34
 800e2bc:	e071      	b.n	800e3a2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	015a      	lsls	r2, r3, #5
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	693a      	ldr	r2, [r7, #16]
 800e2ce:	0151      	lsls	r1, r2, #5
 800e2d0:	697a      	ldr	r2, [r7, #20]
 800e2d2:	440a      	add	r2, r1
 800e2d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2d8:	0cdb      	lsrs	r3, r3, #19
 800e2da:	04db      	lsls	r3, r3, #19
 800e2dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	015a      	lsls	r2, r3, #5
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ea:	691b      	ldr	r3, [r3, #16]
 800e2ec:	693a      	ldr	r2, [r7, #16]
 800e2ee:	0151      	lsls	r1, r2, #5
 800e2f0:	697a      	ldr	r2, [r7, #20]
 800e2f2:	440a      	add	r2, r1
 800e2f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e2fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e300:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	699b      	ldr	r3, [r3, #24]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d003      	beq.n	800e312 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	68da      	ldr	r2, [r3, #12]
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	68da      	ldr	r2, [r3, #12]
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	015a      	lsls	r2, r3, #5
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	4413      	add	r3, r2
 800e322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	693a      	ldr	r2, [r7, #16]
 800e32a:	0151      	lsls	r1, r2, #5
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	440a      	add	r2, r1
 800e330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e338:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	015a      	lsls	r2, r3, #5
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	4413      	add	r3, r2
 800e342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e346:	691a      	ldr	r2, [r3, #16]
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	69db      	ldr	r3, [r3, #28]
 800e34c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e350:	6939      	ldr	r1, [r7, #16]
 800e352:	0148      	lsls	r0, r1, #5
 800e354:	6979      	ldr	r1, [r7, #20]
 800e356:	4401      	add	r1, r0
 800e358:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e35c:	4313      	orrs	r3, r2
 800e35e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e360:	79fb      	ldrb	r3, [r7, #7]
 800e362:	2b01      	cmp	r3, #1
 800e364:	d10d      	bne.n	800e382 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d009      	beq.n	800e382 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	6919      	ldr	r1, [r3, #16]
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	015a      	lsls	r2, r3, #5
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	4413      	add	r3, r2
 800e37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e37e:	460a      	mov	r2, r1
 800e380:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	015a      	lsls	r2, r3, #5
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	4413      	add	r3, r2
 800e38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	0151      	lsls	r1, r2, #5
 800e394:	697a      	ldr	r2, [r7, #20]
 800e396:	440a      	add	r2, r1
 800e398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e39c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e3a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	371c      	adds	r7, #28
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr

0800e3b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	785b      	ldrb	r3, [r3, #1]
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d14a      	bne.n	800e464 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	015a      	lsls	r2, r3, #5
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3e6:	f040 8086 	bne.w	800e4f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	015a      	lsls	r2, r3, #5
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	683a      	ldr	r2, [r7, #0]
 800e3fc:	7812      	ldrb	r2, [r2, #0]
 800e3fe:	0151      	lsls	r1, r2, #5
 800e400:	693a      	ldr	r2, [r7, #16]
 800e402:	440a      	add	r2, r1
 800e404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e408:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e40c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	015a      	lsls	r2, r3, #5
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	4413      	add	r3, r2
 800e418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	683a      	ldr	r2, [r7, #0]
 800e420:	7812      	ldrb	r2, [r2, #0]
 800e422:	0151      	lsls	r1, r2, #5
 800e424:	693a      	ldr	r2, [r7, #16]
 800e426:	440a      	add	r2, r1
 800e428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e42c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e430:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	3301      	adds	r3, #1
 800e436:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f242 7210 	movw	r2, #10000	; 0x2710
 800e43e:	4293      	cmp	r3, r2
 800e440:	d902      	bls.n	800e448 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e442:	2301      	movs	r3, #1
 800e444:	75fb      	strb	r3, [r7, #23]
          break;
 800e446:	e056      	b.n	800e4f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	015a      	lsls	r2, r3, #5
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	4413      	add	r3, r2
 800e452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e45c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e460:	d0e7      	beq.n	800e432 <USB_EPStopXfer+0x82>
 800e462:	e048      	b.n	800e4f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	015a      	lsls	r2, r3, #5
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	4413      	add	r3, r2
 800e46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e47c:	d13b      	bne.n	800e4f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	015a      	lsls	r2, r3, #5
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	4413      	add	r3, r2
 800e488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	683a      	ldr	r2, [r7, #0]
 800e490:	7812      	ldrb	r2, [r2, #0]
 800e492:	0151      	lsls	r1, r2, #5
 800e494:	693a      	ldr	r2, [r7, #16]
 800e496:	440a      	add	r2, r1
 800e498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e49c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e4a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	015a      	lsls	r2, r3, #5
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	683a      	ldr	r2, [r7, #0]
 800e4b4:	7812      	ldrb	r2, [r2, #0]
 800e4b6:	0151      	lsls	r1, r2, #5
 800e4b8:	693a      	ldr	r2, [r7, #16]
 800e4ba:	440a      	add	r2, r1
 800e4bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e4c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f242 7210 	movw	r2, #10000	; 0x2710
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d902      	bls.n	800e4dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	75fb      	strb	r3, [r7, #23]
          break;
 800e4da:	e00c      	b.n	800e4f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	015a      	lsls	r2, r3, #5
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e4f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4f4:	d0e7      	beq.n	800e4c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	371c      	adds	r7, #28
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e504:	b480      	push	{r7}
 800e506:	b089      	sub	sp, #36	; 0x24
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	4611      	mov	r1, r2
 800e510:	461a      	mov	r2, r3
 800e512:	460b      	mov	r3, r1
 800e514:	71fb      	strb	r3, [r7, #7]
 800e516:	4613      	mov	r3, r2
 800e518:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e522:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e526:	2b00      	cmp	r3, #0
 800e528:	d123      	bne.n	800e572 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e52a:	88bb      	ldrh	r3, [r7, #4]
 800e52c:	3303      	adds	r3, #3
 800e52e:	089b      	lsrs	r3, r3, #2
 800e530:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e532:	2300      	movs	r3, #0
 800e534:	61bb      	str	r3, [r7, #24]
 800e536:	e018      	b.n	800e56a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e538:	79fb      	ldrb	r3, [r7, #7]
 800e53a:	031a      	lsls	r2, r3, #12
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	4413      	add	r3, r2
 800e540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e544:	461a      	mov	r2, r3
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	3301      	adds	r3, #1
 800e550:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	3301      	adds	r3, #1
 800e556:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	3301      	adds	r3, #1
 800e55c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	3301      	adds	r3, #1
 800e562:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	3301      	adds	r3, #1
 800e568:	61bb      	str	r3, [r7, #24]
 800e56a:	69ba      	ldr	r2, [r7, #24]
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d3e2      	bcc.n	800e538 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e572:	2300      	movs	r3, #0
}
 800e574:	4618      	mov	r0, r3
 800e576:	3724      	adds	r7, #36	; 0x24
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e580:	b480      	push	{r7}
 800e582:	b08b      	sub	sp, #44	; 0x2c
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	4613      	mov	r3, r2
 800e58c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e596:	88fb      	ldrh	r3, [r7, #6]
 800e598:	089b      	lsrs	r3, r3, #2
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e59e:	88fb      	ldrh	r3, [r7, #6]
 800e5a0:	f003 0303 	and.w	r3, r3, #3
 800e5a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	623b      	str	r3, [r7, #32]
 800e5aa:	e014      	b.n	800e5d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b6:	601a      	str	r2, [r3, #0]
    pDest++;
 800e5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e5d0:	6a3b      	ldr	r3, [r7, #32]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	623b      	str	r3, [r7, #32]
 800e5d6:	6a3a      	ldr	r2, [r7, #32]
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d3e6      	bcc.n	800e5ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e5de:	8bfb      	ldrh	r3, [r7, #30]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d01e      	beq.n	800e622 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	f107 0310 	add.w	r3, r7, #16
 800e5f4:	6812      	ldr	r2, [r2, #0]
 800e5f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e5f8:	693a      	ldr	r2, [r7, #16]
 800e5fa:	6a3b      	ldr	r3, [r7, #32]
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	00db      	lsls	r3, r3, #3
 800e600:	fa22 f303 	lsr.w	r3, r2, r3
 800e604:	b2da      	uxtb	r2, r3
 800e606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e608:	701a      	strb	r2, [r3, #0]
      i++;
 800e60a:	6a3b      	ldr	r3, [r7, #32]
 800e60c:	3301      	adds	r3, #1
 800e60e:	623b      	str	r3, [r7, #32]
      pDest++;
 800e610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e612:	3301      	adds	r3, #1
 800e614:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e616:	8bfb      	ldrh	r3, [r7, #30]
 800e618:	3b01      	subs	r3, #1
 800e61a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e61c:	8bfb      	ldrh	r3, [r7, #30]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d1ea      	bne.n	800e5f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e624:	4618      	mov	r0, r3
 800e626:	372c      	adds	r7, #44	; 0x2c
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	785b      	ldrb	r3, [r3, #1]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d12c      	bne.n	800e6a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	015a      	lsls	r2, r3, #5
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	4413      	add	r3, r2
 800e654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	db12      	blt.n	800e684 <USB_EPSetStall+0x54>
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00f      	beq.n	800e684 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	015a      	lsls	r2, r3, #5
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	4413      	add	r3, r2
 800e66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	68ba      	ldr	r2, [r7, #8]
 800e674:	0151      	lsls	r1, r2, #5
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	440a      	add	r2, r1
 800e67a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e67e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e682:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	015a      	lsls	r2, r3, #5
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	4413      	add	r3, r2
 800e68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	68ba      	ldr	r2, [r7, #8]
 800e694:	0151      	lsls	r1, r2, #5
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	440a      	add	r2, r1
 800e69a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e69e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e6a2:	6013      	str	r3, [r2, #0]
 800e6a4:	e02b      	b.n	800e6fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	015a      	lsls	r2, r3, #5
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	db12      	blt.n	800e6de <USB_EPSetStall+0xae>
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00f      	beq.n	800e6de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	015a      	lsls	r2, r3, #5
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	68ba      	ldr	r2, [r7, #8]
 800e6ce:	0151      	lsls	r1, r2, #5
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	440a      	add	r2, r1
 800e6d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e6dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	015a      	lsls	r2, r3, #5
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	0151      	lsls	r1, r2, #5
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	440a      	add	r2, r1
 800e6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e6fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3714      	adds	r7, #20
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b085      	sub	sp, #20
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	785b      	ldrb	r3, [r3, #1]
 800e724:	2b01      	cmp	r3, #1
 800e726:	d128      	bne.n	800e77a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	015a      	lsls	r2, r3, #5
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	4413      	add	r3, r2
 800e730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	68ba      	ldr	r2, [r7, #8]
 800e738:	0151      	lsls	r1, r2, #5
 800e73a:	68fa      	ldr	r2, [r7, #12]
 800e73c:	440a      	add	r2, r1
 800e73e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e746:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	791b      	ldrb	r3, [r3, #4]
 800e74c:	2b03      	cmp	r3, #3
 800e74e:	d003      	beq.n	800e758 <USB_EPClearStall+0x4c>
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	791b      	ldrb	r3, [r3, #4]
 800e754:	2b02      	cmp	r3, #2
 800e756:	d138      	bne.n	800e7ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	015a      	lsls	r2, r3, #5
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	4413      	add	r3, r2
 800e760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	68ba      	ldr	r2, [r7, #8]
 800e768:	0151      	lsls	r1, r2, #5
 800e76a:	68fa      	ldr	r2, [r7, #12]
 800e76c:	440a      	add	r2, r1
 800e76e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e776:	6013      	str	r3, [r2, #0]
 800e778:	e027      	b.n	800e7ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	015a      	lsls	r2, r3, #5
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	4413      	add	r3, r2
 800e782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	68ba      	ldr	r2, [r7, #8]
 800e78a:	0151      	lsls	r1, r2, #5
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	440a      	add	r2, r1
 800e790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e798:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	791b      	ldrb	r3, [r3, #4]
 800e79e:	2b03      	cmp	r3, #3
 800e7a0:	d003      	beq.n	800e7aa <USB_EPClearStall+0x9e>
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	791b      	ldrb	r3, [r3, #4]
 800e7a6:	2b02      	cmp	r3, #2
 800e7a8:	d10f      	bne.n	800e7ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	015a      	lsls	r2, r3, #5
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	68ba      	ldr	r2, [r7, #8]
 800e7ba:	0151      	lsls	r1, r2, #5
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	440a      	add	r2, r1
 800e7c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3714      	adds	r7, #20
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e7f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e7fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	78fb      	ldrb	r3, [r7, #3]
 800e806:	011b      	lsls	r3, r3, #4
 800e808:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e80c:	68f9      	ldr	r1, [r7, #12]
 800e80e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e812:	4313      	orrs	r3, r2
 800e814:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3714      	adds	r7, #20
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e824:	b480      	push	{r7}
 800e826:	b085      	sub	sp, #20
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e83e:	f023 0303 	bic.w	r3, r3, #3
 800e842:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	68fa      	ldr	r2, [r7, #12]
 800e84e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e852:	f023 0302 	bic.w	r3, r3, #2
 800e856:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3714      	adds	r7, #20
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr

0800e866 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e866:	b480      	push	{r7}
 800e868:	b085      	sub	sp, #20
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	68fa      	ldr	r2, [r7, #12]
 800e87c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e880:	f023 0303 	bic.w	r3, r3, #3
 800e884:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	68fa      	ldr	r2, [r7, #12]
 800e890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e894:	f043 0302 	orr.w	r3, r3, #2
 800e898:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3714      	adds	r7, #20
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b085      	sub	sp, #20
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	695b      	ldr	r3, [r3, #20]
 800e8b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	699b      	ldr	r3, [r3, #24]
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	4013      	ands	r3, r2
 800e8be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3714      	adds	r7, #20
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr

0800e8ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e8ce:	b480      	push	{r7}
 800e8d0:	b085      	sub	sp, #20
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8e0:	699b      	ldr	r3, [r3, #24]
 800e8e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8ea:	69db      	ldr	r3, [r3, #28]
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	0c1b      	lsrs	r3, r3, #16
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3714      	adds	r7, #20
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr

0800e902 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e902:	b480      	push	{r7}
 800e904:	b085      	sub	sp, #20
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e91e:	69db      	ldr	r3, [r3, #28]
 800e920:	68ba      	ldr	r2, [r7, #8]
 800e922:	4013      	ands	r3, r2
 800e924:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	b29b      	uxth	r3, r3
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3714      	adds	r7, #20
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr

0800e936 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e936:	b480      	push	{r7}
 800e938:	b085      	sub	sp, #20
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
 800e93e:	460b      	mov	r3, r1
 800e940:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e946:	78fb      	ldrb	r3, [r7, #3]
 800e948:	015a      	lsls	r2, r3, #5
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	4413      	add	r3, r2
 800e94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	68ba      	ldr	r2, [r7, #8]
 800e960:	4013      	ands	r3, r2
 800e962:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e964:	68bb      	ldr	r3, [r7, #8]
}
 800e966:	4618      	mov	r0, r3
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e972:	b480      	push	{r7}
 800e974:	b087      	sub	sp, #28
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
 800e97a:	460b      	mov	r3, r1
 800e97c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e994:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e996:	78fb      	ldrb	r3, [r7, #3]
 800e998:	f003 030f 	and.w	r3, r3, #15
 800e99c:	68fa      	ldr	r2, [r7, #12]
 800e99e:	fa22 f303 	lsr.w	r3, r2, r3
 800e9a2:	01db      	lsls	r3, r3, #7
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	693a      	ldr	r2, [r7, #16]
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e9ac:	78fb      	ldrb	r3, [r7, #3]
 800e9ae:	015a      	lsls	r2, r3, #5
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	693a      	ldr	r2, [r7, #16]
 800e9bc:	4013      	ands	r3, r2
 800e9be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e9c0:	68bb      	ldr	r3, [r7, #8]
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	371c      	adds	r7, #28
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr

0800e9ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e9ce:	b480      	push	{r7}
 800e9d0:	b083      	sub	sp, #12
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	695b      	ldr	r3, [r3, #20]
 800e9da:	f003 0301 	and.w	r3, r3, #1
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	370c      	adds	r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr

0800e9ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e9ea:	b480      	push	{r7}
 800e9ec:	b085      	sub	sp, #20
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	68fa      	ldr	r2, [r7, #12]
 800ea00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ea08:	f023 0307 	bic.w	r3, r3, #7
 800ea0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ea22:	2300      	movs	r3, #0
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3714      	adds	r7, #20
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b087      	sub	sp, #28
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	460b      	mov	r3, r1
 800ea3a:	607a      	str	r2, [r7, #4]
 800ea3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	333c      	adds	r3, #60	; 0x3c
 800ea46:	3304      	adds	r3, #4
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	4a26      	ldr	r2, [pc, #152]	; (800eae8 <USB_EP0_OutStart+0xb8>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d90a      	bls.n	800ea6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea64:	d101      	bne.n	800ea6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ea66:	2300      	movs	r3, #0
 800ea68:	e037      	b.n	800eada <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea70:	461a      	mov	r2, r3
 800ea72:	2300      	movs	r3, #0
 800ea74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea7c:	691b      	ldr	r3, [r3, #16]
 800ea7e:	697a      	ldr	r2, [r7, #20]
 800ea80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	697a      	ldr	r2, [r7, #20]
 800ea94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea98:	f043 0318 	orr.w	r3, r3, #24
 800ea9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaa4:	691b      	ldr	r3, [r3, #16]
 800eaa6:	697a      	ldr	r2, [r7, #20]
 800eaa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eaac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800eab0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800eab2:	7afb      	ldrb	r3, [r7, #11]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d10f      	bne.n	800ead8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eabe:	461a      	mov	r2, r3
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	697a      	ldr	r2, [r7, #20]
 800eace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ead2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ead6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ead8:	2300      	movs	r3, #0
}
 800eada:	4618      	mov	r0, r3
 800eadc:	371c      	adds	r7, #28
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	4f54300a 	.word	0x4f54300a

0800eaec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b085      	sub	sp, #20
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	3301      	adds	r3, #1
 800eafc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	4a13      	ldr	r2, [pc, #76]	; (800eb50 <USB_CoreReset+0x64>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d901      	bls.n	800eb0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800eb06:	2303      	movs	r3, #3
 800eb08:	e01b      	b.n	800eb42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	691b      	ldr	r3, [r3, #16]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	daf2      	bge.n	800eaf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800eb12:	2300      	movs	r3, #0
 800eb14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	691b      	ldr	r3, [r3, #16]
 800eb1a:	f043 0201 	orr.w	r2, r3, #1
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	3301      	adds	r3, #1
 800eb26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	4a09      	ldr	r2, [pc, #36]	; (800eb50 <USB_CoreReset+0x64>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d901      	bls.n	800eb34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800eb30:	2303      	movs	r3, #3
 800eb32:	e006      	b.n	800eb42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	691b      	ldr	r3, [r3, #16]
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d0f0      	beq.n	800eb22 <USB_CoreReset+0x36>

  return HAL_OK;
 800eb40:	2300      	movs	r3, #0
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3714      	adds	r7, #20
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr
 800eb4e:	bf00      	nop
 800eb50:	00030d40 	.word	0x00030d40

0800eb54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800eb60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800eb64:	f002 fca2 	bl	80114ac <USBD_static_malloc>
 800eb68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d109      	bne.n	800eb84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	32b0      	adds	r2, #176	; 0xb0
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800eb80:	2302      	movs	r3, #2
 800eb82:	e0d4      	b.n	800ed2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800eb84:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800eb88:	2100      	movs	r1, #0
 800eb8a:	68f8      	ldr	r0, [r7, #12]
 800eb8c:	f002 ff0a 	bl	80119a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	32b0      	adds	r2, #176	; 0xb0
 800eb9a:	68f9      	ldr	r1, [r7, #12]
 800eb9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	32b0      	adds	r2, #176	; 0xb0
 800ebaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	7c1b      	ldrb	r3, [r3, #16]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d138      	bne.n	800ec2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ebbc:	4b5e      	ldr	r3, [pc, #376]	; (800ed38 <USBD_CDC_Init+0x1e4>)
 800ebbe:	7819      	ldrb	r1, [r3, #0]
 800ebc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebc4:	2202      	movs	r2, #2
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f002 fb4d 	bl	8011266 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ebcc:	4b5a      	ldr	r3, [pc, #360]	; (800ed38 <USBD_CDC_Init+0x1e4>)
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	f003 020f 	and.w	r2, r3, #15
 800ebd4:	6879      	ldr	r1, [r7, #4]
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4413      	add	r3, r2
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	440b      	add	r3, r1
 800ebe0:	3324      	adds	r3, #36	; 0x24
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ebe6:	4b55      	ldr	r3, [pc, #340]	; (800ed3c <USBD_CDC_Init+0x1e8>)
 800ebe8:	7819      	ldrb	r1, [r3, #0]
 800ebea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebee:	2202      	movs	r2, #2
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f002 fb38 	bl	8011266 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ebf6:	4b51      	ldr	r3, [pc, #324]	; (800ed3c <USBD_CDC_Init+0x1e8>)
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	f003 020f 	and.w	r2, r3, #15
 800ebfe:	6879      	ldr	r1, [r7, #4]
 800ec00:	4613      	mov	r3, r2
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	4413      	add	r3, r2
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	440b      	add	r3, r1
 800ec0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ec0e:	2201      	movs	r2, #1
 800ec10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ec12:	4b4b      	ldr	r3, [pc, #300]	; (800ed40 <USBD_CDC_Init+0x1ec>)
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	f003 020f 	and.w	r2, r3, #15
 800ec1a:	6879      	ldr	r1, [r7, #4]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	4413      	add	r3, r2
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	440b      	add	r3, r1
 800ec26:	3326      	adds	r3, #38	; 0x26
 800ec28:	2210      	movs	r2, #16
 800ec2a:	801a      	strh	r2, [r3, #0]
 800ec2c:	e035      	b.n	800ec9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ec2e:	4b42      	ldr	r3, [pc, #264]	; (800ed38 <USBD_CDC_Init+0x1e4>)
 800ec30:	7819      	ldrb	r1, [r3, #0]
 800ec32:	2340      	movs	r3, #64	; 0x40
 800ec34:	2202      	movs	r2, #2
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f002 fb15 	bl	8011266 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ec3c:	4b3e      	ldr	r3, [pc, #248]	; (800ed38 <USBD_CDC_Init+0x1e4>)
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	f003 020f 	and.w	r2, r3, #15
 800ec44:	6879      	ldr	r1, [r7, #4]
 800ec46:	4613      	mov	r3, r2
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	4413      	add	r3, r2
 800ec4c:	009b      	lsls	r3, r3, #2
 800ec4e:	440b      	add	r3, r1
 800ec50:	3324      	adds	r3, #36	; 0x24
 800ec52:	2201      	movs	r2, #1
 800ec54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ec56:	4b39      	ldr	r3, [pc, #228]	; (800ed3c <USBD_CDC_Init+0x1e8>)
 800ec58:	7819      	ldrb	r1, [r3, #0]
 800ec5a:	2340      	movs	r3, #64	; 0x40
 800ec5c:	2202      	movs	r2, #2
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f002 fb01 	bl	8011266 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ec64:	4b35      	ldr	r3, [pc, #212]	; (800ed3c <USBD_CDC_Init+0x1e8>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	f003 020f 	and.w	r2, r3, #15
 800ec6c:	6879      	ldr	r1, [r7, #4]
 800ec6e:	4613      	mov	r3, r2
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	4413      	add	r3, r2
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	440b      	add	r3, r1
 800ec78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ec80:	4b2f      	ldr	r3, [pc, #188]	; (800ed40 <USBD_CDC_Init+0x1ec>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	f003 020f 	and.w	r2, r3, #15
 800ec88:	6879      	ldr	r1, [r7, #4]
 800ec8a:	4613      	mov	r3, r2
 800ec8c:	009b      	lsls	r3, r3, #2
 800ec8e:	4413      	add	r3, r2
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	440b      	add	r3, r1
 800ec94:	3326      	adds	r3, #38	; 0x26
 800ec96:	2210      	movs	r2, #16
 800ec98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ec9a:	4b29      	ldr	r3, [pc, #164]	; (800ed40 <USBD_CDC_Init+0x1ec>)
 800ec9c:	7819      	ldrb	r1, [r3, #0]
 800ec9e:	2308      	movs	r3, #8
 800eca0:	2203      	movs	r2, #3
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f002 fadf 	bl	8011266 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800eca8:	4b25      	ldr	r3, [pc, #148]	; (800ed40 <USBD_CDC_Init+0x1ec>)
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	f003 020f 	and.w	r2, r3, #15
 800ecb0:	6879      	ldr	r1, [r7, #4]
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	4413      	add	r3, r2
 800ecb8:	009b      	lsls	r3, r3, #2
 800ecba:	440b      	add	r3, r1
 800ecbc:	3324      	adds	r3, #36	; 0x24
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	33b0      	adds	r3, #176	; 0xb0
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	4413      	add	r3, r2
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2200      	movs	r2, #0
 800ece2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2200      	movs	r2, #0
 800ecea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d101      	bne.n	800ecfc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	e018      	b.n	800ed2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	7c1b      	ldrb	r3, [r3, #16]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d10a      	bne.n	800ed1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ed04:	4b0d      	ldr	r3, [pc, #52]	; (800ed3c <USBD_CDC_Init+0x1e8>)
 800ed06:	7819      	ldrb	r1, [r3, #0]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f002 fb96 	bl	8011444 <USBD_LL_PrepareReceive>
 800ed18:	e008      	b.n	800ed2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ed1a:	4b08      	ldr	r3, [pc, #32]	; (800ed3c <USBD_CDC_Init+0x1e8>)
 800ed1c:	7819      	ldrb	r1, [r3, #0]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed24:	2340      	movs	r3, #64	; 0x40
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f002 fb8c 	bl	8011444 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ed2c:	2300      	movs	r3, #0
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3710      	adds	r7, #16
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	20000467 	.word	0x20000467
 800ed3c:	20000468 	.word	0x20000468
 800ed40:	20000469 	.word	0x20000469

0800ed44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ed50:	4b3a      	ldr	r3, [pc, #232]	; (800ee3c <USBD_CDC_DeInit+0xf8>)
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	4619      	mov	r1, r3
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f002 faab 	bl	80112b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ed5c:	4b37      	ldr	r3, [pc, #220]	; (800ee3c <USBD_CDC_DeInit+0xf8>)
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	f003 020f 	and.w	r2, r3, #15
 800ed64:	6879      	ldr	r1, [r7, #4]
 800ed66:	4613      	mov	r3, r2
 800ed68:	009b      	lsls	r3, r3, #2
 800ed6a:	4413      	add	r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	440b      	add	r3, r1
 800ed70:	3324      	adds	r3, #36	; 0x24
 800ed72:	2200      	movs	r2, #0
 800ed74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ed76:	4b32      	ldr	r3, [pc, #200]	; (800ee40 <USBD_CDC_DeInit+0xfc>)
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f002 fa98 	bl	80112b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ed82:	4b2f      	ldr	r3, [pc, #188]	; (800ee40 <USBD_CDC_DeInit+0xfc>)
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	f003 020f 	and.w	r2, r3, #15
 800ed8a:	6879      	ldr	r1, [r7, #4]
 800ed8c:	4613      	mov	r3, r2
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	4413      	add	r3, r2
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	440b      	add	r3, r1
 800ed96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ed9e:	4b29      	ldr	r3, [pc, #164]	; (800ee44 <USBD_CDC_DeInit+0x100>)
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	4619      	mov	r1, r3
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f002 fa84 	bl	80112b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800edaa:	4b26      	ldr	r3, [pc, #152]	; (800ee44 <USBD_CDC_DeInit+0x100>)
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	f003 020f 	and.w	r2, r3, #15
 800edb2:	6879      	ldr	r1, [r7, #4]
 800edb4:	4613      	mov	r3, r2
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4413      	add	r3, r2
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	440b      	add	r3, r1
 800edbe:	3324      	adds	r3, #36	; 0x24
 800edc0:	2200      	movs	r2, #0
 800edc2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800edc4:	4b1f      	ldr	r3, [pc, #124]	; (800ee44 <USBD_CDC_DeInit+0x100>)
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	f003 020f 	and.w	r2, r3, #15
 800edcc:	6879      	ldr	r1, [r7, #4]
 800edce:	4613      	mov	r3, r2
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	4413      	add	r3, r2
 800edd4:	009b      	lsls	r3, r3, #2
 800edd6:	440b      	add	r3, r1
 800edd8:	3326      	adds	r3, #38	; 0x26
 800edda:	2200      	movs	r2, #0
 800eddc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	32b0      	adds	r2, #176	; 0xb0
 800ede8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d01f      	beq.n	800ee30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	33b0      	adds	r3, #176	; 0xb0
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	4413      	add	r3, r2
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	32b0      	adds	r2, #176	; 0xb0
 800ee0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee12:	4618      	mov	r0, r3
 800ee14:	f002 fb58 	bl	80114c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	32b0      	adds	r2, #176	; 0xb0
 800ee22:	2100      	movs	r1, #0
 800ee24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ee30:	2300      	movs	r3, #0
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3708      	adds	r7, #8
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	20000467 	.word	0x20000467
 800ee40:	20000468 	.word	0x20000468
 800ee44:	20000469 	.word	0x20000469

0800ee48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b086      	sub	sp, #24
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	32b0      	adds	r2, #176	; 0xb0
 800ee5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ee62:	2300      	movs	r3, #0
 800ee64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ee66:	2300      	movs	r3, #0
 800ee68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d101      	bne.n	800ee78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ee74:	2303      	movs	r3, #3
 800ee76:	e0bf      	b.n	800eff8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d050      	beq.n	800ef26 <USBD_CDC_Setup+0xde>
 800ee84:	2b20      	cmp	r3, #32
 800ee86:	f040 80af 	bne.w	800efe8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	88db      	ldrh	r3, [r3, #6]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d03a      	beq.n	800ef08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	b25b      	sxtb	r3, r3
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	da1b      	bge.n	800eed4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	33b0      	adds	r3, #176	; 0xb0
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	4413      	add	r3, r2
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	683a      	ldr	r2, [r7, #0]
 800eeb0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800eeb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eeb4:	683a      	ldr	r2, [r7, #0]
 800eeb6:	88d2      	ldrh	r2, [r2, #6]
 800eeb8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	88db      	ldrh	r3, [r3, #6]
 800eebe:	2b07      	cmp	r3, #7
 800eec0:	bf28      	it	cs
 800eec2:	2307      	movcs	r3, #7
 800eec4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	89fa      	ldrh	r2, [r7, #14]
 800eeca:	4619      	mov	r1, r3
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f001 fd89 	bl	80109e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800eed2:	e090      	b.n	800eff6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	785a      	ldrb	r2, [r3, #1]
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	88db      	ldrh	r3, [r3, #6]
 800eee2:	2b3f      	cmp	r3, #63	; 0x3f
 800eee4:	d803      	bhi.n	800eeee <USBD_CDC_Setup+0xa6>
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	88db      	ldrh	r3, [r3, #6]
 800eeea:	b2da      	uxtb	r2, r3
 800eeec:	e000      	b.n	800eef0 <USBD_CDC_Setup+0xa8>
 800eeee:	2240      	movs	r2, #64	; 0x40
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800eef6:	6939      	ldr	r1, [r7, #16]
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800eefe:	461a      	mov	r2, r3
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f001 fd9b 	bl	8010a3c <USBD_CtlPrepareRx>
      break;
 800ef06:	e076      	b.n	800eff6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	33b0      	adds	r3, #176	; 0xb0
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	4413      	add	r3, r2
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	683a      	ldr	r2, [r7, #0]
 800ef1c:	7850      	ldrb	r0, [r2, #1]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	6839      	ldr	r1, [r7, #0]
 800ef22:	4798      	blx	r3
      break;
 800ef24:	e067      	b.n	800eff6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	785b      	ldrb	r3, [r3, #1]
 800ef2a:	2b0b      	cmp	r3, #11
 800ef2c:	d851      	bhi.n	800efd2 <USBD_CDC_Setup+0x18a>
 800ef2e:	a201      	add	r2, pc, #4	; (adr r2, 800ef34 <USBD_CDC_Setup+0xec>)
 800ef30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef34:	0800ef65 	.word	0x0800ef65
 800ef38:	0800efe1 	.word	0x0800efe1
 800ef3c:	0800efd3 	.word	0x0800efd3
 800ef40:	0800efd3 	.word	0x0800efd3
 800ef44:	0800efd3 	.word	0x0800efd3
 800ef48:	0800efd3 	.word	0x0800efd3
 800ef4c:	0800efd3 	.word	0x0800efd3
 800ef50:	0800efd3 	.word	0x0800efd3
 800ef54:	0800efd3 	.word	0x0800efd3
 800ef58:	0800efd3 	.word	0x0800efd3
 800ef5c:	0800ef8f 	.word	0x0800ef8f
 800ef60:	0800efb9 	.word	0x0800efb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	2b03      	cmp	r3, #3
 800ef6e:	d107      	bne.n	800ef80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ef70:	f107 030a 	add.w	r3, r7, #10
 800ef74:	2202      	movs	r2, #2
 800ef76:	4619      	mov	r1, r3
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f001 fd33 	bl	80109e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ef7e:	e032      	b.n	800efe6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ef80:	6839      	ldr	r1, [r7, #0]
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f001 fcbd 	bl	8010902 <USBD_CtlError>
            ret = USBD_FAIL;
 800ef88:	2303      	movs	r3, #3
 800ef8a:	75fb      	strb	r3, [r7, #23]
          break;
 800ef8c:	e02b      	b.n	800efe6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef94:	b2db      	uxtb	r3, r3
 800ef96:	2b03      	cmp	r3, #3
 800ef98:	d107      	bne.n	800efaa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ef9a:	f107 030d 	add.w	r3, r7, #13
 800ef9e:	2201      	movs	r2, #1
 800efa0:	4619      	mov	r1, r3
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f001 fd1e 	bl	80109e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800efa8:	e01d      	b.n	800efe6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800efaa:	6839      	ldr	r1, [r7, #0]
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f001 fca8 	bl	8010902 <USBD_CtlError>
            ret = USBD_FAIL;
 800efb2:	2303      	movs	r3, #3
 800efb4:	75fb      	strb	r3, [r7, #23]
          break;
 800efb6:	e016      	b.n	800efe6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	2b03      	cmp	r3, #3
 800efc2:	d00f      	beq.n	800efe4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800efc4:	6839      	ldr	r1, [r7, #0]
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f001 fc9b 	bl	8010902 <USBD_CtlError>
            ret = USBD_FAIL;
 800efcc:	2303      	movs	r3, #3
 800efce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800efd0:	e008      	b.n	800efe4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800efd2:	6839      	ldr	r1, [r7, #0]
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f001 fc94 	bl	8010902 <USBD_CtlError>
          ret = USBD_FAIL;
 800efda:	2303      	movs	r3, #3
 800efdc:	75fb      	strb	r3, [r7, #23]
          break;
 800efde:	e002      	b.n	800efe6 <USBD_CDC_Setup+0x19e>
          break;
 800efe0:	bf00      	nop
 800efe2:	e008      	b.n	800eff6 <USBD_CDC_Setup+0x1ae>
          break;
 800efe4:	bf00      	nop
      }
      break;
 800efe6:	e006      	b.n	800eff6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800efe8:	6839      	ldr	r1, [r7, #0]
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f001 fc89 	bl	8010902 <USBD_CtlError>
      ret = USBD_FAIL;
 800eff0:	2303      	movs	r3, #3
 800eff2:	75fb      	strb	r3, [r7, #23]
      break;
 800eff4:	bf00      	nop
  }

  return (uint8_t)ret;
 800eff6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3718      	adds	r7, #24
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	460b      	mov	r3, r1
 800f00a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f012:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	32b0      	adds	r2, #176	; 0xb0
 800f01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d101      	bne.n	800f02a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f026:	2303      	movs	r3, #3
 800f028:	e065      	b.n	800f0f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	32b0      	adds	r2, #176	; 0xb0
 800f034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f038:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f03a:	78fb      	ldrb	r3, [r7, #3]
 800f03c:	f003 020f 	and.w	r2, r3, #15
 800f040:	6879      	ldr	r1, [r7, #4]
 800f042:	4613      	mov	r3, r2
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	4413      	add	r3, r2
 800f048:	009b      	lsls	r3, r3, #2
 800f04a:	440b      	add	r3, r1
 800f04c:	3318      	adds	r3, #24
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d02f      	beq.n	800f0b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f054:	78fb      	ldrb	r3, [r7, #3]
 800f056:	f003 020f 	and.w	r2, r3, #15
 800f05a:	6879      	ldr	r1, [r7, #4]
 800f05c:	4613      	mov	r3, r2
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	4413      	add	r3, r2
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	440b      	add	r3, r1
 800f066:	3318      	adds	r3, #24
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	78fb      	ldrb	r3, [r7, #3]
 800f06c:	f003 010f 	and.w	r1, r3, #15
 800f070:	68f8      	ldr	r0, [r7, #12]
 800f072:	460b      	mov	r3, r1
 800f074:	00db      	lsls	r3, r3, #3
 800f076:	440b      	add	r3, r1
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	4403      	add	r3, r0
 800f07c:	3348      	adds	r3, #72	; 0x48
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	fbb2 f1f3 	udiv	r1, r2, r3
 800f084:	fb01 f303 	mul.w	r3, r1, r3
 800f088:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d112      	bne.n	800f0b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f08e:	78fb      	ldrb	r3, [r7, #3]
 800f090:	f003 020f 	and.w	r2, r3, #15
 800f094:	6879      	ldr	r1, [r7, #4]
 800f096:	4613      	mov	r3, r2
 800f098:	009b      	lsls	r3, r3, #2
 800f09a:	4413      	add	r3, r2
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	440b      	add	r3, r1
 800f0a0:	3318      	adds	r3, #24
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f0a6:	78f9      	ldrb	r1, [r7, #3]
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f002 f9a8 	bl	8011402 <USBD_LL_Transmit>
 800f0b2:	e01f      	b.n	800f0f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	33b0      	adds	r3, #176	; 0xb0
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	4413      	add	r3, r2
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	691b      	ldr	r3, [r3, #16]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d010      	beq.n	800f0f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	33b0      	adds	r3, #176	; 0xb0
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	4413      	add	r3, r2
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	691b      	ldr	r3, [r3, #16]
 800f0e4:	68ba      	ldr	r2, [r7, #8]
 800f0e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f0ea:	68ba      	ldr	r2, [r7, #8]
 800f0ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f0f0:	78fa      	ldrb	r2, [r7, #3]
 800f0f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f0f4:	2300      	movs	r3, #0
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f0fe:	b580      	push	{r7, lr}
 800f100:	b084      	sub	sp, #16
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
 800f106:	460b      	mov	r3, r1
 800f108:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	32b0      	adds	r2, #176	; 0xb0
 800f114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f118:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	32b0      	adds	r2, #176	; 0xb0
 800f124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d101      	bne.n	800f130 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f12c:	2303      	movs	r3, #3
 800f12e:	e01a      	b.n	800f166 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f130:	78fb      	ldrb	r3, [r7, #3]
 800f132:	4619      	mov	r1, r3
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f002 f9a6 	bl	8011486 <USBD_LL_GetRxDataSize>
 800f13a:	4602      	mov	r2, r0
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	33b0      	adds	r3, #176	; 0xb0
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4413      	add	r3, r2
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f15a:	68fa      	ldr	r2, [r7, #12]
 800f15c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f160:	4611      	mov	r1, r2
 800f162:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b084      	sub	sp, #16
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	32b0      	adds	r2, #176	; 0xb0
 800f180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f184:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d101      	bne.n	800f190 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f18c:	2303      	movs	r3, #3
 800f18e:	e025      	b.n	800f1dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	33b0      	adds	r3, #176	; 0xb0
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	4413      	add	r3, r2
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d01a      	beq.n	800f1da <USBD_CDC_EP0_RxReady+0x6c>
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f1aa:	2bff      	cmp	r3, #255	; 0xff
 800f1ac:	d015      	beq.n	800f1da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	33b0      	adds	r3, #176	; 0xb0
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	4413      	add	r3, r2
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800f1c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f1c8:	68fa      	ldr	r2, [r7, #12]
 800f1ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f1ce:	b292      	uxth	r2, r2
 800f1d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	22ff      	movs	r2, #255	; 0xff
 800f1d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f1da:	2300      	movs	r3, #0
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3710      	adds	r7, #16
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b086      	sub	sp, #24
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f1ec:	2182      	movs	r1, #130	; 0x82
 800f1ee:	4818      	ldr	r0, [pc, #96]	; (800f250 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f1f0:	f000 fd4f 	bl	800fc92 <USBD_GetEpDesc>
 800f1f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f1f6:	2101      	movs	r1, #1
 800f1f8:	4815      	ldr	r0, [pc, #84]	; (800f250 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f1fa:	f000 fd4a 	bl	800fc92 <USBD_GetEpDesc>
 800f1fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f200:	2181      	movs	r1, #129	; 0x81
 800f202:	4813      	ldr	r0, [pc, #76]	; (800f250 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f204:	f000 fd45 	bl	800fc92 <USBD_GetEpDesc>
 800f208:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d002      	beq.n	800f216 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	2210      	movs	r2, #16
 800f214:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d006      	beq.n	800f22a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	2200      	movs	r2, #0
 800f220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f224:	711a      	strb	r2, [r3, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d006      	beq.n	800f23e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2200      	movs	r2, #0
 800f234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f238:	711a      	strb	r2, [r3, #4]
 800f23a:	2200      	movs	r2, #0
 800f23c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2243      	movs	r2, #67	; 0x43
 800f242:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f244:	4b02      	ldr	r3, [pc, #8]	; (800f250 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f246:	4618      	mov	r0, r3
 800f248:	3718      	adds	r7, #24
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	20000424 	.word	0x20000424

0800f254 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f25c:	2182      	movs	r1, #130	; 0x82
 800f25e:	4818      	ldr	r0, [pc, #96]	; (800f2c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f260:	f000 fd17 	bl	800fc92 <USBD_GetEpDesc>
 800f264:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f266:	2101      	movs	r1, #1
 800f268:	4815      	ldr	r0, [pc, #84]	; (800f2c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f26a:	f000 fd12 	bl	800fc92 <USBD_GetEpDesc>
 800f26e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f270:	2181      	movs	r1, #129	; 0x81
 800f272:	4813      	ldr	r0, [pc, #76]	; (800f2c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f274:	f000 fd0d 	bl	800fc92 <USBD_GetEpDesc>
 800f278:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d002      	beq.n	800f286 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	2210      	movs	r2, #16
 800f284:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d006      	beq.n	800f29a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	2200      	movs	r2, #0
 800f290:	711a      	strb	r2, [r3, #4]
 800f292:	2200      	movs	r2, #0
 800f294:	f042 0202 	orr.w	r2, r2, #2
 800f298:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d006      	beq.n	800f2ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	711a      	strb	r2, [r3, #4]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f042 0202 	orr.w	r2, r2, #2
 800f2ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2243      	movs	r2, #67	; 0x43
 800f2b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f2b4:	4b02      	ldr	r3, [pc, #8]	; (800f2c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3718      	adds	r7, #24
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	20000424 	.word	0x20000424

0800f2c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b086      	sub	sp, #24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f2cc:	2182      	movs	r1, #130	; 0x82
 800f2ce:	4818      	ldr	r0, [pc, #96]	; (800f330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f2d0:	f000 fcdf 	bl	800fc92 <USBD_GetEpDesc>
 800f2d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f2d6:	2101      	movs	r1, #1
 800f2d8:	4815      	ldr	r0, [pc, #84]	; (800f330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f2da:	f000 fcda 	bl	800fc92 <USBD_GetEpDesc>
 800f2de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f2e0:	2181      	movs	r1, #129	; 0x81
 800f2e2:	4813      	ldr	r0, [pc, #76]	; (800f330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f2e4:	f000 fcd5 	bl	800fc92 <USBD_GetEpDesc>
 800f2e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d002      	beq.n	800f2f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	2210      	movs	r2, #16
 800f2f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d006      	beq.n	800f30a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	2200      	movs	r2, #0
 800f300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f304:	711a      	strb	r2, [r3, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d006      	beq.n	800f31e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2200      	movs	r2, #0
 800f314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f318:	711a      	strb	r2, [r3, #4]
 800f31a:	2200      	movs	r2, #0
 800f31c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2243      	movs	r2, #67	; 0x43
 800f322:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f324:	4b02      	ldr	r3, [pc, #8]	; (800f330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f326:	4618      	mov	r0, r3
 800f328:	3718      	adds	r7, #24
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	20000424 	.word	0x20000424

0800f334 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	220a      	movs	r2, #10
 800f340:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f342:	4b03      	ldr	r3, [pc, #12]	; (800f350 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f344:	4618      	mov	r0, r3
 800f346:	370c      	adds	r7, #12
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	200003e0 	.word	0x200003e0

0800f354 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d101      	bne.n	800f368 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f364:	2303      	movs	r3, #3
 800f366:	e009      	b.n	800f37c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	33b0      	adds	r3, #176	; 0xb0
 800f372:	009b      	lsls	r3, r3, #2
 800f374:	4413      	add	r3, r2
 800f376:	683a      	ldr	r2, [r7, #0]
 800f378:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	370c      	adds	r7, #12
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f388:	b480      	push	{r7}
 800f38a:	b087      	sub	sp, #28
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	32b0      	adds	r2, #176	; 0xb0
 800f39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d101      	bne.n	800f3ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f3aa:	2303      	movs	r3, #3
 800f3ac:	e008      	b.n	800f3c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	68ba      	ldr	r2, [r7, #8]
 800f3b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	687a      	ldr	r2, [r7, #4]
 800f3ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f3be:	2300      	movs	r3, #0
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	371c      	adds	r7, #28
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	32b0      	adds	r2, #176	; 0xb0
 800f3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d101      	bne.n	800f3f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f3ec:	2303      	movs	r3, #3
 800f3ee:	e004      	b.n	800f3fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f3f8:	2300      	movs	r3, #0
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
	...

0800f408 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	32b0      	adds	r2, #176	; 0xb0
 800f41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f41e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f420:	2301      	movs	r3, #1
 800f422:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	32b0      	adds	r2, #176	; 0xb0
 800f42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d101      	bne.n	800f43a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f436:	2303      	movs	r3, #3
 800f438:	e025      	b.n	800f486 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f440:	2b00      	cmp	r3, #0
 800f442:	d11f      	bne.n	800f484 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	2201      	movs	r2, #1
 800f448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f44c:	4b10      	ldr	r3, [pc, #64]	; (800f490 <USBD_CDC_TransmitPacket+0x88>)
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	f003 020f 	and.w	r2, r3, #15
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	4613      	mov	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4413      	add	r3, r2
 800f462:	009b      	lsls	r3, r3, #2
 800f464:	4403      	add	r3, r0
 800f466:	3318      	adds	r3, #24
 800f468:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f46a:	4b09      	ldr	r3, [pc, #36]	; (800f490 <USBD_CDC_TransmitPacket+0x88>)
 800f46c:	7819      	ldrb	r1, [r3, #0]
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f001 ffc1 	bl	8011402 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f480:	2300      	movs	r3, #0
 800f482:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f484:	7bfb      	ldrb	r3, [r7, #15]
}
 800f486:	4618      	mov	r0, r3
 800f488:	3710      	adds	r7, #16
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	20000467 	.word	0x20000467

0800f494 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	32b0      	adds	r2, #176	; 0xb0
 800f4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	32b0      	adds	r2, #176	; 0xb0
 800f4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d101      	bne.n	800f4c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f4be:	2303      	movs	r3, #3
 800f4c0:	e018      	b.n	800f4f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	7c1b      	ldrb	r3, [r3, #16]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d10a      	bne.n	800f4e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f4ca:	4b0c      	ldr	r3, [pc, #48]	; (800f4fc <USBD_CDC_ReceivePacket+0x68>)
 800f4cc:	7819      	ldrb	r1, [r3, #0]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f4d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f001 ffb3 	bl	8011444 <USBD_LL_PrepareReceive>
 800f4de:	e008      	b.n	800f4f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f4e0:	4b06      	ldr	r3, [pc, #24]	; (800f4fc <USBD_CDC_ReceivePacket+0x68>)
 800f4e2:	7819      	ldrb	r1, [r3, #0]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f4ea:	2340      	movs	r3, #64	; 0x40
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f001 ffa9 	bl	8011444 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f4f2:	2300      	movs	r3, #0
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3710      	adds	r7, #16
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	20000468 	.word	0x20000468

0800f500 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af00      	add	r7, sp, #0
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	4613      	mov	r3, r2
 800f50c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d101      	bne.n	800f518 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f514:	2303      	movs	r3, #3
 800f516:	e01f      	b.n	800f558 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2200      	movs	r2, #0
 800f51c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2200      	movs	r2, #0
 800f524:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2200      	movs	r2, #0
 800f52c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d003      	beq.n	800f53e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2201      	movs	r2, #1
 800f542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	79fa      	ldrb	r2, [r7, #7]
 800f54a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f54c:	68f8      	ldr	r0, [r7, #12]
 800f54e:	f001 fe23 	bl	8011198 <USBD_LL_Init>
 800f552:	4603      	mov	r3, r0
 800f554:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f556:	7dfb      	ldrb	r3, [r7, #23]
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3718      	adds	r7, #24
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f56a:	2300      	movs	r3, #0
 800f56c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d101      	bne.n	800f578 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f574:	2303      	movs	r3, #3
 800f576:	e025      	b.n	800f5c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	683a      	ldr	r2, [r7, #0]
 800f57c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	32ae      	adds	r2, #174	; 0xae
 800f58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f590:	2b00      	cmp	r3, #0
 800f592:	d00f      	beq.n	800f5b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	32ae      	adds	r2, #174	; 0xae
 800f59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a4:	f107 020e 	add.w	r2, r7, #14
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	4798      	blx	r3
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f5ba:	1c5a      	adds	r2, r3, #1
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3710      	adds	r7, #16
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f001 fe2b 	bl	8011230 <USBD_LL_Start>
 800f5da:	4603      	mov	r3, r0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3708      	adds	r7, #8
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f5ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	370c      	adds	r7, #12
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr

0800f5fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b084      	sub	sp, #16
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
 800f602:	460b      	mov	r3, r1
 800f604:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f606:	2300      	movs	r3, #0
 800f608:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f610:	2b00      	cmp	r3, #0
 800f612:	d009      	beq.n	800f628 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	78fa      	ldrb	r2, [r7, #3]
 800f61e:	4611      	mov	r1, r2
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	4798      	blx	r3
 800f624:	4603      	mov	r3, r0
 800f626:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f628:	7bfb      	ldrb	r3, [r7, #15]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b084      	sub	sp, #16
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	460b      	mov	r3, r1
 800f63c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f63e:	2300      	movs	r3, #0
 800f640:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	78fa      	ldrb	r2, [r7, #3]
 800f64c:	4611      	mov	r1, r2
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	4798      	blx	r3
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d001      	beq.n	800f65c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f658:	2303      	movs	r3, #3
 800f65a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3710      	adds	r7, #16
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}

0800f666 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f666:	b580      	push	{r7, lr}
 800f668:	b084      	sub	sp, #16
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
 800f66e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f676:	6839      	ldr	r1, [r7, #0]
 800f678:	4618      	mov	r0, r3
 800f67a:	f001 f908 	bl	801088e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2201      	movs	r2, #1
 800f682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f68c:	461a      	mov	r2, r3
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f69a:	f003 031f 	and.w	r3, r3, #31
 800f69e:	2b02      	cmp	r3, #2
 800f6a0:	d01a      	beq.n	800f6d8 <USBD_LL_SetupStage+0x72>
 800f6a2:	2b02      	cmp	r3, #2
 800f6a4:	d822      	bhi.n	800f6ec <USBD_LL_SetupStage+0x86>
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d002      	beq.n	800f6b0 <USBD_LL_SetupStage+0x4a>
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	d00a      	beq.n	800f6c4 <USBD_LL_SetupStage+0x5e>
 800f6ae:	e01d      	b.n	800f6ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f000 fb5f 	bl	800fd7c <USBD_StdDevReq>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	73fb      	strb	r3, [r7, #15]
      break;
 800f6c2:	e020      	b.n	800f706 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 fbc7 	bl	800fe60 <USBD_StdItfReq>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	73fb      	strb	r3, [r7, #15]
      break;
 800f6d6:	e016      	b.n	800f706 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f6de:	4619      	mov	r1, r3
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 fc29 	bl	800ff38 <USBD_StdEPReq>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	73fb      	strb	r3, [r7, #15]
      break;
 800f6ea:	e00c      	b.n	800f706 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f6f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f001 fdf8 	bl	80112f0 <USBD_LL_StallEP>
 800f700:	4603      	mov	r3, r0
 800f702:	73fb      	strb	r3, [r7, #15]
      break;
 800f704:	bf00      	nop
  }

  return ret;
 800f706:	7bfb      	ldrb	r3, [r7, #15]
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3710      	adds	r7, #16
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af00      	add	r7, sp, #0
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	460b      	mov	r3, r1
 800f71a:	607a      	str	r2, [r7, #4]
 800f71c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f71e:	2300      	movs	r3, #0
 800f720:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f722:	7afb      	ldrb	r3, [r7, #11]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d16e      	bne.n	800f806 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f72e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f736:	2b03      	cmp	r3, #3
 800f738:	f040 8098 	bne.w	800f86c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	689a      	ldr	r2, [r3, #8]
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	429a      	cmp	r2, r3
 800f746:	d913      	bls.n	800f770 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	689a      	ldr	r2, [r3, #8]
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	68db      	ldr	r3, [r3, #12]
 800f750:	1ad2      	subs	r2, r2, r3
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	68da      	ldr	r2, [r3, #12]
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	689b      	ldr	r3, [r3, #8]
 800f75e:	4293      	cmp	r3, r2
 800f760:	bf28      	it	cs
 800f762:	4613      	movcs	r3, r2
 800f764:	461a      	mov	r2, r3
 800f766:	6879      	ldr	r1, [r7, #4]
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	f001 f984 	bl	8010a76 <USBD_CtlContinueRx>
 800f76e:	e07d      	b.n	800f86c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f776:	f003 031f 	and.w	r3, r3, #31
 800f77a:	2b02      	cmp	r3, #2
 800f77c:	d014      	beq.n	800f7a8 <USBD_LL_DataOutStage+0x98>
 800f77e:	2b02      	cmp	r3, #2
 800f780:	d81d      	bhi.n	800f7be <USBD_LL_DataOutStage+0xae>
 800f782:	2b00      	cmp	r3, #0
 800f784:	d002      	beq.n	800f78c <USBD_LL_DataOutStage+0x7c>
 800f786:	2b01      	cmp	r3, #1
 800f788:	d003      	beq.n	800f792 <USBD_LL_DataOutStage+0x82>
 800f78a:	e018      	b.n	800f7be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f78c:	2300      	movs	r3, #0
 800f78e:	75bb      	strb	r3, [r7, #22]
            break;
 800f790:	e018      	b.n	800f7c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	4619      	mov	r1, r3
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f000 fa5e 	bl	800fc5e <USBD_CoreFindIF>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	75bb      	strb	r3, [r7, #22]
            break;
 800f7a6:	e00d      	b.n	800f7c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	f000 fa60 	bl	800fc78 <USBD_CoreFindEP>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	75bb      	strb	r3, [r7, #22]
            break;
 800f7bc:	e002      	b.n	800f7c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	75bb      	strb	r3, [r7, #22]
            break;
 800f7c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f7c4:	7dbb      	ldrb	r3, [r7, #22]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d119      	bne.n	800f7fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	2b03      	cmp	r3, #3
 800f7d4:	d113      	bne.n	800f7fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f7d6:	7dba      	ldrb	r2, [r7, #22]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	32ae      	adds	r2, #174	; 0xae
 800f7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d00b      	beq.n	800f7fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f7e6:	7dba      	ldrb	r2, [r7, #22]
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f7ee:	7dba      	ldrb	r2, [r7, #22]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	32ae      	adds	r2, #174	; 0xae
 800f7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f8:	691b      	ldr	r3, [r3, #16]
 800f7fa:	68f8      	ldr	r0, [r7, #12]
 800f7fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f7fe:	68f8      	ldr	r0, [r7, #12]
 800f800:	f001 f94a 	bl	8010a98 <USBD_CtlSendStatus>
 800f804:	e032      	b.n	800f86c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f806:	7afb      	ldrb	r3, [r7, #11]
 800f808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	4619      	mov	r1, r3
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f000 fa31 	bl	800fc78 <USBD_CoreFindEP>
 800f816:	4603      	mov	r3, r0
 800f818:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f81a:	7dbb      	ldrb	r3, [r7, #22]
 800f81c:	2bff      	cmp	r3, #255	; 0xff
 800f81e:	d025      	beq.n	800f86c <USBD_LL_DataOutStage+0x15c>
 800f820:	7dbb      	ldrb	r3, [r7, #22]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d122      	bne.n	800f86c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f82c:	b2db      	uxtb	r3, r3
 800f82e:	2b03      	cmp	r3, #3
 800f830:	d117      	bne.n	800f862 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f832:	7dba      	ldrb	r2, [r7, #22]
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	32ae      	adds	r2, #174	; 0xae
 800f838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f83c:	699b      	ldr	r3, [r3, #24]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00f      	beq.n	800f862 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f842:	7dba      	ldrb	r2, [r7, #22]
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f84a:	7dba      	ldrb	r2, [r7, #22]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	32ae      	adds	r2, #174	; 0xae
 800f850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f854:	699b      	ldr	r3, [r3, #24]
 800f856:	7afa      	ldrb	r2, [r7, #11]
 800f858:	4611      	mov	r1, r2
 800f85a:	68f8      	ldr	r0, [r7, #12]
 800f85c:	4798      	blx	r3
 800f85e:	4603      	mov	r3, r0
 800f860:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f862:	7dfb      	ldrb	r3, [r7, #23]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d001      	beq.n	800f86c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f868:	7dfb      	ldrb	r3, [r7, #23]
 800f86a:	e000      	b.n	800f86e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3718      	adds	r7, #24
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	b086      	sub	sp, #24
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	60f8      	str	r0, [r7, #12]
 800f87e:	460b      	mov	r3, r1
 800f880:	607a      	str	r2, [r7, #4]
 800f882:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f884:	7afb      	ldrb	r3, [r7, #11]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d16f      	bne.n	800f96a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	3314      	adds	r3, #20
 800f88e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f896:	2b02      	cmp	r3, #2
 800f898:	d15a      	bne.n	800f950 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	689a      	ldr	r2, [r3, #8]
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d914      	bls.n	800f8d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	689a      	ldr	r2, [r3, #8]
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	1ad2      	subs	r2, r2, r3
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	6879      	ldr	r1, [r7, #4]
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	f001 f8ac 	bl	8010a1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	68f8      	ldr	r0, [r7, #12]
 800f8ca:	f001 fdbb 	bl	8011444 <USBD_LL_PrepareReceive>
 800f8ce:	e03f      	b.n	800f950 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	68da      	ldr	r2, [r3, #12]
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d11c      	bne.n	800f916 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	685a      	ldr	r2, [r3, #4]
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d316      	bcc.n	800f916 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	685a      	ldr	r2, [r3, #4]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d20f      	bcs.n	800f916 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f001 f88d 	bl	8010a1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2200      	movs	r2, #0
 800f904:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f908:	2300      	movs	r3, #0
 800f90a:	2200      	movs	r2, #0
 800f90c:	2100      	movs	r1, #0
 800f90e:	68f8      	ldr	r0, [r7, #12]
 800f910:	f001 fd98 	bl	8011444 <USBD_LL_PrepareReceive>
 800f914:	e01c      	b.n	800f950 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	2b03      	cmp	r3, #3
 800f920:	d10f      	bne.n	800f942 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d009      	beq.n	800f942 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2200      	movs	r2, #0
 800f932:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	68f8      	ldr	r0, [r7, #12]
 800f940:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f942:	2180      	movs	r1, #128	; 0x80
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f001 fcd3 	bl	80112f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f94a:	68f8      	ldr	r0, [r7, #12]
 800f94c:	f001 f8b7 	bl	8010abe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d03a      	beq.n	800f9d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f7ff fe42 	bl	800f5e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2200      	movs	r2, #0
 800f964:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f968:	e032      	b.n	800f9d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f96a:	7afb      	ldrb	r3, [r7, #11]
 800f96c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f970:	b2db      	uxtb	r3, r3
 800f972:	4619      	mov	r1, r3
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f000 f97f 	bl	800fc78 <USBD_CoreFindEP>
 800f97a:	4603      	mov	r3, r0
 800f97c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f97e:	7dfb      	ldrb	r3, [r7, #23]
 800f980:	2bff      	cmp	r3, #255	; 0xff
 800f982:	d025      	beq.n	800f9d0 <USBD_LL_DataInStage+0x15a>
 800f984:	7dfb      	ldrb	r3, [r7, #23]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d122      	bne.n	800f9d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f990:	b2db      	uxtb	r3, r3
 800f992:	2b03      	cmp	r3, #3
 800f994:	d11c      	bne.n	800f9d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f996:	7dfa      	ldrb	r2, [r7, #23]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	32ae      	adds	r2, #174	; 0xae
 800f99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a0:	695b      	ldr	r3, [r3, #20]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d014      	beq.n	800f9d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f9a6:	7dfa      	ldrb	r2, [r7, #23]
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f9ae:	7dfa      	ldrb	r2, [r7, #23]
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	32ae      	adds	r2, #174	; 0xae
 800f9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9b8:	695b      	ldr	r3, [r3, #20]
 800f9ba:	7afa      	ldrb	r2, [r7, #11]
 800f9bc:	4611      	mov	r1, r2
 800f9be:	68f8      	ldr	r0, [r7, #12]
 800f9c0:	4798      	blx	r3
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f9c6:	7dbb      	ldrb	r3, [r7, #22]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d001      	beq.n	800f9d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f9cc:	7dbb      	ldrb	r3, [r7, #22]
 800f9ce:	e000      	b.n	800f9d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f9d0:	2300      	movs	r3, #0
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3718      	adds	r7, #24
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}

0800f9da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f9da:	b580      	push	{r7, lr}
 800f9dc:	b084      	sub	sp, #16
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d014      	beq.n	800fa40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d00e      	beq.n	800fa40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	6852      	ldr	r2, [r2, #4]
 800fa2e:	b2d2      	uxtb	r2, r2
 800fa30:	4611      	mov	r1, r2
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	4798      	blx	r3
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d001      	beq.n	800fa40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fa3c:	2303      	movs	r3, #3
 800fa3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa40:	2340      	movs	r3, #64	; 0x40
 800fa42:	2200      	movs	r2, #0
 800fa44:	2100      	movs	r1, #0
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f001 fc0d 	bl	8011266 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2240      	movs	r2, #64	; 0x40
 800fa58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa5c:	2340      	movs	r3, #64	; 0x40
 800fa5e:	2200      	movs	r2, #0
 800fa60:	2180      	movs	r1, #128	; 0x80
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f001 fbff 	bl	8011266 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2240      	movs	r2, #64	; 0x40
 800fa72:	621a      	str	r2, [r3, #32]

  return ret;
 800fa74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fa7e:	b480      	push	{r7}
 800fa80:	b083      	sub	sp, #12
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
 800fa86:	460b      	mov	r3, r1
 800fa88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	78fa      	ldrb	r2, [r7, #3]
 800fa8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fa90:	2300      	movs	r3, #0
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	370c      	adds	r7, #12
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr

0800fa9e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fa9e:	b480      	push	{r7}
 800faa0:	b083      	sub	sp, #12
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faac:	b2da      	uxtb	r2, r3
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2204      	movs	r2, #4
 800fab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fabc:	2300      	movs	r3, #0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	370c      	adds	r7, #12
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr

0800faca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800faca:	b480      	push	{r7}
 800facc:	b083      	sub	sp, #12
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	2b04      	cmp	r3, #4
 800fadc:	d106      	bne.n	800faec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fae4:	b2da      	uxtb	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	370c      	adds	r7, #12
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr

0800fafa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b082      	sub	sp, #8
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	2b03      	cmp	r3, #3
 800fb0c:	d110      	bne.n	800fb30 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d00b      	beq.n	800fb30 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb1e:	69db      	ldr	r3, [r3, #28]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d005      	beq.n	800fb30 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb2a:	69db      	ldr	r3, [r3, #28]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fb30:	2300      	movs	r3, #0
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3708      	adds	r7, #8
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}

0800fb3a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fb3a:	b580      	push	{r7, lr}
 800fb3c:	b082      	sub	sp, #8
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	6078      	str	r0, [r7, #4]
 800fb42:	460b      	mov	r3, r1
 800fb44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	32ae      	adds	r2, #174	; 0xae
 800fb50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d101      	bne.n	800fb5c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fb58:	2303      	movs	r3, #3
 800fb5a:	e01c      	b.n	800fb96 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	2b03      	cmp	r3, #3
 800fb66:	d115      	bne.n	800fb94 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	32ae      	adds	r2, #174	; 0xae
 800fb72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb76:	6a1b      	ldr	r3, [r3, #32]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00b      	beq.n	800fb94 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	32ae      	adds	r2, #174	; 0xae
 800fb86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb8a:	6a1b      	ldr	r3, [r3, #32]
 800fb8c:	78fa      	ldrb	r2, [r7, #3]
 800fb8e:	4611      	mov	r1, r2
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fb94:	2300      	movs	r3, #0
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3708      	adds	r7, #8
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}

0800fb9e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fb9e:	b580      	push	{r7, lr}
 800fba0:	b082      	sub	sp, #8
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	6078      	str	r0, [r7, #4]
 800fba6:	460b      	mov	r3, r1
 800fba8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	32ae      	adds	r2, #174	; 0xae
 800fbb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d101      	bne.n	800fbc0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fbbc:	2303      	movs	r3, #3
 800fbbe:	e01c      	b.n	800fbfa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	2b03      	cmp	r3, #3
 800fbca:	d115      	bne.n	800fbf8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	32ae      	adds	r2, #174	; 0xae
 800fbd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d00b      	beq.n	800fbf8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	32ae      	adds	r2, #174	; 0xae
 800fbea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf0:	78fa      	ldrb	r2, [r7, #3]
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fc02:	b480      	push	{r7}
 800fc04:	b083      	sub	sp, #12
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b084      	sub	sp, #16
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2201      	movs	r2, #1
 800fc28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d00e      	beq.n	800fc54 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	687a      	ldr	r2, [r7, #4]
 800fc40:	6852      	ldr	r2, [r2, #4]
 800fc42:	b2d2      	uxtb	r2, r2
 800fc44:	4611      	mov	r1, r2
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	4798      	blx	r3
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d001      	beq.n	800fc54 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800fc50:	2303      	movs	r3, #3
 800fc52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3710      	adds	r7, #16
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}

0800fc5e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fc5e:	b480      	push	{r7}
 800fc60:	b083      	sub	sp, #12
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
 800fc66:	460b      	mov	r3, r1
 800fc68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fc6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	370c      	adds	r7, #12
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr

0800fc78 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	460b      	mov	r3, r1
 800fc82:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fc84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	370c      	adds	r7, #12
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr

0800fc92 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b086      	sub	sp, #24
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fca6:	2300      	movs	r3, #0
 800fca8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	885b      	ldrh	r3, [r3, #2]
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d920      	bls.n	800fcfc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800fcc2:	e013      	b.n	800fcec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800fcc4:	f107 030a 	add.w	r3, r7, #10
 800fcc8:	4619      	mov	r1, r3
 800fcca:	6978      	ldr	r0, [r7, #20]
 800fccc:	f000 f81b 	bl	800fd06 <USBD_GetNextDesc>
 800fcd0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	785b      	ldrb	r3, [r3, #1]
 800fcd6:	2b05      	cmp	r3, #5
 800fcd8:	d108      	bne.n	800fcec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	789b      	ldrb	r3, [r3, #2]
 800fce2:	78fa      	ldrb	r2, [r7, #3]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d008      	beq.n	800fcfa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800fce8:	2300      	movs	r3, #0
 800fcea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	885b      	ldrh	r3, [r3, #2]
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	897b      	ldrh	r3, [r7, #10]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d8e5      	bhi.n	800fcc4 <USBD_GetEpDesc+0x32>
 800fcf8:	e000      	b.n	800fcfc <USBD_GetEpDesc+0x6a>
          break;
 800fcfa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800fcfc:	693b      	ldr	r3, [r7, #16]
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3718      	adds	r7, #24
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}

0800fd06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800fd06:	b480      	push	{r7}
 800fd08:	b085      	sub	sp, #20
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	6078      	str	r0, [r7, #4]
 800fd0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	881a      	ldrh	r2, [r3, #0]
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	4413      	add	r3, r2
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	4413      	add	r3, r2
 800fd30:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fd32:	68fb      	ldr	r3, [r7, #12]
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3714      	adds	r7, #20
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr

0800fd40 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b087      	sub	sp, #28
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	3301      	adds	r3, #1
 800fd56:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fd5e:	8a3b      	ldrh	r3, [r7, #16]
 800fd60:	021b      	lsls	r3, r3, #8
 800fd62:	b21a      	sxth	r2, r3
 800fd64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	b21b      	sxth	r3, r3
 800fd6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fd6e:	89fb      	ldrh	r3, [r7, #14]
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	371c      	adds	r7, #28
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd86:	2300      	movs	r3, #0
 800fd88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd92:	2b40      	cmp	r3, #64	; 0x40
 800fd94:	d005      	beq.n	800fda2 <USBD_StdDevReq+0x26>
 800fd96:	2b40      	cmp	r3, #64	; 0x40
 800fd98:	d857      	bhi.n	800fe4a <USBD_StdDevReq+0xce>
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00f      	beq.n	800fdbe <USBD_StdDevReq+0x42>
 800fd9e:	2b20      	cmp	r3, #32
 800fda0:	d153      	bne.n	800fe4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	32ae      	adds	r2, #174	; 0xae
 800fdac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdb0:	689b      	ldr	r3, [r3, #8]
 800fdb2:	6839      	ldr	r1, [r7, #0]
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	4798      	blx	r3
 800fdb8:	4603      	mov	r3, r0
 800fdba:	73fb      	strb	r3, [r7, #15]
      break;
 800fdbc:	e04a      	b.n	800fe54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	785b      	ldrb	r3, [r3, #1]
 800fdc2:	2b09      	cmp	r3, #9
 800fdc4:	d83b      	bhi.n	800fe3e <USBD_StdDevReq+0xc2>
 800fdc6:	a201      	add	r2, pc, #4	; (adr r2, 800fdcc <USBD_StdDevReq+0x50>)
 800fdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdcc:	0800fe21 	.word	0x0800fe21
 800fdd0:	0800fe35 	.word	0x0800fe35
 800fdd4:	0800fe3f 	.word	0x0800fe3f
 800fdd8:	0800fe2b 	.word	0x0800fe2b
 800fddc:	0800fe3f 	.word	0x0800fe3f
 800fde0:	0800fdff 	.word	0x0800fdff
 800fde4:	0800fdf5 	.word	0x0800fdf5
 800fde8:	0800fe3f 	.word	0x0800fe3f
 800fdec:	0800fe17 	.word	0x0800fe17
 800fdf0:	0800fe09 	.word	0x0800fe09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fdf4:	6839      	ldr	r1, [r7, #0]
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 fa3c 	bl	8010274 <USBD_GetDescriptor>
          break;
 800fdfc:	e024      	b.n	800fe48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fdfe:	6839      	ldr	r1, [r7, #0]
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 fba1 	bl	8010548 <USBD_SetAddress>
          break;
 800fe06:	e01f      	b.n	800fe48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fe08:	6839      	ldr	r1, [r7, #0]
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f000 fbe0 	bl	80105d0 <USBD_SetConfig>
 800fe10:	4603      	mov	r3, r0
 800fe12:	73fb      	strb	r3, [r7, #15]
          break;
 800fe14:	e018      	b.n	800fe48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fe16:	6839      	ldr	r1, [r7, #0]
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f000 fc83 	bl	8010724 <USBD_GetConfig>
          break;
 800fe1e:	e013      	b.n	800fe48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fe20:	6839      	ldr	r1, [r7, #0]
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 fcb4 	bl	8010790 <USBD_GetStatus>
          break;
 800fe28:	e00e      	b.n	800fe48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fe2a:	6839      	ldr	r1, [r7, #0]
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 fce3 	bl	80107f8 <USBD_SetFeature>
          break;
 800fe32:	e009      	b.n	800fe48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fe34:	6839      	ldr	r1, [r7, #0]
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 fd07 	bl	801084a <USBD_ClrFeature>
          break;
 800fe3c:	e004      	b.n	800fe48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800fe3e:	6839      	ldr	r1, [r7, #0]
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 fd5e 	bl	8010902 <USBD_CtlError>
          break;
 800fe46:	bf00      	nop
      }
      break;
 800fe48:	e004      	b.n	800fe54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800fe4a:	6839      	ldr	r1, [r7, #0]
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 fd58 	bl	8010902 <USBD_CtlError>
      break;
 800fe52:	bf00      	nop
  }

  return ret;
 800fe54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop

0800fe60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe76:	2b40      	cmp	r3, #64	; 0x40
 800fe78:	d005      	beq.n	800fe86 <USBD_StdItfReq+0x26>
 800fe7a:	2b40      	cmp	r3, #64	; 0x40
 800fe7c:	d852      	bhi.n	800ff24 <USBD_StdItfReq+0xc4>
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d001      	beq.n	800fe86 <USBD_StdItfReq+0x26>
 800fe82:	2b20      	cmp	r3, #32
 800fe84:	d14e      	bne.n	800ff24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	3b01      	subs	r3, #1
 800fe90:	2b02      	cmp	r3, #2
 800fe92:	d840      	bhi.n	800ff16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	889b      	ldrh	r3, [r3, #4]
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d836      	bhi.n	800ff0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	889b      	ldrh	r3, [r3, #4]
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	4619      	mov	r1, r3
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f7ff fed9 	bl	800fc5e <USBD_CoreFindIF>
 800feac:	4603      	mov	r3, r0
 800feae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800feb0:	7bbb      	ldrb	r3, [r7, #14]
 800feb2:	2bff      	cmp	r3, #255	; 0xff
 800feb4:	d01d      	beq.n	800fef2 <USBD_StdItfReq+0x92>
 800feb6:	7bbb      	ldrb	r3, [r7, #14]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d11a      	bne.n	800fef2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800febc:	7bba      	ldrb	r2, [r7, #14]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	32ae      	adds	r2, #174	; 0xae
 800fec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fec6:	689b      	ldr	r3, [r3, #8]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d00f      	beq.n	800feec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fecc:	7bba      	ldrb	r2, [r7, #14]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fed4:	7bba      	ldrb	r2, [r7, #14]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	32ae      	adds	r2, #174	; 0xae
 800feda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fede:	689b      	ldr	r3, [r3, #8]
 800fee0:	6839      	ldr	r1, [r7, #0]
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	4798      	blx	r3
 800fee6:	4603      	mov	r3, r0
 800fee8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800feea:	e004      	b.n	800fef6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800feec:	2303      	movs	r3, #3
 800feee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fef0:	e001      	b.n	800fef6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800fef2:	2303      	movs	r3, #3
 800fef4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	88db      	ldrh	r3, [r3, #6]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d110      	bne.n	800ff20 <USBD_StdItfReq+0xc0>
 800fefe:	7bfb      	ldrb	r3, [r7, #15]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d10d      	bne.n	800ff20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f000 fdc7 	bl	8010a98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ff0a:	e009      	b.n	800ff20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ff0c:	6839      	ldr	r1, [r7, #0]
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 fcf7 	bl	8010902 <USBD_CtlError>
          break;
 800ff14:	e004      	b.n	800ff20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ff16:	6839      	ldr	r1, [r7, #0]
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 fcf2 	bl	8010902 <USBD_CtlError>
          break;
 800ff1e:	e000      	b.n	800ff22 <USBD_StdItfReq+0xc2>
          break;
 800ff20:	bf00      	nop
      }
      break;
 800ff22:	e004      	b.n	800ff2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ff24:	6839      	ldr	r1, [r7, #0]
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 fceb 	bl	8010902 <USBD_CtlError>
      break;
 800ff2c:	bf00      	nop
  }

  return ret;
 800ff2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3710      	adds	r7, #16
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ff42:	2300      	movs	r3, #0
 800ff44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	889b      	ldrh	r3, [r3, #4]
 800ff4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff54:	2b40      	cmp	r3, #64	; 0x40
 800ff56:	d007      	beq.n	800ff68 <USBD_StdEPReq+0x30>
 800ff58:	2b40      	cmp	r3, #64	; 0x40
 800ff5a:	f200 817f 	bhi.w	801025c <USBD_StdEPReq+0x324>
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d02a      	beq.n	800ffb8 <USBD_StdEPReq+0x80>
 800ff62:	2b20      	cmp	r3, #32
 800ff64:	f040 817a 	bne.w	801025c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ff68:	7bbb      	ldrb	r3, [r7, #14]
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f7ff fe83 	bl	800fc78 <USBD_CoreFindEP>
 800ff72:	4603      	mov	r3, r0
 800ff74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ff76:	7b7b      	ldrb	r3, [r7, #13]
 800ff78:	2bff      	cmp	r3, #255	; 0xff
 800ff7a:	f000 8174 	beq.w	8010266 <USBD_StdEPReq+0x32e>
 800ff7e:	7b7b      	ldrb	r3, [r7, #13]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f040 8170 	bne.w	8010266 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ff86:	7b7a      	ldrb	r2, [r7, #13]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ff8e:	7b7a      	ldrb	r2, [r7, #13]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	32ae      	adds	r2, #174	; 0xae
 800ff94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff98:	689b      	ldr	r3, [r3, #8]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f000 8163 	beq.w	8010266 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ffa0:	7b7a      	ldrb	r2, [r7, #13]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	32ae      	adds	r2, #174	; 0xae
 800ffa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffaa:	689b      	ldr	r3, [r3, #8]
 800ffac:	6839      	ldr	r1, [r7, #0]
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	4798      	blx	r3
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ffb6:	e156      	b.n	8010266 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	785b      	ldrb	r3, [r3, #1]
 800ffbc:	2b03      	cmp	r3, #3
 800ffbe:	d008      	beq.n	800ffd2 <USBD_StdEPReq+0x9a>
 800ffc0:	2b03      	cmp	r3, #3
 800ffc2:	f300 8145 	bgt.w	8010250 <USBD_StdEPReq+0x318>
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f000 809b 	beq.w	8010102 <USBD_StdEPReq+0x1ca>
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d03c      	beq.n	801004a <USBD_StdEPReq+0x112>
 800ffd0:	e13e      	b.n	8010250 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	2b02      	cmp	r3, #2
 800ffdc:	d002      	beq.n	800ffe4 <USBD_StdEPReq+0xac>
 800ffde:	2b03      	cmp	r3, #3
 800ffe0:	d016      	beq.n	8010010 <USBD_StdEPReq+0xd8>
 800ffe2:	e02c      	b.n	801003e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ffe4:	7bbb      	ldrb	r3, [r7, #14]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d00d      	beq.n	8010006 <USBD_StdEPReq+0xce>
 800ffea:	7bbb      	ldrb	r3, [r7, #14]
 800ffec:	2b80      	cmp	r3, #128	; 0x80
 800ffee:	d00a      	beq.n	8010006 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fff0:	7bbb      	ldrb	r3, [r7, #14]
 800fff2:	4619      	mov	r1, r3
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f001 f97b 	bl	80112f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fffa:	2180      	movs	r1, #128	; 0x80
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f001 f977 	bl	80112f0 <USBD_LL_StallEP>
 8010002:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010004:	e020      	b.n	8010048 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010006:	6839      	ldr	r1, [r7, #0]
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 fc7a 	bl	8010902 <USBD_CtlError>
              break;
 801000e:	e01b      	b.n	8010048 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	885b      	ldrh	r3, [r3, #2]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d10e      	bne.n	8010036 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010018:	7bbb      	ldrb	r3, [r7, #14]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00b      	beq.n	8010036 <USBD_StdEPReq+0xfe>
 801001e:	7bbb      	ldrb	r3, [r7, #14]
 8010020:	2b80      	cmp	r3, #128	; 0x80
 8010022:	d008      	beq.n	8010036 <USBD_StdEPReq+0xfe>
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	88db      	ldrh	r3, [r3, #6]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d104      	bne.n	8010036 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801002c:	7bbb      	ldrb	r3, [r7, #14]
 801002e:	4619      	mov	r1, r3
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f001 f95d 	bl	80112f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f000 fd2e 	bl	8010a98 <USBD_CtlSendStatus>

              break;
 801003c:	e004      	b.n	8010048 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801003e:	6839      	ldr	r1, [r7, #0]
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 fc5e 	bl	8010902 <USBD_CtlError>
              break;
 8010046:	bf00      	nop
          }
          break;
 8010048:	e107      	b.n	801025a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010050:	b2db      	uxtb	r3, r3
 8010052:	2b02      	cmp	r3, #2
 8010054:	d002      	beq.n	801005c <USBD_StdEPReq+0x124>
 8010056:	2b03      	cmp	r3, #3
 8010058:	d016      	beq.n	8010088 <USBD_StdEPReq+0x150>
 801005a:	e04b      	b.n	80100f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801005c:	7bbb      	ldrb	r3, [r7, #14]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00d      	beq.n	801007e <USBD_StdEPReq+0x146>
 8010062:	7bbb      	ldrb	r3, [r7, #14]
 8010064:	2b80      	cmp	r3, #128	; 0x80
 8010066:	d00a      	beq.n	801007e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010068:	7bbb      	ldrb	r3, [r7, #14]
 801006a:	4619      	mov	r1, r3
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f001 f93f 	bl	80112f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010072:	2180      	movs	r1, #128	; 0x80
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f001 f93b 	bl	80112f0 <USBD_LL_StallEP>
 801007a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801007c:	e040      	b.n	8010100 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801007e:	6839      	ldr	r1, [r7, #0]
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 fc3e 	bl	8010902 <USBD_CtlError>
              break;
 8010086:	e03b      	b.n	8010100 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	885b      	ldrh	r3, [r3, #2]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d136      	bne.n	80100fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010090:	7bbb      	ldrb	r3, [r7, #14]
 8010092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010096:	2b00      	cmp	r3, #0
 8010098:	d004      	beq.n	80100a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801009a:	7bbb      	ldrb	r3, [r7, #14]
 801009c:	4619      	mov	r1, r3
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f001 f945 	bl	801132e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 fcf7 	bl	8010a98 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80100aa:	7bbb      	ldrb	r3, [r7, #14]
 80100ac:	4619      	mov	r1, r3
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f7ff fde2 	bl	800fc78 <USBD_CoreFindEP>
 80100b4:	4603      	mov	r3, r0
 80100b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80100b8:	7b7b      	ldrb	r3, [r7, #13]
 80100ba:	2bff      	cmp	r3, #255	; 0xff
 80100bc:	d01f      	beq.n	80100fe <USBD_StdEPReq+0x1c6>
 80100be:	7b7b      	ldrb	r3, [r7, #13]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d11c      	bne.n	80100fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80100c4:	7b7a      	ldrb	r2, [r7, #13]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80100cc:	7b7a      	ldrb	r2, [r7, #13]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	32ae      	adds	r2, #174	; 0xae
 80100d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d010      	beq.n	80100fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80100dc:	7b7a      	ldrb	r2, [r7, #13]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	32ae      	adds	r2, #174	; 0xae
 80100e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e6:	689b      	ldr	r3, [r3, #8]
 80100e8:	6839      	ldr	r1, [r7, #0]
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	4798      	blx	r3
 80100ee:	4603      	mov	r3, r0
 80100f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80100f2:	e004      	b.n	80100fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80100f4:	6839      	ldr	r1, [r7, #0]
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 fc03 	bl	8010902 <USBD_CtlError>
              break;
 80100fc:	e000      	b.n	8010100 <USBD_StdEPReq+0x1c8>
              break;
 80100fe:	bf00      	nop
          }
          break;
 8010100:	e0ab      	b.n	801025a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010108:	b2db      	uxtb	r3, r3
 801010a:	2b02      	cmp	r3, #2
 801010c:	d002      	beq.n	8010114 <USBD_StdEPReq+0x1dc>
 801010e:	2b03      	cmp	r3, #3
 8010110:	d032      	beq.n	8010178 <USBD_StdEPReq+0x240>
 8010112:	e097      	b.n	8010244 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010114:	7bbb      	ldrb	r3, [r7, #14]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d007      	beq.n	801012a <USBD_StdEPReq+0x1f2>
 801011a:	7bbb      	ldrb	r3, [r7, #14]
 801011c:	2b80      	cmp	r3, #128	; 0x80
 801011e:	d004      	beq.n	801012a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010120:	6839      	ldr	r1, [r7, #0]
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 fbed 	bl	8010902 <USBD_CtlError>
                break;
 8010128:	e091      	b.n	801024e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801012a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801012e:	2b00      	cmp	r3, #0
 8010130:	da0b      	bge.n	801014a <USBD_StdEPReq+0x212>
 8010132:	7bbb      	ldrb	r3, [r7, #14]
 8010134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010138:	4613      	mov	r3, r2
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	4413      	add	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	3310      	adds	r3, #16
 8010142:	687a      	ldr	r2, [r7, #4]
 8010144:	4413      	add	r3, r2
 8010146:	3304      	adds	r3, #4
 8010148:	e00b      	b.n	8010162 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801014a:	7bbb      	ldrb	r3, [r7, #14]
 801014c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010150:	4613      	mov	r3, r2
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	4413      	add	r3, r2
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	4413      	add	r3, r2
 8010160:	3304      	adds	r3, #4
 8010162:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	2200      	movs	r2, #0
 8010168:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	2202      	movs	r2, #2
 801016e:	4619      	mov	r1, r3
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 fc37 	bl	80109e4 <USBD_CtlSendData>
              break;
 8010176:	e06a      	b.n	801024e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801017c:	2b00      	cmp	r3, #0
 801017e:	da11      	bge.n	80101a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010180:	7bbb      	ldrb	r3, [r7, #14]
 8010182:	f003 020f 	and.w	r2, r3, #15
 8010186:	6879      	ldr	r1, [r7, #4]
 8010188:	4613      	mov	r3, r2
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	4413      	add	r3, r2
 801018e:	009b      	lsls	r3, r3, #2
 8010190:	440b      	add	r3, r1
 8010192:	3324      	adds	r3, #36	; 0x24
 8010194:	881b      	ldrh	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d117      	bne.n	80101ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801019a:	6839      	ldr	r1, [r7, #0]
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 fbb0 	bl	8010902 <USBD_CtlError>
                  break;
 80101a2:	e054      	b.n	801024e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80101a4:	7bbb      	ldrb	r3, [r7, #14]
 80101a6:	f003 020f 	and.w	r2, r3, #15
 80101aa:	6879      	ldr	r1, [r7, #4]
 80101ac:	4613      	mov	r3, r2
 80101ae:	009b      	lsls	r3, r3, #2
 80101b0:	4413      	add	r3, r2
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	440b      	add	r3, r1
 80101b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80101ba:	881b      	ldrh	r3, [r3, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d104      	bne.n	80101ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80101c0:	6839      	ldr	r1, [r7, #0]
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f000 fb9d 	bl	8010902 <USBD_CtlError>
                  break;
 80101c8:	e041      	b.n	801024e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80101ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	da0b      	bge.n	80101ea <USBD_StdEPReq+0x2b2>
 80101d2:	7bbb      	ldrb	r3, [r7, #14]
 80101d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80101d8:	4613      	mov	r3, r2
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	4413      	add	r3, r2
 80101de:	009b      	lsls	r3, r3, #2
 80101e0:	3310      	adds	r3, #16
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	4413      	add	r3, r2
 80101e6:	3304      	adds	r3, #4
 80101e8:	e00b      	b.n	8010202 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80101ea:	7bbb      	ldrb	r3, [r7, #14]
 80101ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80101f0:	4613      	mov	r3, r2
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	4413      	add	r3, r2
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	4413      	add	r3, r2
 8010200:	3304      	adds	r3, #4
 8010202:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010204:	7bbb      	ldrb	r3, [r7, #14]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d002      	beq.n	8010210 <USBD_StdEPReq+0x2d8>
 801020a:	7bbb      	ldrb	r3, [r7, #14]
 801020c:	2b80      	cmp	r3, #128	; 0x80
 801020e:	d103      	bne.n	8010218 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	2200      	movs	r2, #0
 8010214:	601a      	str	r2, [r3, #0]
 8010216:	e00e      	b.n	8010236 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010218:	7bbb      	ldrb	r3, [r7, #14]
 801021a:	4619      	mov	r1, r3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f001 f8a5 	bl	801136c <USBD_LL_IsStallEP>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d003      	beq.n	8010230 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	2201      	movs	r2, #1
 801022c:	601a      	str	r2, [r3, #0]
 801022e:	e002      	b.n	8010236 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	2200      	movs	r2, #0
 8010234:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	2202      	movs	r2, #2
 801023a:	4619      	mov	r1, r3
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f000 fbd1 	bl	80109e4 <USBD_CtlSendData>
              break;
 8010242:	e004      	b.n	801024e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010244:	6839      	ldr	r1, [r7, #0]
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 fb5b 	bl	8010902 <USBD_CtlError>
              break;
 801024c:	bf00      	nop
          }
          break;
 801024e:	e004      	b.n	801025a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010250:	6839      	ldr	r1, [r7, #0]
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 fb55 	bl	8010902 <USBD_CtlError>
          break;
 8010258:	bf00      	nop
      }
      break;
 801025a:	e005      	b.n	8010268 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801025c:	6839      	ldr	r1, [r7, #0]
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 fb4f 	bl	8010902 <USBD_CtlError>
      break;
 8010264:	e000      	b.n	8010268 <USBD_StdEPReq+0x330>
      break;
 8010266:	bf00      	nop
  }

  return ret;
 8010268:	7bfb      	ldrb	r3, [r7, #15]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
	...

08010274 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801027e:	2300      	movs	r3, #0
 8010280:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010282:	2300      	movs	r3, #0
 8010284:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010286:	2300      	movs	r3, #0
 8010288:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	885b      	ldrh	r3, [r3, #2]
 801028e:	0a1b      	lsrs	r3, r3, #8
 8010290:	b29b      	uxth	r3, r3
 8010292:	3b01      	subs	r3, #1
 8010294:	2b06      	cmp	r3, #6
 8010296:	f200 8128 	bhi.w	80104ea <USBD_GetDescriptor+0x276>
 801029a:	a201      	add	r2, pc, #4	; (adr r2, 80102a0 <USBD_GetDescriptor+0x2c>)
 801029c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102a0:	080102bd 	.word	0x080102bd
 80102a4:	080102d5 	.word	0x080102d5
 80102a8:	08010315 	.word	0x08010315
 80102ac:	080104eb 	.word	0x080104eb
 80102b0:	080104eb 	.word	0x080104eb
 80102b4:	0801048b 	.word	0x0801048b
 80102b8:	080104b7 	.word	0x080104b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	7c12      	ldrb	r2, [r2, #16]
 80102c8:	f107 0108 	add.w	r1, r7, #8
 80102cc:	4610      	mov	r0, r2
 80102ce:	4798      	blx	r3
 80102d0:	60f8      	str	r0, [r7, #12]
      break;
 80102d2:	e112      	b.n	80104fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	7c1b      	ldrb	r3, [r3, #16]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d10d      	bne.n	80102f8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102e4:	f107 0208 	add.w	r2, r7, #8
 80102e8:	4610      	mov	r0, r2
 80102ea:	4798      	blx	r3
 80102ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	3301      	adds	r3, #1
 80102f2:	2202      	movs	r2, #2
 80102f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80102f6:	e100      	b.n	80104fa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010300:	f107 0208 	add.w	r2, r7, #8
 8010304:	4610      	mov	r0, r2
 8010306:	4798      	blx	r3
 8010308:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	3301      	adds	r3, #1
 801030e:	2202      	movs	r2, #2
 8010310:	701a      	strb	r2, [r3, #0]
      break;
 8010312:	e0f2      	b.n	80104fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	885b      	ldrh	r3, [r3, #2]
 8010318:	b2db      	uxtb	r3, r3
 801031a:	2b05      	cmp	r3, #5
 801031c:	f200 80ac 	bhi.w	8010478 <USBD_GetDescriptor+0x204>
 8010320:	a201      	add	r2, pc, #4	; (adr r2, 8010328 <USBD_GetDescriptor+0xb4>)
 8010322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010326:	bf00      	nop
 8010328:	08010341 	.word	0x08010341
 801032c:	08010375 	.word	0x08010375
 8010330:	080103a9 	.word	0x080103a9
 8010334:	080103dd 	.word	0x080103dd
 8010338:	08010411 	.word	0x08010411
 801033c:	08010445 	.word	0x08010445
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00b      	beq.n	8010364 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	687a      	ldr	r2, [r7, #4]
 8010356:	7c12      	ldrb	r2, [r2, #16]
 8010358:	f107 0108 	add.w	r1, r7, #8
 801035c:	4610      	mov	r0, r2
 801035e:	4798      	blx	r3
 8010360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010362:	e091      	b.n	8010488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010364:	6839      	ldr	r1, [r7, #0]
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 facb 	bl	8010902 <USBD_CtlError>
            err++;
 801036c:	7afb      	ldrb	r3, [r7, #11]
 801036e:	3301      	adds	r3, #1
 8010370:	72fb      	strb	r3, [r7, #11]
          break;
 8010372:	e089      	b.n	8010488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801037a:	689b      	ldr	r3, [r3, #8]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d00b      	beq.n	8010398 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	687a      	ldr	r2, [r7, #4]
 801038a:	7c12      	ldrb	r2, [r2, #16]
 801038c:	f107 0108 	add.w	r1, r7, #8
 8010390:	4610      	mov	r0, r2
 8010392:	4798      	blx	r3
 8010394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010396:	e077      	b.n	8010488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010398:	6839      	ldr	r1, [r7, #0]
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f000 fab1 	bl	8010902 <USBD_CtlError>
            err++;
 80103a0:	7afb      	ldrb	r3, [r7, #11]
 80103a2:	3301      	adds	r3, #1
 80103a4:	72fb      	strb	r3, [r7, #11]
          break;
 80103a6:	e06f      	b.n	8010488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103ae:	68db      	ldr	r3, [r3, #12]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d00b      	beq.n	80103cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	7c12      	ldrb	r2, [r2, #16]
 80103c0:	f107 0108 	add.w	r1, r7, #8
 80103c4:	4610      	mov	r0, r2
 80103c6:	4798      	blx	r3
 80103c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103ca:	e05d      	b.n	8010488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80103cc:	6839      	ldr	r1, [r7, #0]
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 fa97 	bl	8010902 <USBD_CtlError>
            err++;
 80103d4:	7afb      	ldrb	r3, [r7, #11]
 80103d6:	3301      	adds	r3, #1
 80103d8:	72fb      	strb	r3, [r7, #11]
          break;
 80103da:	e055      	b.n	8010488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103e2:	691b      	ldr	r3, [r3, #16]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00b      	beq.n	8010400 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103ee:	691b      	ldr	r3, [r3, #16]
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	7c12      	ldrb	r2, [r2, #16]
 80103f4:	f107 0108 	add.w	r1, r7, #8
 80103f8:	4610      	mov	r0, r2
 80103fa:	4798      	blx	r3
 80103fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103fe:	e043      	b.n	8010488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010400:	6839      	ldr	r1, [r7, #0]
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 fa7d 	bl	8010902 <USBD_CtlError>
            err++;
 8010408:	7afb      	ldrb	r3, [r7, #11]
 801040a:	3301      	adds	r3, #1
 801040c:	72fb      	strb	r3, [r7, #11]
          break;
 801040e:	e03b      	b.n	8010488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010416:	695b      	ldr	r3, [r3, #20]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d00b      	beq.n	8010434 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010422:	695b      	ldr	r3, [r3, #20]
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	7c12      	ldrb	r2, [r2, #16]
 8010428:	f107 0108 	add.w	r1, r7, #8
 801042c:	4610      	mov	r0, r2
 801042e:	4798      	blx	r3
 8010430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010432:	e029      	b.n	8010488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010434:	6839      	ldr	r1, [r7, #0]
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 fa63 	bl	8010902 <USBD_CtlError>
            err++;
 801043c:	7afb      	ldrb	r3, [r7, #11]
 801043e:	3301      	adds	r3, #1
 8010440:	72fb      	strb	r3, [r7, #11]
          break;
 8010442:	e021      	b.n	8010488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801044a:	699b      	ldr	r3, [r3, #24]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00b      	beq.n	8010468 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010456:	699b      	ldr	r3, [r3, #24]
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	7c12      	ldrb	r2, [r2, #16]
 801045c:	f107 0108 	add.w	r1, r7, #8
 8010460:	4610      	mov	r0, r2
 8010462:	4798      	blx	r3
 8010464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010466:	e00f      	b.n	8010488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010468:	6839      	ldr	r1, [r7, #0]
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f000 fa49 	bl	8010902 <USBD_CtlError>
            err++;
 8010470:	7afb      	ldrb	r3, [r7, #11]
 8010472:	3301      	adds	r3, #1
 8010474:	72fb      	strb	r3, [r7, #11]
          break;
 8010476:	e007      	b.n	8010488 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010478:	6839      	ldr	r1, [r7, #0]
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 fa41 	bl	8010902 <USBD_CtlError>
          err++;
 8010480:	7afb      	ldrb	r3, [r7, #11]
 8010482:	3301      	adds	r3, #1
 8010484:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010486:	bf00      	nop
      }
      break;
 8010488:	e037      	b.n	80104fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	7c1b      	ldrb	r3, [r3, #16]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d109      	bne.n	80104a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801049a:	f107 0208 	add.w	r2, r7, #8
 801049e:	4610      	mov	r0, r2
 80104a0:	4798      	blx	r3
 80104a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80104a4:	e029      	b.n	80104fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80104a6:	6839      	ldr	r1, [r7, #0]
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 fa2a 	bl	8010902 <USBD_CtlError>
        err++;
 80104ae:	7afb      	ldrb	r3, [r7, #11]
 80104b0:	3301      	adds	r3, #1
 80104b2:	72fb      	strb	r3, [r7, #11]
      break;
 80104b4:	e021      	b.n	80104fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	7c1b      	ldrb	r3, [r3, #16]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10d      	bne.n	80104da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104c6:	f107 0208 	add.w	r2, r7, #8
 80104ca:	4610      	mov	r0, r2
 80104cc:	4798      	blx	r3
 80104ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	3301      	adds	r3, #1
 80104d4:	2207      	movs	r2, #7
 80104d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80104d8:	e00f      	b.n	80104fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80104da:	6839      	ldr	r1, [r7, #0]
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f000 fa10 	bl	8010902 <USBD_CtlError>
        err++;
 80104e2:	7afb      	ldrb	r3, [r7, #11]
 80104e4:	3301      	adds	r3, #1
 80104e6:	72fb      	strb	r3, [r7, #11]
      break;
 80104e8:	e007      	b.n	80104fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80104ea:	6839      	ldr	r1, [r7, #0]
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 fa08 	bl	8010902 <USBD_CtlError>
      err++;
 80104f2:	7afb      	ldrb	r3, [r7, #11]
 80104f4:	3301      	adds	r3, #1
 80104f6:	72fb      	strb	r3, [r7, #11]
      break;
 80104f8:	bf00      	nop
  }

  if (err != 0U)
 80104fa:	7afb      	ldrb	r3, [r7, #11]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d11e      	bne.n	801053e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	88db      	ldrh	r3, [r3, #6]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d016      	beq.n	8010536 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010508:	893b      	ldrh	r3, [r7, #8]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d00e      	beq.n	801052c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	88da      	ldrh	r2, [r3, #6]
 8010512:	893b      	ldrh	r3, [r7, #8]
 8010514:	4293      	cmp	r3, r2
 8010516:	bf28      	it	cs
 8010518:	4613      	movcs	r3, r2
 801051a:	b29b      	uxth	r3, r3
 801051c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801051e:	893b      	ldrh	r3, [r7, #8]
 8010520:	461a      	mov	r2, r3
 8010522:	68f9      	ldr	r1, [r7, #12]
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f000 fa5d 	bl	80109e4 <USBD_CtlSendData>
 801052a:	e009      	b.n	8010540 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801052c:	6839      	ldr	r1, [r7, #0]
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f000 f9e7 	bl	8010902 <USBD_CtlError>
 8010534:	e004      	b.n	8010540 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 faae 	bl	8010a98 <USBD_CtlSendStatus>
 801053c:	e000      	b.n	8010540 <USBD_GetDescriptor+0x2cc>
    return;
 801053e:	bf00      	nop
  }
}
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop

08010548 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	889b      	ldrh	r3, [r3, #4]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d131      	bne.n	80105be <USBD_SetAddress+0x76>
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	88db      	ldrh	r3, [r3, #6]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d12d      	bne.n	80105be <USBD_SetAddress+0x76>
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	885b      	ldrh	r3, [r3, #2]
 8010566:	2b7f      	cmp	r3, #127	; 0x7f
 8010568:	d829      	bhi.n	80105be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	885b      	ldrh	r3, [r3, #2]
 801056e:	b2db      	uxtb	r3, r3
 8010570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010574:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801057c:	b2db      	uxtb	r3, r3
 801057e:	2b03      	cmp	r3, #3
 8010580:	d104      	bne.n	801058c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010582:	6839      	ldr	r1, [r7, #0]
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f000 f9bc 	bl	8010902 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801058a:	e01d      	b.n	80105c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	7bfa      	ldrb	r2, [r7, #15]
 8010590:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010594:	7bfb      	ldrb	r3, [r7, #15]
 8010596:	4619      	mov	r1, r3
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f000 ff13 	bl	80113c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f000 fa7a 	bl	8010a98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80105a4:	7bfb      	ldrb	r3, [r7, #15]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d004      	beq.n	80105b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2202      	movs	r2, #2
 80105ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105b2:	e009      	b.n	80105c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2201      	movs	r2, #1
 80105b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105bc:	e004      	b.n	80105c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80105be:	6839      	ldr	r1, [r7, #0]
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 f99e 	bl	8010902 <USBD_CtlError>
  }
}
 80105c6:	bf00      	nop
 80105c8:	bf00      	nop
 80105ca:	3710      	adds	r7, #16
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80105da:	2300      	movs	r3, #0
 80105dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	885b      	ldrh	r3, [r3, #2]
 80105e2:	b2da      	uxtb	r2, r3
 80105e4:	4b4e      	ldr	r3, [pc, #312]	; (8010720 <USBD_SetConfig+0x150>)
 80105e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80105e8:	4b4d      	ldr	r3, [pc, #308]	; (8010720 <USBD_SetConfig+0x150>)
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d905      	bls.n	80105fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80105f0:	6839      	ldr	r1, [r7, #0]
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f000 f985 	bl	8010902 <USBD_CtlError>
    return USBD_FAIL;
 80105f8:	2303      	movs	r3, #3
 80105fa:	e08c      	b.n	8010716 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010602:	b2db      	uxtb	r3, r3
 8010604:	2b02      	cmp	r3, #2
 8010606:	d002      	beq.n	801060e <USBD_SetConfig+0x3e>
 8010608:	2b03      	cmp	r3, #3
 801060a:	d029      	beq.n	8010660 <USBD_SetConfig+0x90>
 801060c:	e075      	b.n	80106fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801060e:	4b44      	ldr	r3, [pc, #272]	; (8010720 <USBD_SetConfig+0x150>)
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d020      	beq.n	8010658 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010616:	4b42      	ldr	r3, [pc, #264]	; (8010720 <USBD_SetConfig+0x150>)
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	461a      	mov	r2, r3
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010620:	4b3f      	ldr	r3, [pc, #252]	; (8010720 <USBD_SetConfig+0x150>)
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	4619      	mov	r1, r3
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f7fe ffe7 	bl	800f5fa <USBD_SetClassConfig>
 801062c:	4603      	mov	r3, r0
 801062e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010630:	7bfb      	ldrb	r3, [r7, #15]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d008      	beq.n	8010648 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010636:	6839      	ldr	r1, [r7, #0]
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f000 f962 	bl	8010902 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2202      	movs	r2, #2
 8010642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010646:	e065      	b.n	8010714 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f000 fa25 	bl	8010a98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2203      	movs	r2, #3
 8010652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010656:	e05d      	b.n	8010714 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f000 fa1d 	bl	8010a98 <USBD_CtlSendStatus>
      break;
 801065e:	e059      	b.n	8010714 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010660:	4b2f      	ldr	r3, [pc, #188]	; (8010720 <USBD_SetConfig+0x150>)
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d112      	bne.n	801068e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2202      	movs	r2, #2
 801066c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010670:	4b2b      	ldr	r3, [pc, #172]	; (8010720 <USBD_SetConfig+0x150>)
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	461a      	mov	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801067a:	4b29      	ldr	r3, [pc, #164]	; (8010720 <USBD_SetConfig+0x150>)
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	4619      	mov	r1, r3
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7fe ffd6 	bl	800f632 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f000 fa06 	bl	8010a98 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801068c:	e042      	b.n	8010714 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801068e:	4b24      	ldr	r3, [pc, #144]	; (8010720 <USBD_SetConfig+0x150>)
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	461a      	mov	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	429a      	cmp	r2, r3
 801069a:	d02a      	beq.n	80106f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	b2db      	uxtb	r3, r3
 80106a2:	4619      	mov	r1, r3
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f7fe ffc4 	bl	800f632 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80106aa:	4b1d      	ldr	r3, [pc, #116]	; (8010720 <USBD_SetConfig+0x150>)
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	461a      	mov	r2, r3
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80106b4:	4b1a      	ldr	r3, [pc, #104]	; (8010720 <USBD_SetConfig+0x150>)
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	4619      	mov	r1, r3
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f7fe ff9d 	bl	800f5fa <USBD_SetClassConfig>
 80106c0:	4603      	mov	r3, r0
 80106c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80106c4:	7bfb      	ldrb	r3, [r7, #15]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d00f      	beq.n	80106ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80106ca:	6839      	ldr	r1, [r7, #0]
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f000 f918 	bl	8010902 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	4619      	mov	r1, r3
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f7fe ffa9 	bl	800f632 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2202      	movs	r2, #2
 80106e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80106e8:	e014      	b.n	8010714 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f000 f9d4 	bl	8010a98 <USBD_CtlSendStatus>
      break;
 80106f0:	e010      	b.n	8010714 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f000 f9d0 	bl	8010a98 <USBD_CtlSendStatus>
      break;
 80106f8:	e00c      	b.n	8010714 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80106fa:	6839      	ldr	r1, [r7, #0]
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f000 f900 	bl	8010902 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010702:	4b07      	ldr	r3, [pc, #28]	; (8010720 <USBD_SetConfig+0x150>)
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	4619      	mov	r1, r3
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f7fe ff92 	bl	800f632 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801070e:	2303      	movs	r3, #3
 8010710:	73fb      	strb	r3, [r7, #15]
      break;
 8010712:	bf00      	nop
  }

  return ret;
 8010714:	7bfb      	ldrb	r3, [r7, #15]
}
 8010716:	4618      	mov	r0, r3
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	20000914 	.word	0x20000914

08010724 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	88db      	ldrh	r3, [r3, #6]
 8010732:	2b01      	cmp	r3, #1
 8010734:	d004      	beq.n	8010740 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010736:	6839      	ldr	r1, [r7, #0]
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f000 f8e2 	bl	8010902 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801073e:	e023      	b.n	8010788 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010746:	b2db      	uxtb	r3, r3
 8010748:	2b02      	cmp	r3, #2
 801074a:	dc02      	bgt.n	8010752 <USBD_GetConfig+0x2e>
 801074c:	2b00      	cmp	r3, #0
 801074e:	dc03      	bgt.n	8010758 <USBD_GetConfig+0x34>
 8010750:	e015      	b.n	801077e <USBD_GetConfig+0x5a>
 8010752:	2b03      	cmp	r3, #3
 8010754:	d00b      	beq.n	801076e <USBD_GetConfig+0x4a>
 8010756:	e012      	b.n	801077e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2200      	movs	r2, #0
 801075c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	3308      	adds	r3, #8
 8010762:	2201      	movs	r2, #1
 8010764:	4619      	mov	r1, r3
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 f93c 	bl	80109e4 <USBD_CtlSendData>
        break;
 801076c:	e00c      	b.n	8010788 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	3304      	adds	r3, #4
 8010772:	2201      	movs	r2, #1
 8010774:	4619      	mov	r1, r3
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f000 f934 	bl	80109e4 <USBD_CtlSendData>
        break;
 801077c:	e004      	b.n	8010788 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801077e:	6839      	ldr	r1, [r7, #0]
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f000 f8be 	bl	8010902 <USBD_CtlError>
        break;
 8010786:	bf00      	nop
}
 8010788:	bf00      	nop
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	3b01      	subs	r3, #1
 80107a4:	2b02      	cmp	r3, #2
 80107a6:	d81e      	bhi.n	80107e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	88db      	ldrh	r3, [r3, #6]
 80107ac:	2b02      	cmp	r3, #2
 80107ae:	d004      	beq.n	80107ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80107b0:	6839      	ldr	r1, [r7, #0]
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 f8a5 	bl	8010902 <USBD_CtlError>
        break;
 80107b8:	e01a      	b.n	80107f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2201      	movs	r2, #1
 80107be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d005      	beq.n	80107d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	68db      	ldr	r3, [r3, #12]
 80107ce:	f043 0202 	orr.w	r2, r3, #2
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	330c      	adds	r3, #12
 80107da:	2202      	movs	r2, #2
 80107dc:	4619      	mov	r1, r3
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 f900 	bl	80109e4 <USBD_CtlSendData>
      break;
 80107e4:	e004      	b.n	80107f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80107e6:	6839      	ldr	r1, [r7, #0]
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f000 f88a 	bl	8010902 <USBD_CtlError>
      break;
 80107ee:	bf00      	nop
  }
}
 80107f0:	bf00      	nop
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	885b      	ldrh	r3, [r3, #2]
 8010806:	2b01      	cmp	r3, #1
 8010808:	d107      	bne.n	801081a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2201      	movs	r2, #1
 801080e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f940 	bl	8010a98 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010818:	e013      	b.n	8010842 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	885b      	ldrh	r3, [r3, #2]
 801081e:	2b02      	cmp	r3, #2
 8010820:	d10b      	bne.n	801083a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	889b      	ldrh	r3, [r3, #4]
 8010826:	0a1b      	lsrs	r3, r3, #8
 8010828:	b29b      	uxth	r3, r3
 801082a:	b2da      	uxtb	r2, r3
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f000 f930 	bl	8010a98 <USBD_CtlSendStatus>
}
 8010838:	e003      	b.n	8010842 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801083a:	6839      	ldr	r1, [r7, #0]
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f000 f860 	bl	8010902 <USBD_CtlError>
}
 8010842:	bf00      	nop
 8010844:	3708      	adds	r7, #8
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}

0801084a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801084a:	b580      	push	{r7, lr}
 801084c:	b082      	sub	sp, #8
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
 8010852:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801085a:	b2db      	uxtb	r3, r3
 801085c:	3b01      	subs	r3, #1
 801085e:	2b02      	cmp	r3, #2
 8010860:	d80b      	bhi.n	801087a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	885b      	ldrh	r3, [r3, #2]
 8010866:	2b01      	cmp	r3, #1
 8010868:	d10c      	bne.n	8010884 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2200      	movs	r2, #0
 801086e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 f910 	bl	8010a98 <USBD_CtlSendStatus>
      }
      break;
 8010878:	e004      	b.n	8010884 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801087a:	6839      	ldr	r1, [r7, #0]
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 f840 	bl	8010902 <USBD_CtlError>
      break;
 8010882:	e000      	b.n	8010886 <USBD_ClrFeature+0x3c>
      break;
 8010884:	bf00      	nop
  }
}
 8010886:	bf00      	nop
 8010888:	3708      	adds	r7, #8
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801088e:	b580      	push	{r7, lr}
 8010890:	b084      	sub	sp, #16
 8010892:	af00      	add	r7, sp, #0
 8010894:	6078      	str	r0, [r7, #4]
 8010896:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	781a      	ldrb	r2, [r3, #0]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	3301      	adds	r3, #1
 80108a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	781a      	ldrb	r2, [r3, #0]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	3301      	adds	r3, #1
 80108b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80108b8:	68f8      	ldr	r0, [r7, #12]
 80108ba:	f7ff fa41 	bl	800fd40 <SWAPBYTE>
 80108be:	4603      	mov	r3, r0
 80108c0:	461a      	mov	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	3301      	adds	r3, #1
 80108ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	3301      	adds	r3, #1
 80108d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	f7ff fa34 	bl	800fd40 <SWAPBYTE>
 80108d8:	4603      	mov	r3, r0
 80108da:	461a      	mov	r2, r3
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	3301      	adds	r3, #1
 80108e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	3301      	adds	r3, #1
 80108ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80108ec:	68f8      	ldr	r0, [r7, #12]
 80108ee:	f7ff fa27 	bl	800fd40 <SWAPBYTE>
 80108f2:	4603      	mov	r3, r0
 80108f4:	461a      	mov	r2, r3
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	80da      	strh	r2, [r3, #6]
}
 80108fa:	bf00      	nop
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010902:	b580      	push	{r7, lr}
 8010904:	b082      	sub	sp, #8
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
 801090a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801090c:	2180      	movs	r1, #128	; 0x80
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 fcee 	bl	80112f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010914:	2100      	movs	r1, #0
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 fcea 	bl	80112f0 <USBD_LL_StallEP>
}
 801091c:	bf00      	nop
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b086      	sub	sp, #24
 8010928:	af00      	add	r7, sp, #0
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	60b9      	str	r1, [r7, #8]
 801092e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010930:	2300      	movs	r3, #0
 8010932:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d036      	beq.n	80109a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801093e:	6938      	ldr	r0, [r7, #16]
 8010940:	f000 f836 	bl	80109b0 <USBD_GetLen>
 8010944:	4603      	mov	r3, r0
 8010946:	3301      	adds	r3, #1
 8010948:	b29b      	uxth	r3, r3
 801094a:	005b      	lsls	r3, r3, #1
 801094c:	b29a      	uxth	r2, r3
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010952:	7dfb      	ldrb	r3, [r7, #23]
 8010954:	68ba      	ldr	r2, [r7, #8]
 8010956:	4413      	add	r3, r2
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	7812      	ldrb	r2, [r2, #0]
 801095c:	701a      	strb	r2, [r3, #0]
  idx++;
 801095e:	7dfb      	ldrb	r3, [r7, #23]
 8010960:	3301      	adds	r3, #1
 8010962:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010964:	7dfb      	ldrb	r3, [r7, #23]
 8010966:	68ba      	ldr	r2, [r7, #8]
 8010968:	4413      	add	r3, r2
 801096a:	2203      	movs	r2, #3
 801096c:	701a      	strb	r2, [r3, #0]
  idx++;
 801096e:	7dfb      	ldrb	r3, [r7, #23]
 8010970:	3301      	adds	r3, #1
 8010972:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010974:	e013      	b.n	801099e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010976:	7dfb      	ldrb	r3, [r7, #23]
 8010978:	68ba      	ldr	r2, [r7, #8]
 801097a:	4413      	add	r3, r2
 801097c:	693a      	ldr	r2, [r7, #16]
 801097e:	7812      	ldrb	r2, [r2, #0]
 8010980:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	3301      	adds	r3, #1
 8010986:	613b      	str	r3, [r7, #16]
    idx++;
 8010988:	7dfb      	ldrb	r3, [r7, #23]
 801098a:	3301      	adds	r3, #1
 801098c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801098e:	7dfb      	ldrb	r3, [r7, #23]
 8010990:	68ba      	ldr	r2, [r7, #8]
 8010992:	4413      	add	r3, r2
 8010994:	2200      	movs	r2, #0
 8010996:	701a      	strb	r2, [r3, #0]
    idx++;
 8010998:	7dfb      	ldrb	r3, [r7, #23]
 801099a:	3301      	adds	r3, #1
 801099c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d1e7      	bne.n	8010976 <USBD_GetString+0x52>
 80109a6:	e000      	b.n	80109aa <USBD_GetString+0x86>
    return;
 80109a8:	bf00      	nop
  }
}
 80109aa:	3718      	adds	r7, #24
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b085      	sub	sp, #20
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80109b8:	2300      	movs	r3, #0
 80109ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80109c0:	e005      	b.n	80109ce <USBD_GetLen+0x1e>
  {
    len++;
 80109c2:	7bfb      	ldrb	r3, [r7, #15]
 80109c4:	3301      	adds	r3, #1
 80109c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	3301      	adds	r3, #1
 80109cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d1f5      	bne.n	80109c2 <USBD_GetLen+0x12>
  }

  return len;
 80109d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3714      	adds	r7, #20
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr

080109e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2202      	movs	r2, #2
 80109f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	68ba      	ldr	r2, [r7, #8]
 8010a08:	2100      	movs	r1, #0
 8010a0a:	68f8      	ldr	r0, [r7, #12]
 8010a0c:	f000 fcf9 	bl	8011402 <USBD_LL_Transmit>

  return USBD_OK;
 8010a10:	2300      	movs	r3, #0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}

08010a1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010a1a:	b580      	push	{r7, lr}
 8010a1c:	b084      	sub	sp, #16
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	60f8      	str	r0, [r7, #12]
 8010a22:	60b9      	str	r1, [r7, #8]
 8010a24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	68ba      	ldr	r2, [r7, #8]
 8010a2a:	2100      	movs	r1, #0
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f000 fce8 	bl	8011402 <USBD_LL_Transmit>

  return USBD_OK;
 8010a32:	2300      	movs	r3, #0
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3710      	adds	r7, #16
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b084      	sub	sp, #16
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	2203      	movs	r2, #3
 8010a4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	687a      	ldr	r2, [r7, #4]
 8010a54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	68ba      	ldr	r2, [r7, #8]
 8010a64:	2100      	movs	r1, #0
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	f000 fcec 	bl	8011444 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010a6c:	2300      	movs	r3, #0
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3710      	adds	r7, #16
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b084      	sub	sp, #16
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	60f8      	str	r0, [r7, #12]
 8010a7e:	60b9      	str	r1, [r7, #8]
 8010a80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	68ba      	ldr	r2, [r7, #8]
 8010a86:	2100      	movs	r1, #0
 8010a88:	68f8      	ldr	r0, [r7, #12]
 8010a8a:	f000 fcdb 	bl	8011444 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010a8e:	2300      	movs	r3, #0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3710      	adds	r7, #16
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2204      	movs	r2, #4
 8010aa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	2200      	movs	r2, #0
 8010aac:	2100      	movs	r1, #0
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f000 fca7 	bl	8011402 <USBD_LL_Transmit>

  return USBD_OK;
 8010ab4:	2300      	movs	r3, #0
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3708      	adds	r7, #8
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}

08010abe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010abe:	b580      	push	{r7, lr}
 8010ac0:	b082      	sub	sp, #8
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2205      	movs	r2, #5
 8010aca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ace:	2300      	movs	r3, #0
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	2100      	movs	r1, #0
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 fcb5 	bl	8011444 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010ada:	2300      	movs	r3, #0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3708      	adds	r7, #8
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010ae8:	2200      	movs	r2, #0
 8010aea:	4912      	ldr	r1, [pc, #72]	; (8010b34 <MX_USB_DEVICE_Init+0x50>)
 8010aec:	4812      	ldr	r0, [pc, #72]	; (8010b38 <MX_USB_DEVICE_Init+0x54>)
 8010aee:	f7fe fd07 	bl	800f500 <USBD_Init>
 8010af2:	4603      	mov	r3, r0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d001      	beq.n	8010afc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010af8:	f7f7 fc56 	bl	80083a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010afc:	490f      	ldr	r1, [pc, #60]	; (8010b3c <MX_USB_DEVICE_Init+0x58>)
 8010afe:	480e      	ldr	r0, [pc, #56]	; (8010b38 <MX_USB_DEVICE_Init+0x54>)
 8010b00:	f7fe fd2e 	bl	800f560 <USBD_RegisterClass>
 8010b04:	4603      	mov	r3, r0
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d001      	beq.n	8010b0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010b0a:	f7f7 fc4d 	bl	80083a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010b0e:	490c      	ldr	r1, [pc, #48]	; (8010b40 <MX_USB_DEVICE_Init+0x5c>)
 8010b10:	4809      	ldr	r0, [pc, #36]	; (8010b38 <MX_USB_DEVICE_Init+0x54>)
 8010b12:	f7fe fc1f 	bl	800f354 <USBD_CDC_RegisterInterface>
 8010b16:	4603      	mov	r3, r0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d001      	beq.n	8010b20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010b1c:	f7f7 fc44 	bl	80083a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010b20:	4805      	ldr	r0, [pc, #20]	; (8010b38 <MX_USB_DEVICE_Init+0x54>)
 8010b22:	f7fe fd53 	bl	800f5cc <USBD_Start>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d001      	beq.n	8010b30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010b2c:	f7f7 fc3c 	bl	80083a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010b30:	bf00      	nop
 8010b32:	bd80      	pop	{r7, pc}
 8010b34:	20000480 	.word	0x20000480
 8010b38:	20000918 	.word	0x20000918
 8010b3c:	200003ec 	.word	0x200003ec
 8010b40:	2000046c 	.word	0x2000046c

08010b44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010b48:	2200      	movs	r2, #0
 8010b4a:	4905      	ldr	r1, [pc, #20]	; (8010b60 <CDC_Init_FS+0x1c>)
 8010b4c:	4805      	ldr	r0, [pc, #20]	; (8010b64 <CDC_Init_FS+0x20>)
 8010b4e:	f7fe fc1b 	bl	800f388 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010b52:	4905      	ldr	r1, [pc, #20]	; (8010b68 <CDC_Init_FS+0x24>)
 8010b54:	4803      	ldr	r0, [pc, #12]	; (8010b64 <CDC_Init_FS+0x20>)
 8010b56:	f7fe fc39 	bl	800f3cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010b5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	bd80      	pop	{r7, pc}
 8010b60:	200013f4 	.word	0x200013f4
 8010b64:	20000918 	.word	0x20000918
 8010b68:	20000bf4 	.word	0x20000bf4

08010b6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010b70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr

08010b7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	4603      	mov	r3, r0
 8010b84:	6039      	str	r1, [r7, #0]
 8010b86:	71fb      	strb	r3, [r7, #7]
 8010b88:	4613      	mov	r3, r2
 8010b8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010b8c:	79fb      	ldrb	r3, [r7, #7]
 8010b8e:	2b23      	cmp	r3, #35	; 0x23
 8010b90:	d84a      	bhi.n	8010c28 <CDC_Control_FS+0xac>
 8010b92:	a201      	add	r2, pc, #4	; (adr r2, 8010b98 <CDC_Control_FS+0x1c>)
 8010b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b98:	08010c29 	.word	0x08010c29
 8010b9c:	08010c29 	.word	0x08010c29
 8010ba0:	08010c29 	.word	0x08010c29
 8010ba4:	08010c29 	.word	0x08010c29
 8010ba8:	08010c29 	.word	0x08010c29
 8010bac:	08010c29 	.word	0x08010c29
 8010bb0:	08010c29 	.word	0x08010c29
 8010bb4:	08010c29 	.word	0x08010c29
 8010bb8:	08010c29 	.word	0x08010c29
 8010bbc:	08010c29 	.word	0x08010c29
 8010bc0:	08010c29 	.word	0x08010c29
 8010bc4:	08010c29 	.word	0x08010c29
 8010bc8:	08010c29 	.word	0x08010c29
 8010bcc:	08010c29 	.word	0x08010c29
 8010bd0:	08010c29 	.word	0x08010c29
 8010bd4:	08010c29 	.word	0x08010c29
 8010bd8:	08010c29 	.word	0x08010c29
 8010bdc:	08010c29 	.word	0x08010c29
 8010be0:	08010c29 	.word	0x08010c29
 8010be4:	08010c29 	.word	0x08010c29
 8010be8:	08010c29 	.word	0x08010c29
 8010bec:	08010c29 	.word	0x08010c29
 8010bf0:	08010c29 	.word	0x08010c29
 8010bf4:	08010c29 	.word	0x08010c29
 8010bf8:	08010c29 	.word	0x08010c29
 8010bfc:	08010c29 	.word	0x08010c29
 8010c00:	08010c29 	.word	0x08010c29
 8010c04:	08010c29 	.word	0x08010c29
 8010c08:	08010c29 	.word	0x08010c29
 8010c0c:	08010c29 	.word	0x08010c29
 8010c10:	08010c29 	.word	0x08010c29
 8010c14:	08010c29 	.word	0x08010c29
 8010c18:	08010c29 	.word	0x08010c29
 8010c1c:	08010c29 	.word	0x08010c29
 8010c20:	08010c29 	.word	0x08010c29
 8010c24:	08010c29 	.word	0x08010c29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010c28:	bf00      	nop
  }

  return (USBD_OK);
 8010c2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	370c      	adds	r7, #12
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr

08010c38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010c42:	6879      	ldr	r1, [r7, #4]
 8010c44:	4805      	ldr	r0, [pc, #20]	; (8010c5c <CDC_Receive_FS+0x24>)
 8010c46:	f7fe fbc1 	bl	800f3cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010c4a:	4804      	ldr	r0, [pc, #16]	; (8010c5c <CDC_Receive_FS+0x24>)
 8010c4c:	f7fe fc22 	bl	800f494 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010c50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	20000918 	.word	0x20000918

08010c60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b084      	sub	sp, #16
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010c70:	4b0d      	ldr	r3, [pc, #52]	; (8010ca8 <CDC_Transmit_FS+0x48>)
 8010c72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d001      	beq.n	8010c86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010c82:	2301      	movs	r3, #1
 8010c84:	e00b      	b.n	8010c9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010c86:	887b      	ldrh	r3, [r7, #2]
 8010c88:	461a      	mov	r2, r3
 8010c8a:	6879      	ldr	r1, [r7, #4]
 8010c8c:	4806      	ldr	r0, [pc, #24]	; (8010ca8 <CDC_Transmit_FS+0x48>)
 8010c8e:	f7fe fb7b 	bl	800f388 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010c92:	4805      	ldr	r0, [pc, #20]	; (8010ca8 <CDC_Transmit_FS+0x48>)
 8010c94:	f7fe fbb8 	bl	800f408 <USBD_CDC_TransmitPacket>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	20000918 	.word	0x20000918

08010cac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b087      	sub	sp, #28
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	4613      	mov	r3, r2
 8010cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	371c      	adds	r7, #28
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr
	...

08010cd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	6039      	str	r1, [r7, #0]
 8010cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	2212      	movs	r2, #18
 8010ce0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010ce2:	4b03      	ldr	r3, [pc, #12]	; (8010cf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	370c      	adds	r7, #12
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr
 8010cf0:	2000049c 	.word	0x2000049c

08010cf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	6039      	str	r1, [r7, #0]
 8010cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	2204      	movs	r2, #4
 8010d04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010d06:	4b03      	ldr	r3, [pc, #12]	; (8010d14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	370c      	adds	r7, #12
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr
 8010d14:	200004b0 	.word	0x200004b0

08010d18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	4603      	mov	r3, r0
 8010d20:	6039      	str	r1, [r7, #0]
 8010d22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d24:	79fb      	ldrb	r3, [r7, #7]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d105      	bne.n	8010d36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d2a:	683a      	ldr	r2, [r7, #0]
 8010d2c:	4907      	ldr	r1, [pc, #28]	; (8010d4c <USBD_FS_ProductStrDescriptor+0x34>)
 8010d2e:	4808      	ldr	r0, [pc, #32]	; (8010d50 <USBD_FS_ProductStrDescriptor+0x38>)
 8010d30:	f7ff fdf8 	bl	8010924 <USBD_GetString>
 8010d34:	e004      	b.n	8010d40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d36:	683a      	ldr	r2, [r7, #0]
 8010d38:	4904      	ldr	r1, [pc, #16]	; (8010d4c <USBD_FS_ProductStrDescriptor+0x34>)
 8010d3a:	4805      	ldr	r0, [pc, #20]	; (8010d50 <USBD_FS_ProductStrDescriptor+0x38>)
 8010d3c:	f7ff fdf2 	bl	8010924 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d40:	4b02      	ldr	r3, [pc, #8]	; (8010d4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20001bf4 	.word	0x20001bf4
 8010d50:	08016730 	.word	0x08016730

08010d54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b082      	sub	sp, #8
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	6039      	str	r1, [r7, #0]
 8010d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010d60:	683a      	ldr	r2, [r7, #0]
 8010d62:	4904      	ldr	r1, [pc, #16]	; (8010d74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010d64:	4804      	ldr	r0, [pc, #16]	; (8010d78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010d66:	f7ff fddd 	bl	8010924 <USBD_GetString>
  return USBD_StrDesc;
 8010d6a:	4b02      	ldr	r3, [pc, #8]	; (8010d74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3708      	adds	r7, #8
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	20001bf4 	.word	0x20001bf4
 8010d78:	08016748 	.word	0x08016748

08010d7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	4603      	mov	r3, r0
 8010d84:	6039      	str	r1, [r7, #0]
 8010d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	221a      	movs	r2, #26
 8010d8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010d8e:	f000 f843 	bl	8010e18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010d92:	4b02      	ldr	r3, [pc, #8]	; (8010d9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3708      	adds	r7, #8
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	200004b4 	.word	0x200004b4

08010da0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	4603      	mov	r3, r0
 8010da8:	6039      	str	r1, [r7, #0]
 8010daa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010dac:	79fb      	ldrb	r3, [r7, #7]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d105      	bne.n	8010dbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010db2:	683a      	ldr	r2, [r7, #0]
 8010db4:	4907      	ldr	r1, [pc, #28]	; (8010dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010db6:	4808      	ldr	r0, [pc, #32]	; (8010dd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010db8:	f7ff fdb4 	bl	8010924 <USBD_GetString>
 8010dbc:	e004      	b.n	8010dc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010dbe:	683a      	ldr	r2, [r7, #0]
 8010dc0:	4904      	ldr	r1, [pc, #16]	; (8010dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010dc2:	4805      	ldr	r0, [pc, #20]	; (8010dd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010dc4:	f7ff fdae 	bl	8010924 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010dc8:	4b02      	ldr	r3, [pc, #8]	; (8010dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3708      	adds	r7, #8
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	20001bf4 	.word	0x20001bf4
 8010dd8:	0801675c 	.word	0x0801675c

08010ddc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	4603      	mov	r3, r0
 8010de4:	6039      	str	r1, [r7, #0]
 8010de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010de8:	79fb      	ldrb	r3, [r7, #7]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d105      	bne.n	8010dfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010dee:	683a      	ldr	r2, [r7, #0]
 8010df0:	4907      	ldr	r1, [pc, #28]	; (8010e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010df2:	4808      	ldr	r0, [pc, #32]	; (8010e14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010df4:	f7ff fd96 	bl	8010924 <USBD_GetString>
 8010df8:	e004      	b.n	8010e04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010dfa:	683a      	ldr	r2, [r7, #0]
 8010dfc:	4904      	ldr	r1, [pc, #16]	; (8010e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010dfe:	4805      	ldr	r0, [pc, #20]	; (8010e14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e00:	f7ff fd90 	bl	8010924 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e04:	4b02      	ldr	r3, [pc, #8]	; (8010e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3708      	adds	r7, #8
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	20001bf4 	.word	0x20001bf4
 8010e14:	08016768 	.word	0x08016768

08010e18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010e1e:	4b0f      	ldr	r3, [pc, #60]	; (8010e5c <Get_SerialNum+0x44>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010e24:	4b0e      	ldr	r3, [pc, #56]	; (8010e60 <Get_SerialNum+0x48>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010e2a:	4b0e      	ldr	r3, [pc, #56]	; (8010e64 <Get_SerialNum+0x4c>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010e30:	68fa      	ldr	r2, [r7, #12]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	4413      	add	r3, r2
 8010e36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d009      	beq.n	8010e52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010e3e:	2208      	movs	r2, #8
 8010e40:	4909      	ldr	r1, [pc, #36]	; (8010e68 <Get_SerialNum+0x50>)
 8010e42:	68f8      	ldr	r0, [r7, #12]
 8010e44:	f000 f814 	bl	8010e70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010e48:	2204      	movs	r2, #4
 8010e4a:	4908      	ldr	r1, [pc, #32]	; (8010e6c <Get_SerialNum+0x54>)
 8010e4c:	68b8      	ldr	r0, [r7, #8]
 8010e4e:	f000 f80f 	bl	8010e70 <IntToUnicode>
  }
}
 8010e52:	bf00      	nop
 8010e54:	3710      	adds	r7, #16
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	1fff7a10 	.word	0x1fff7a10
 8010e60:	1fff7a14 	.word	0x1fff7a14
 8010e64:	1fff7a18 	.word	0x1fff7a18
 8010e68:	200004b6 	.word	0x200004b6
 8010e6c:	200004c6 	.word	0x200004c6

08010e70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b087      	sub	sp, #28
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010e82:	2300      	movs	r3, #0
 8010e84:	75fb      	strb	r3, [r7, #23]
 8010e86:	e027      	b.n	8010ed8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	0f1b      	lsrs	r3, r3, #28
 8010e8c:	2b09      	cmp	r3, #9
 8010e8e:	d80b      	bhi.n	8010ea8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	0f1b      	lsrs	r3, r3, #28
 8010e94:	b2da      	uxtb	r2, r3
 8010e96:	7dfb      	ldrb	r3, [r7, #23]
 8010e98:	005b      	lsls	r3, r3, #1
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	440b      	add	r3, r1
 8010ea0:	3230      	adds	r2, #48	; 0x30
 8010ea2:	b2d2      	uxtb	r2, r2
 8010ea4:	701a      	strb	r2, [r3, #0]
 8010ea6:	e00a      	b.n	8010ebe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	0f1b      	lsrs	r3, r3, #28
 8010eac:	b2da      	uxtb	r2, r3
 8010eae:	7dfb      	ldrb	r3, [r7, #23]
 8010eb0:	005b      	lsls	r3, r3, #1
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	440b      	add	r3, r1
 8010eb8:	3237      	adds	r2, #55	; 0x37
 8010eba:	b2d2      	uxtb	r2, r2
 8010ebc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	011b      	lsls	r3, r3, #4
 8010ec2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010ec4:	7dfb      	ldrb	r3, [r7, #23]
 8010ec6:	005b      	lsls	r3, r3, #1
 8010ec8:	3301      	adds	r3, #1
 8010eca:	68ba      	ldr	r2, [r7, #8]
 8010ecc:	4413      	add	r3, r2
 8010ece:	2200      	movs	r2, #0
 8010ed0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010ed2:	7dfb      	ldrb	r3, [r7, #23]
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	75fb      	strb	r3, [r7, #23]
 8010ed8:	7dfa      	ldrb	r2, [r7, #23]
 8010eda:	79fb      	ldrb	r3, [r7, #7]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d3d3      	bcc.n	8010e88 <IntToUnicode+0x18>
  }
}
 8010ee0:	bf00      	nop
 8010ee2:	bf00      	nop
 8010ee4:	371c      	adds	r7, #28
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr
	...

08010ef0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b08a      	sub	sp, #40	; 0x28
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ef8:	f107 0314 	add.w	r3, r7, #20
 8010efc:	2200      	movs	r2, #0
 8010efe:	601a      	str	r2, [r3, #0]
 8010f00:	605a      	str	r2, [r3, #4]
 8010f02:	609a      	str	r2, [r3, #8]
 8010f04:	60da      	str	r2, [r3, #12]
 8010f06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010f10:	d147      	bne.n	8010fa2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010f12:	2300      	movs	r3, #0
 8010f14:	613b      	str	r3, [r7, #16]
 8010f16:	4b25      	ldr	r3, [pc, #148]	; (8010fac <HAL_PCD_MspInit+0xbc>)
 8010f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f1a:	4a24      	ldr	r2, [pc, #144]	; (8010fac <HAL_PCD_MspInit+0xbc>)
 8010f1c:	f043 0301 	orr.w	r3, r3, #1
 8010f20:	6313      	str	r3, [r2, #48]	; 0x30
 8010f22:	4b22      	ldr	r3, [pc, #136]	; (8010fac <HAL_PCD_MspInit+0xbc>)
 8010f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f26:	f003 0301 	and.w	r3, r3, #1
 8010f2a:	613b      	str	r3, [r7, #16]
 8010f2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010f34:	2300      	movs	r3, #0
 8010f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f3c:	f107 0314 	add.w	r3, r7, #20
 8010f40:	4619      	mov	r1, r3
 8010f42:	481b      	ldr	r0, [pc, #108]	; (8010fb0 <HAL_PCD_MspInit+0xc0>)
 8010f44:	f7f8 feb6 	bl	8009cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010f48:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f4e:	2302      	movs	r3, #2
 8010f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f52:	2300      	movs	r3, #0
 8010f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f56:	2303      	movs	r3, #3
 8010f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010f5a:	230a      	movs	r3, #10
 8010f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f5e:	f107 0314 	add.w	r3, r7, #20
 8010f62:	4619      	mov	r1, r3
 8010f64:	4812      	ldr	r0, [pc, #72]	; (8010fb0 <HAL_PCD_MspInit+0xc0>)
 8010f66:	f7f8 fea5 	bl	8009cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010f6a:	4b10      	ldr	r3, [pc, #64]	; (8010fac <HAL_PCD_MspInit+0xbc>)
 8010f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f6e:	4a0f      	ldr	r2, [pc, #60]	; (8010fac <HAL_PCD_MspInit+0xbc>)
 8010f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f74:	6353      	str	r3, [r2, #52]	; 0x34
 8010f76:	2300      	movs	r3, #0
 8010f78:	60fb      	str	r3, [r7, #12]
 8010f7a:	4b0c      	ldr	r3, [pc, #48]	; (8010fac <HAL_PCD_MspInit+0xbc>)
 8010f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f7e:	4a0b      	ldr	r2, [pc, #44]	; (8010fac <HAL_PCD_MspInit+0xbc>)
 8010f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f84:	6453      	str	r3, [r2, #68]	; 0x44
 8010f86:	4b09      	ldr	r3, [pc, #36]	; (8010fac <HAL_PCD_MspInit+0xbc>)
 8010f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f8e:	60fb      	str	r3, [r7, #12]
 8010f90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010f92:	2200      	movs	r2, #0
 8010f94:	2100      	movs	r1, #0
 8010f96:	2043      	movs	r0, #67	; 0x43
 8010f98:	f7f8 fe51 	bl	8009c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010f9c:	2043      	movs	r0, #67	; 0x43
 8010f9e:	f7f8 fe6a 	bl	8009c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010fa2:	bf00      	nop
 8010fa4:	3728      	adds	r7, #40	; 0x28
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	40023800 	.word	0x40023800
 8010fb0:	40020000 	.word	0x40020000

08010fb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010fc8:	4619      	mov	r1, r3
 8010fca:	4610      	mov	r0, r2
 8010fcc:	f7fe fb4b 	bl	800f666 <USBD_LL_SetupStage>
}
 8010fd0:	bf00      	nop
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	460b      	mov	r3, r1
 8010fe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010fea:	78fa      	ldrb	r2, [r7, #3]
 8010fec:	6879      	ldr	r1, [r7, #4]
 8010fee:	4613      	mov	r3, r2
 8010ff0:	00db      	lsls	r3, r3, #3
 8010ff2:	4413      	add	r3, r2
 8010ff4:	009b      	lsls	r3, r3, #2
 8010ff6:	440b      	add	r3, r1
 8010ff8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010ffc:	681a      	ldr	r2, [r3, #0]
 8010ffe:	78fb      	ldrb	r3, [r7, #3]
 8011000:	4619      	mov	r1, r3
 8011002:	f7fe fb85 	bl	800f710 <USBD_LL_DataOutStage>
}
 8011006:	bf00      	nop
 8011008:	3708      	adds	r7, #8
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}

0801100e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801100e:	b580      	push	{r7, lr}
 8011010:	b082      	sub	sp, #8
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
 8011016:	460b      	mov	r3, r1
 8011018:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011020:	78fa      	ldrb	r2, [r7, #3]
 8011022:	6879      	ldr	r1, [r7, #4]
 8011024:	4613      	mov	r3, r2
 8011026:	00db      	lsls	r3, r3, #3
 8011028:	4413      	add	r3, r2
 801102a:	009b      	lsls	r3, r3, #2
 801102c:	440b      	add	r3, r1
 801102e:	334c      	adds	r3, #76	; 0x4c
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	78fb      	ldrb	r3, [r7, #3]
 8011034:	4619      	mov	r1, r3
 8011036:	f7fe fc1e 	bl	800f876 <USBD_LL_DataInStage>
}
 801103a:	bf00      	nop
 801103c:	3708      	adds	r7, #8
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011042:	b580      	push	{r7, lr}
 8011044:	b082      	sub	sp, #8
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011050:	4618      	mov	r0, r3
 8011052:	f7fe fd52 	bl	800fafa <USBD_LL_SOF>
}
 8011056:	bf00      	nop
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}

0801105e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801105e:	b580      	push	{r7, lr}
 8011060:	b084      	sub	sp, #16
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011066:	2301      	movs	r3, #1
 8011068:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d102      	bne.n	8011078 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011072:	2300      	movs	r3, #0
 8011074:	73fb      	strb	r3, [r7, #15]
 8011076:	e008      	b.n	801108a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	2b02      	cmp	r3, #2
 801107e:	d102      	bne.n	8011086 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011080:	2301      	movs	r3, #1
 8011082:	73fb      	strb	r3, [r7, #15]
 8011084:	e001      	b.n	801108a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011086:	f7f7 f98f 	bl	80083a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011090:	7bfa      	ldrb	r2, [r7, #15]
 8011092:	4611      	mov	r1, r2
 8011094:	4618      	mov	r0, r3
 8011096:	f7fe fcf2 	bl	800fa7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7fe fc9a 	bl	800f9da <USBD_LL_Reset>
}
 80110a6:	bf00      	nop
 80110a8:	3710      	adds	r7, #16
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
	...

080110b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110be:	4618      	mov	r0, r3
 80110c0:	f7fe fced 	bl	800fa9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	6812      	ldr	r2, [r2, #0]
 80110d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80110d6:	f043 0301 	orr.w	r3, r3, #1
 80110da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6a1b      	ldr	r3, [r3, #32]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d005      	beq.n	80110f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80110e4:	4b04      	ldr	r3, [pc, #16]	; (80110f8 <HAL_PCD_SuspendCallback+0x48>)
 80110e6:	691b      	ldr	r3, [r3, #16]
 80110e8:	4a03      	ldr	r2, [pc, #12]	; (80110f8 <HAL_PCD_SuspendCallback+0x48>)
 80110ea:	f043 0306 	orr.w	r3, r3, #6
 80110ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80110f0:	bf00      	nop
 80110f2:	3708      	adds	r7, #8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	e000ed00 	.word	0xe000ed00

080110fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801110a:	4618      	mov	r0, r3
 801110c:	f7fe fcdd 	bl	800faca <USBD_LL_Resume>
}
 8011110:	bf00      	nop
 8011112:	3708      	adds	r7, #8
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}

08011118 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	460b      	mov	r3, r1
 8011122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801112a:	78fa      	ldrb	r2, [r7, #3]
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f7fe fd35 	bl	800fb9e <USBD_LL_IsoOUTIncomplete>
}
 8011134:	bf00      	nop
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	460b      	mov	r3, r1
 8011146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801114e:	78fa      	ldrb	r2, [r7, #3]
 8011150:	4611      	mov	r1, r2
 8011152:	4618      	mov	r0, r3
 8011154:	f7fe fcf1 	bl	800fb3a <USBD_LL_IsoINIncomplete>
}
 8011158:	bf00      	nop
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801116e:	4618      	mov	r0, r3
 8011170:	f7fe fd47 	bl	800fc02 <USBD_LL_DevConnected>
}
 8011174:	bf00      	nop
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801118a:	4618      	mov	r0, r3
 801118c:	f7fe fd44 	bl	800fc18 <USBD_LL_DevDisconnected>
}
 8011190:	bf00      	nop
 8011192:	3708      	adds	r7, #8
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}

08011198 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d13c      	bne.n	8011222 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80111a8:	4a20      	ldr	r2, [pc, #128]	; (801122c <USBD_LL_Init+0x94>)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	4a1e      	ldr	r2, [pc, #120]	; (801122c <USBD_LL_Init+0x94>)
 80111b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80111b8:	4b1c      	ldr	r3, [pc, #112]	; (801122c <USBD_LL_Init+0x94>)
 80111ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80111be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80111c0:	4b1a      	ldr	r3, [pc, #104]	; (801122c <USBD_LL_Init+0x94>)
 80111c2:	2204      	movs	r2, #4
 80111c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80111c6:	4b19      	ldr	r3, [pc, #100]	; (801122c <USBD_LL_Init+0x94>)
 80111c8:	2202      	movs	r2, #2
 80111ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80111cc:	4b17      	ldr	r3, [pc, #92]	; (801122c <USBD_LL_Init+0x94>)
 80111ce:	2200      	movs	r2, #0
 80111d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80111d2:	4b16      	ldr	r3, [pc, #88]	; (801122c <USBD_LL_Init+0x94>)
 80111d4:	2202      	movs	r2, #2
 80111d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80111d8:	4b14      	ldr	r3, [pc, #80]	; (801122c <USBD_LL_Init+0x94>)
 80111da:	2200      	movs	r2, #0
 80111dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80111de:	4b13      	ldr	r3, [pc, #76]	; (801122c <USBD_LL_Init+0x94>)
 80111e0:	2200      	movs	r2, #0
 80111e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80111e4:	4b11      	ldr	r3, [pc, #68]	; (801122c <USBD_LL_Init+0x94>)
 80111e6:	2200      	movs	r2, #0
 80111e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80111ea:	4b10      	ldr	r3, [pc, #64]	; (801122c <USBD_LL_Init+0x94>)
 80111ec:	2201      	movs	r2, #1
 80111ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80111f0:	4b0e      	ldr	r3, [pc, #56]	; (801122c <USBD_LL_Init+0x94>)
 80111f2:	2200      	movs	r2, #0
 80111f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80111f6:	480d      	ldr	r0, [pc, #52]	; (801122c <USBD_LL_Init+0x94>)
 80111f8:	f7f9 f86e 	bl	800a2d8 <HAL_PCD_Init>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d001      	beq.n	8011206 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011202:	f7f7 f8d1 	bl	80083a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011206:	2180      	movs	r1, #128	; 0x80
 8011208:	4808      	ldr	r0, [pc, #32]	; (801122c <USBD_LL_Init+0x94>)
 801120a:	f7fa fac6 	bl	800b79a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801120e:	2240      	movs	r2, #64	; 0x40
 8011210:	2100      	movs	r1, #0
 8011212:	4806      	ldr	r0, [pc, #24]	; (801122c <USBD_LL_Init+0x94>)
 8011214:	f7fa fa7a 	bl	800b70c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011218:	2280      	movs	r2, #128	; 0x80
 801121a:	2101      	movs	r1, #1
 801121c:	4803      	ldr	r0, [pc, #12]	; (801122c <USBD_LL_Init+0x94>)
 801121e:	f7fa fa75 	bl	800b70c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011222:	2300      	movs	r3, #0
}
 8011224:	4618      	mov	r0, r3
 8011226:	3708      	adds	r7, #8
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	20001df4 	.word	0x20001df4

08011230 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011238:	2300      	movs	r3, #0
 801123a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801123c:	2300      	movs	r3, #0
 801123e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011246:	4618      	mov	r0, r3
 8011248:	f7f9 f963 	bl	800a512 <HAL_PCD_Start>
 801124c:	4603      	mov	r3, r0
 801124e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011250:	7bfb      	ldrb	r3, [r7, #15]
 8011252:	4618      	mov	r0, r3
 8011254:	f000 f942 	bl	80114dc <USBD_Get_USB_Status>
 8011258:	4603      	mov	r3, r0
 801125a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801125c:	7bbb      	ldrb	r3, [r7, #14]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b084      	sub	sp, #16
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
 801126e:	4608      	mov	r0, r1
 8011270:	4611      	mov	r1, r2
 8011272:	461a      	mov	r2, r3
 8011274:	4603      	mov	r3, r0
 8011276:	70fb      	strb	r3, [r7, #3]
 8011278:	460b      	mov	r3, r1
 801127a:	70bb      	strb	r3, [r7, #2]
 801127c:	4613      	mov	r3, r2
 801127e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011280:	2300      	movs	r3, #0
 8011282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011284:	2300      	movs	r3, #0
 8011286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801128e:	78bb      	ldrb	r3, [r7, #2]
 8011290:	883a      	ldrh	r2, [r7, #0]
 8011292:	78f9      	ldrb	r1, [r7, #3]
 8011294:	f7f9 fe34 	bl	800af00 <HAL_PCD_EP_Open>
 8011298:	4603      	mov	r3, r0
 801129a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801129c:	7bfb      	ldrb	r3, [r7, #15]
 801129e:	4618      	mov	r0, r3
 80112a0:	f000 f91c 	bl	80114dc <USBD_Get_USB_Status>
 80112a4:	4603      	mov	r3, r0
 80112a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3710      	adds	r7, #16
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}

080112b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112b2:	b580      	push	{r7, lr}
 80112b4:	b084      	sub	sp, #16
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	6078      	str	r0, [r7, #4]
 80112ba:	460b      	mov	r3, r1
 80112bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112be:	2300      	movs	r3, #0
 80112c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112c2:	2300      	movs	r3, #0
 80112c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112cc:	78fa      	ldrb	r2, [r7, #3]
 80112ce:	4611      	mov	r1, r2
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7f9 fe7d 	bl	800afd0 <HAL_PCD_EP_Close>
 80112d6:	4603      	mov	r3, r0
 80112d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112da:	7bfb      	ldrb	r3, [r7, #15]
 80112dc:	4618      	mov	r0, r3
 80112de:	f000 f8fd 	bl	80114dc <USBD_Get_USB_Status>
 80112e2:	4603      	mov	r3, r0
 80112e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3710      	adds	r7, #16
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b084      	sub	sp, #16
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	460b      	mov	r3, r1
 80112fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112fc:	2300      	movs	r3, #0
 80112fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011300:	2300      	movs	r3, #0
 8011302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801130a:	78fa      	ldrb	r2, [r7, #3]
 801130c:	4611      	mov	r1, r2
 801130e:	4618      	mov	r0, r3
 8011310:	f7f9 ff55 	bl	800b1be <HAL_PCD_EP_SetStall>
 8011314:	4603      	mov	r3, r0
 8011316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011318:	7bfb      	ldrb	r3, [r7, #15]
 801131a:	4618      	mov	r0, r3
 801131c:	f000 f8de 	bl	80114dc <USBD_Get_USB_Status>
 8011320:	4603      	mov	r3, r0
 8011322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011324:	7bbb      	ldrb	r3, [r7, #14]
}
 8011326:	4618      	mov	r0, r3
 8011328:	3710      	adds	r7, #16
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}

0801132e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801132e:	b580      	push	{r7, lr}
 8011330:	b084      	sub	sp, #16
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
 8011336:	460b      	mov	r3, r1
 8011338:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801133a:	2300      	movs	r3, #0
 801133c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801133e:	2300      	movs	r3, #0
 8011340:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011348:	78fa      	ldrb	r2, [r7, #3]
 801134a:	4611      	mov	r1, r2
 801134c:	4618      	mov	r0, r3
 801134e:	f7f9 ff9a 	bl	800b286 <HAL_PCD_EP_ClrStall>
 8011352:	4603      	mov	r3, r0
 8011354:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011356:	7bfb      	ldrb	r3, [r7, #15]
 8011358:	4618      	mov	r0, r3
 801135a:	f000 f8bf 	bl	80114dc <USBD_Get_USB_Status>
 801135e:	4603      	mov	r3, r0
 8011360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011362:	7bbb      	ldrb	r3, [r7, #14]
}
 8011364:	4618      	mov	r0, r3
 8011366:	3710      	adds	r7, #16
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801136c:	b480      	push	{r7}
 801136e:	b085      	sub	sp, #20
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	460b      	mov	r3, r1
 8011376:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801137e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011384:	2b00      	cmp	r3, #0
 8011386:	da0b      	bge.n	80113a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011388:	78fb      	ldrb	r3, [r7, #3]
 801138a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801138e:	68f9      	ldr	r1, [r7, #12]
 8011390:	4613      	mov	r3, r2
 8011392:	00db      	lsls	r3, r3, #3
 8011394:	4413      	add	r3, r2
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	440b      	add	r3, r1
 801139a:	333e      	adds	r3, #62	; 0x3e
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	e00b      	b.n	80113b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80113a0:	78fb      	ldrb	r3, [r7, #3]
 80113a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113a6:	68f9      	ldr	r1, [r7, #12]
 80113a8:	4613      	mov	r3, r2
 80113aa:	00db      	lsls	r3, r3, #3
 80113ac:	4413      	add	r3, r2
 80113ae:	009b      	lsls	r3, r3, #2
 80113b0:	440b      	add	r3, r1
 80113b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80113b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3714      	adds	r7, #20
 80113bc:	46bd      	mov	sp, r7
 80113be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c2:	4770      	bx	lr

080113c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b084      	sub	sp, #16
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	460b      	mov	r3, r1
 80113ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113d4:	2300      	movs	r3, #0
 80113d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113de:	78fa      	ldrb	r2, [r7, #3]
 80113e0:	4611      	mov	r1, r2
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7f9 fd67 	bl	800aeb6 <HAL_PCD_SetAddress>
 80113e8:	4603      	mov	r3, r0
 80113ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113ec:	7bfb      	ldrb	r3, [r7, #15]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f000 f874 	bl	80114dc <USBD_Get_USB_Status>
 80113f4:	4603      	mov	r3, r0
 80113f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3710      	adds	r7, #16
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}

08011402 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011402:	b580      	push	{r7, lr}
 8011404:	b086      	sub	sp, #24
 8011406:	af00      	add	r7, sp, #0
 8011408:	60f8      	str	r0, [r7, #12]
 801140a:	607a      	str	r2, [r7, #4]
 801140c:	603b      	str	r3, [r7, #0]
 801140e:	460b      	mov	r3, r1
 8011410:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011412:	2300      	movs	r3, #0
 8011414:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011416:	2300      	movs	r3, #0
 8011418:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011420:	7af9      	ldrb	r1, [r7, #11]
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	f7f9 fe80 	bl	800b12a <HAL_PCD_EP_Transmit>
 801142a:	4603      	mov	r3, r0
 801142c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801142e:	7dfb      	ldrb	r3, [r7, #23]
 8011430:	4618      	mov	r0, r3
 8011432:	f000 f853 	bl	80114dc <USBD_Get_USB_Status>
 8011436:	4603      	mov	r3, r0
 8011438:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801143a:	7dbb      	ldrb	r3, [r7, #22]
}
 801143c:	4618      	mov	r0, r3
 801143e:	3718      	adds	r7, #24
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b086      	sub	sp, #24
 8011448:	af00      	add	r7, sp, #0
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	607a      	str	r2, [r7, #4]
 801144e:	603b      	str	r3, [r7, #0]
 8011450:	460b      	mov	r3, r1
 8011452:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011454:	2300      	movs	r3, #0
 8011456:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011458:	2300      	movs	r3, #0
 801145a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011462:	7af9      	ldrb	r1, [r7, #11]
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	f7f9 fdfc 	bl	800b064 <HAL_PCD_EP_Receive>
 801146c:	4603      	mov	r3, r0
 801146e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011470:	7dfb      	ldrb	r3, [r7, #23]
 8011472:	4618      	mov	r0, r3
 8011474:	f000 f832 	bl	80114dc <USBD_Get_USB_Status>
 8011478:	4603      	mov	r3, r0
 801147a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801147c:	7dbb      	ldrb	r3, [r7, #22]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3718      	adds	r7, #24
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}

08011486 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011486:	b580      	push	{r7, lr}
 8011488:	b082      	sub	sp, #8
 801148a:	af00      	add	r7, sp, #0
 801148c:	6078      	str	r0, [r7, #4]
 801148e:	460b      	mov	r3, r1
 8011490:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011498:	78fa      	ldrb	r2, [r7, #3]
 801149a:	4611      	mov	r1, r2
 801149c:	4618      	mov	r0, r3
 801149e:	f7f9 fe2c 	bl	800b0fa <HAL_PCD_EP_GetRxCount>
 80114a2:	4603      	mov	r3, r0
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3708      	adds	r7, #8
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80114b4:	4b03      	ldr	r3, [pc, #12]	; (80114c4 <USBD_static_malloc+0x18>)
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	370c      	adds	r7, #12
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	20002300 	.word	0x20002300

080114c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]

}
 80114d0:	bf00      	nop
 80114d2:	370c      	adds	r7, #12
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr

080114dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80114dc:	b480      	push	{r7}
 80114de:	b085      	sub	sp, #20
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	4603      	mov	r3, r0
 80114e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114e6:	2300      	movs	r3, #0
 80114e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80114ea:	79fb      	ldrb	r3, [r7, #7]
 80114ec:	2b03      	cmp	r3, #3
 80114ee:	d817      	bhi.n	8011520 <USBD_Get_USB_Status+0x44>
 80114f0:	a201      	add	r2, pc, #4	; (adr r2, 80114f8 <USBD_Get_USB_Status+0x1c>)
 80114f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f6:	bf00      	nop
 80114f8:	08011509 	.word	0x08011509
 80114fc:	0801150f 	.word	0x0801150f
 8011500:	08011515 	.word	0x08011515
 8011504:	0801151b 	.word	0x0801151b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011508:	2300      	movs	r3, #0
 801150a:	73fb      	strb	r3, [r7, #15]
    break;
 801150c:	e00b      	b.n	8011526 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801150e:	2303      	movs	r3, #3
 8011510:	73fb      	strb	r3, [r7, #15]
    break;
 8011512:	e008      	b.n	8011526 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011514:	2301      	movs	r3, #1
 8011516:	73fb      	strb	r3, [r7, #15]
    break;
 8011518:	e005      	b.n	8011526 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801151a:	2303      	movs	r3, #3
 801151c:	73fb      	strb	r3, [r7, #15]
    break;
 801151e:	e002      	b.n	8011526 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011520:	2303      	movs	r3, #3
 8011522:	73fb      	strb	r3, [r7, #15]
    break;
 8011524:	bf00      	nop
  }
  return usb_status;
 8011526:	7bfb      	ldrb	r3, [r7, #15]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3714      	adds	r7, #20
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr

08011534 <calloc>:
 8011534:	4b02      	ldr	r3, [pc, #8]	; (8011540 <calloc+0xc>)
 8011536:	460a      	mov	r2, r1
 8011538:	4601      	mov	r1, r0
 801153a:	6818      	ldr	r0, [r3, #0]
 801153c:	f000 ba3a 	b.w	80119b4 <_calloc_r>
 8011540:	200004d0 	.word	0x200004d0

08011544 <__errno>:
 8011544:	4b01      	ldr	r3, [pc, #4]	; (801154c <__errno+0x8>)
 8011546:	6818      	ldr	r0, [r3, #0]
 8011548:	4770      	bx	lr
 801154a:	bf00      	nop
 801154c:	200004d0 	.word	0x200004d0

08011550 <__sflush_r>:
 8011550:	898a      	ldrh	r2, [r1, #12]
 8011552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011556:	4605      	mov	r5, r0
 8011558:	0710      	lsls	r0, r2, #28
 801155a:	460c      	mov	r4, r1
 801155c:	d458      	bmi.n	8011610 <__sflush_r+0xc0>
 801155e:	684b      	ldr	r3, [r1, #4]
 8011560:	2b00      	cmp	r3, #0
 8011562:	dc05      	bgt.n	8011570 <__sflush_r+0x20>
 8011564:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011566:	2b00      	cmp	r3, #0
 8011568:	dc02      	bgt.n	8011570 <__sflush_r+0x20>
 801156a:	2000      	movs	r0, #0
 801156c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011572:	2e00      	cmp	r6, #0
 8011574:	d0f9      	beq.n	801156a <__sflush_r+0x1a>
 8011576:	2300      	movs	r3, #0
 8011578:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801157c:	682f      	ldr	r7, [r5, #0]
 801157e:	602b      	str	r3, [r5, #0]
 8011580:	d032      	beq.n	80115e8 <__sflush_r+0x98>
 8011582:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011584:	89a3      	ldrh	r3, [r4, #12]
 8011586:	075a      	lsls	r2, r3, #29
 8011588:	d505      	bpl.n	8011596 <__sflush_r+0x46>
 801158a:	6863      	ldr	r3, [r4, #4]
 801158c:	1ac0      	subs	r0, r0, r3
 801158e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011590:	b10b      	cbz	r3, 8011596 <__sflush_r+0x46>
 8011592:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011594:	1ac0      	subs	r0, r0, r3
 8011596:	2300      	movs	r3, #0
 8011598:	4602      	mov	r2, r0
 801159a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801159c:	6a21      	ldr	r1, [r4, #32]
 801159e:	4628      	mov	r0, r5
 80115a0:	47b0      	blx	r6
 80115a2:	1c43      	adds	r3, r0, #1
 80115a4:	89a3      	ldrh	r3, [r4, #12]
 80115a6:	d106      	bne.n	80115b6 <__sflush_r+0x66>
 80115a8:	6829      	ldr	r1, [r5, #0]
 80115aa:	291d      	cmp	r1, #29
 80115ac:	d82c      	bhi.n	8011608 <__sflush_r+0xb8>
 80115ae:	4a2a      	ldr	r2, [pc, #168]	; (8011658 <__sflush_r+0x108>)
 80115b0:	40ca      	lsrs	r2, r1
 80115b2:	07d6      	lsls	r6, r2, #31
 80115b4:	d528      	bpl.n	8011608 <__sflush_r+0xb8>
 80115b6:	2200      	movs	r2, #0
 80115b8:	6062      	str	r2, [r4, #4]
 80115ba:	04d9      	lsls	r1, r3, #19
 80115bc:	6922      	ldr	r2, [r4, #16]
 80115be:	6022      	str	r2, [r4, #0]
 80115c0:	d504      	bpl.n	80115cc <__sflush_r+0x7c>
 80115c2:	1c42      	adds	r2, r0, #1
 80115c4:	d101      	bne.n	80115ca <__sflush_r+0x7a>
 80115c6:	682b      	ldr	r3, [r5, #0]
 80115c8:	b903      	cbnz	r3, 80115cc <__sflush_r+0x7c>
 80115ca:	6560      	str	r0, [r4, #84]	; 0x54
 80115cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115ce:	602f      	str	r7, [r5, #0]
 80115d0:	2900      	cmp	r1, #0
 80115d2:	d0ca      	beq.n	801156a <__sflush_r+0x1a>
 80115d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115d8:	4299      	cmp	r1, r3
 80115da:	d002      	beq.n	80115e2 <__sflush_r+0x92>
 80115dc:	4628      	mov	r0, r5
 80115de:	f000 f9ff 	bl	80119e0 <_free_r>
 80115e2:	2000      	movs	r0, #0
 80115e4:	6360      	str	r0, [r4, #52]	; 0x34
 80115e6:	e7c1      	b.n	801156c <__sflush_r+0x1c>
 80115e8:	6a21      	ldr	r1, [r4, #32]
 80115ea:	2301      	movs	r3, #1
 80115ec:	4628      	mov	r0, r5
 80115ee:	47b0      	blx	r6
 80115f0:	1c41      	adds	r1, r0, #1
 80115f2:	d1c7      	bne.n	8011584 <__sflush_r+0x34>
 80115f4:	682b      	ldr	r3, [r5, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d0c4      	beq.n	8011584 <__sflush_r+0x34>
 80115fa:	2b1d      	cmp	r3, #29
 80115fc:	d001      	beq.n	8011602 <__sflush_r+0xb2>
 80115fe:	2b16      	cmp	r3, #22
 8011600:	d101      	bne.n	8011606 <__sflush_r+0xb6>
 8011602:	602f      	str	r7, [r5, #0]
 8011604:	e7b1      	b.n	801156a <__sflush_r+0x1a>
 8011606:	89a3      	ldrh	r3, [r4, #12]
 8011608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801160c:	81a3      	strh	r3, [r4, #12]
 801160e:	e7ad      	b.n	801156c <__sflush_r+0x1c>
 8011610:	690f      	ldr	r7, [r1, #16]
 8011612:	2f00      	cmp	r7, #0
 8011614:	d0a9      	beq.n	801156a <__sflush_r+0x1a>
 8011616:	0793      	lsls	r3, r2, #30
 8011618:	680e      	ldr	r6, [r1, #0]
 801161a:	bf08      	it	eq
 801161c:	694b      	ldreq	r3, [r1, #20]
 801161e:	600f      	str	r7, [r1, #0]
 8011620:	bf18      	it	ne
 8011622:	2300      	movne	r3, #0
 8011624:	eba6 0807 	sub.w	r8, r6, r7
 8011628:	608b      	str	r3, [r1, #8]
 801162a:	f1b8 0f00 	cmp.w	r8, #0
 801162e:	dd9c      	ble.n	801156a <__sflush_r+0x1a>
 8011630:	6a21      	ldr	r1, [r4, #32]
 8011632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011634:	4643      	mov	r3, r8
 8011636:	463a      	mov	r2, r7
 8011638:	4628      	mov	r0, r5
 801163a:	47b0      	blx	r6
 801163c:	2800      	cmp	r0, #0
 801163e:	dc06      	bgt.n	801164e <__sflush_r+0xfe>
 8011640:	89a3      	ldrh	r3, [r4, #12]
 8011642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011646:	81a3      	strh	r3, [r4, #12]
 8011648:	f04f 30ff 	mov.w	r0, #4294967295
 801164c:	e78e      	b.n	801156c <__sflush_r+0x1c>
 801164e:	4407      	add	r7, r0
 8011650:	eba8 0800 	sub.w	r8, r8, r0
 8011654:	e7e9      	b.n	801162a <__sflush_r+0xda>
 8011656:	bf00      	nop
 8011658:	20400001 	.word	0x20400001

0801165c <_fflush_r>:
 801165c:	b538      	push	{r3, r4, r5, lr}
 801165e:	690b      	ldr	r3, [r1, #16]
 8011660:	4605      	mov	r5, r0
 8011662:	460c      	mov	r4, r1
 8011664:	b913      	cbnz	r3, 801166c <_fflush_r+0x10>
 8011666:	2500      	movs	r5, #0
 8011668:	4628      	mov	r0, r5
 801166a:	bd38      	pop	{r3, r4, r5, pc}
 801166c:	b118      	cbz	r0, 8011676 <_fflush_r+0x1a>
 801166e:	6983      	ldr	r3, [r0, #24]
 8011670:	b90b      	cbnz	r3, 8011676 <_fflush_r+0x1a>
 8011672:	f000 f899 	bl	80117a8 <__sinit>
 8011676:	4b14      	ldr	r3, [pc, #80]	; (80116c8 <_fflush_r+0x6c>)
 8011678:	429c      	cmp	r4, r3
 801167a:	d11b      	bne.n	80116b4 <_fflush_r+0x58>
 801167c:	686c      	ldr	r4, [r5, #4]
 801167e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d0ef      	beq.n	8011666 <_fflush_r+0xa>
 8011686:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011688:	07d0      	lsls	r0, r2, #31
 801168a:	d404      	bmi.n	8011696 <_fflush_r+0x3a>
 801168c:	0599      	lsls	r1, r3, #22
 801168e:	d402      	bmi.n	8011696 <_fflush_r+0x3a>
 8011690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011692:	f000 f94c 	bl	801192e <__retarget_lock_acquire_recursive>
 8011696:	4628      	mov	r0, r5
 8011698:	4621      	mov	r1, r4
 801169a:	f7ff ff59 	bl	8011550 <__sflush_r>
 801169e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116a0:	07da      	lsls	r2, r3, #31
 80116a2:	4605      	mov	r5, r0
 80116a4:	d4e0      	bmi.n	8011668 <_fflush_r+0xc>
 80116a6:	89a3      	ldrh	r3, [r4, #12]
 80116a8:	059b      	lsls	r3, r3, #22
 80116aa:	d4dd      	bmi.n	8011668 <_fflush_r+0xc>
 80116ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116ae:	f000 f93f 	bl	8011930 <__retarget_lock_release_recursive>
 80116b2:	e7d9      	b.n	8011668 <_fflush_r+0xc>
 80116b4:	4b05      	ldr	r3, [pc, #20]	; (80116cc <_fflush_r+0x70>)
 80116b6:	429c      	cmp	r4, r3
 80116b8:	d101      	bne.n	80116be <_fflush_r+0x62>
 80116ba:	68ac      	ldr	r4, [r5, #8]
 80116bc:	e7df      	b.n	801167e <_fflush_r+0x22>
 80116be:	4b04      	ldr	r3, [pc, #16]	; (80116d0 <_fflush_r+0x74>)
 80116c0:	429c      	cmp	r4, r3
 80116c2:	bf08      	it	eq
 80116c4:	68ec      	ldreq	r4, [r5, #12]
 80116c6:	e7da      	b.n	801167e <_fflush_r+0x22>
 80116c8:	08016ec4 	.word	0x08016ec4
 80116cc:	08016ee4 	.word	0x08016ee4
 80116d0:	08016ea4 	.word	0x08016ea4

080116d4 <fflush>:
 80116d4:	4601      	mov	r1, r0
 80116d6:	b920      	cbnz	r0, 80116e2 <fflush+0xe>
 80116d8:	4b04      	ldr	r3, [pc, #16]	; (80116ec <fflush+0x18>)
 80116da:	4905      	ldr	r1, [pc, #20]	; (80116f0 <fflush+0x1c>)
 80116dc:	6818      	ldr	r0, [r3, #0]
 80116de:	f000 b8e1 	b.w	80118a4 <_fwalk_reent>
 80116e2:	4b04      	ldr	r3, [pc, #16]	; (80116f4 <fflush+0x20>)
 80116e4:	6818      	ldr	r0, [r3, #0]
 80116e6:	f7ff bfb9 	b.w	801165c <_fflush_r>
 80116ea:	bf00      	nop
 80116ec:	08016f04 	.word	0x08016f04
 80116f0:	0801165d 	.word	0x0801165d
 80116f4:	200004d0 	.word	0x200004d0

080116f8 <std>:
 80116f8:	2300      	movs	r3, #0
 80116fa:	b510      	push	{r4, lr}
 80116fc:	4604      	mov	r4, r0
 80116fe:	e9c0 3300 	strd	r3, r3, [r0]
 8011702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011706:	6083      	str	r3, [r0, #8]
 8011708:	8181      	strh	r1, [r0, #12]
 801170a:	6643      	str	r3, [r0, #100]	; 0x64
 801170c:	81c2      	strh	r2, [r0, #14]
 801170e:	6183      	str	r3, [r0, #24]
 8011710:	4619      	mov	r1, r3
 8011712:	2208      	movs	r2, #8
 8011714:	305c      	adds	r0, #92	; 0x5c
 8011716:	f000 f945 	bl	80119a4 <memset>
 801171a:	4b05      	ldr	r3, [pc, #20]	; (8011730 <std+0x38>)
 801171c:	6263      	str	r3, [r4, #36]	; 0x24
 801171e:	4b05      	ldr	r3, [pc, #20]	; (8011734 <std+0x3c>)
 8011720:	62a3      	str	r3, [r4, #40]	; 0x28
 8011722:	4b05      	ldr	r3, [pc, #20]	; (8011738 <std+0x40>)
 8011724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011726:	4b05      	ldr	r3, [pc, #20]	; (801173c <std+0x44>)
 8011728:	6224      	str	r4, [r4, #32]
 801172a:	6323      	str	r3, [r4, #48]	; 0x30
 801172c:	bd10      	pop	{r4, pc}
 801172e:	bf00      	nop
 8011730:	08012a1d 	.word	0x08012a1d
 8011734:	08012a3f 	.word	0x08012a3f
 8011738:	08012a77 	.word	0x08012a77
 801173c:	08012a9b 	.word	0x08012a9b

08011740 <_cleanup_r>:
 8011740:	4901      	ldr	r1, [pc, #4]	; (8011748 <_cleanup_r+0x8>)
 8011742:	f000 b8af 	b.w	80118a4 <_fwalk_reent>
 8011746:	bf00      	nop
 8011748:	0801165d 	.word	0x0801165d

0801174c <__sfmoreglue>:
 801174c:	b570      	push	{r4, r5, r6, lr}
 801174e:	2268      	movs	r2, #104	; 0x68
 8011750:	1e4d      	subs	r5, r1, #1
 8011752:	4355      	muls	r5, r2
 8011754:	460e      	mov	r6, r1
 8011756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801175a:	f000 f9ad 	bl	8011ab8 <_malloc_r>
 801175e:	4604      	mov	r4, r0
 8011760:	b140      	cbz	r0, 8011774 <__sfmoreglue+0x28>
 8011762:	2100      	movs	r1, #0
 8011764:	e9c0 1600 	strd	r1, r6, [r0]
 8011768:	300c      	adds	r0, #12
 801176a:	60a0      	str	r0, [r4, #8]
 801176c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011770:	f000 f918 	bl	80119a4 <memset>
 8011774:	4620      	mov	r0, r4
 8011776:	bd70      	pop	{r4, r5, r6, pc}

08011778 <__sfp_lock_acquire>:
 8011778:	4801      	ldr	r0, [pc, #4]	; (8011780 <__sfp_lock_acquire+0x8>)
 801177a:	f000 b8d8 	b.w	801192e <__retarget_lock_acquire_recursive>
 801177e:	bf00      	nop
 8011780:	20002521 	.word	0x20002521

08011784 <__sfp_lock_release>:
 8011784:	4801      	ldr	r0, [pc, #4]	; (801178c <__sfp_lock_release+0x8>)
 8011786:	f000 b8d3 	b.w	8011930 <__retarget_lock_release_recursive>
 801178a:	bf00      	nop
 801178c:	20002521 	.word	0x20002521

08011790 <__sinit_lock_acquire>:
 8011790:	4801      	ldr	r0, [pc, #4]	; (8011798 <__sinit_lock_acquire+0x8>)
 8011792:	f000 b8cc 	b.w	801192e <__retarget_lock_acquire_recursive>
 8011796:	bf00      	nop
 8011798:	20002522 	.word	0x20002522

0801179c <__sinit_lock_release>:
 801179c:	4801      	ldr	r0, [pc, #4]	; (80117a4 <__sinit_lock_release+0x8>)
 801179e:	f000 b8c7 	b.w	8011930 <__retarget_lock_release_recursive>
 80117a2:	bf00      	nop
 80117a4:	20002522 	.word	0x20002522

080117a8 <__sinit>:
 80117a8:	b510      	push	{r4, lr}
 80117aa:	4604      	mov	r4, r0
 80117ac:	f7ff fff0 	bl	8011790 <__sinit_lock_acquire>
 80117b0:	69a3      	ldr	r3, [r4, #24]
 80117b2:	b11b      	cbz	r3, 80117bc <__sinit+0x14>
 80117b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117b8:	f7ff bff0 	b.w	801179c <__sinit_lock_release>
 80117bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80117c0:	6523      	str	r3, [r4, #80]	; 0x50
 80117c2:	4b13      	ldr	r3, [pc, #76]	; (8011810 <__sinit+0x68>)
 80117c4:	4a13      	ldr	r2, [pc, #76]	; (8011814 <__sinit+0x6c>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80117ca:	42a3      	cmp	r3, r4
 80117cc:	bf04      	itt	eq
 80117ce:	2301      	moveq	r3, #1
 80117d0:	61a3      	streq	r3, [r4, #24]
 80117d2:	4620      	mov	r0, r4
 80117d4:	f000 f820 	bl	8011818 <__sfp>
 80117d8:	6060      	str	r0, [r4, #4]
 80117da:	4620      	mov	r0, r4
 80117dc:	f000 f81c 	bl	8011818 <__sfp>
 80117e0:	60a0      	str	r0, [r4, #8]
 80117e2:	4620      	mov	r0, r4
 80117e4:	f000 f818 	bl	8011818 <__sfp>
 80117e8:	2200      	movs	r2, #0
 80117ea:	60e0      	str	r0, [r4, #12]
 80117ec:	2104      	movs	r1, #4
 80117ee:	6860      	ldr	r0, [r4, #4]
 80117f0:	f7ff ff82 	bl	80116f8 <std>
 80117f4:	68a0      	ldr	r0, [r4, #8]
 80117f6:	2201      	movs	r2, #1
 80117f8:	2109      	movs	r1, #9
 80117fa:	f7ff ff7d 	bl	80116f8 <std>
 80117fe:	68e0      	ldr	r0, [r4, #12]
 8011800:	2202      	movs	r2, #2
 8011802:	2112      	movs	r1, #18
 8011804:	f7ff ff78 	bl	80116f8 <std>
 8011808:	2301      	movs	r3, #1
 801180a:	61a3      	str	r3, [r4, #24]
 801180c:	e7d2      	b.n	80117b4 <__sinit+0xc>
 801180e:	bf00      	nop
 8011810:	08016f04 	.word	0x08016f04
 8011814:	08011741 	.word	0x08011741

08011818 <__sfp>:
 8011818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801181a:	4607      	mov	r7, r0
 801181c:	f7ff ffac 	bl	8011778 <__sfp_lock_acquire>
 8011820:	4b1e      	ldr	r3, [pc, #120]	; (801189c <__sfp+0x84>)
 8011822:	681e      	ldr	r6, [r3, #0]
 8011824:	69b3      	ldr	r3, [r6, #24]
 8011826:	b913      	cbnz	r3, 801182e <__sfp+0x16>
 8011828:	4630      	mov	r0, r6
 801182a:	f7ff ffbd 	bl	80117a8 <__sinit>
 801182e:	3648      	adds	r6, #72	; 0x48
 8011830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011834:	3b01      	subs	r3, #1
 8011836:	d503      	bpl.n	8011840 <__sfp+0x28>
 8011838:	6833      	ldr	r3, [r6, #0]
 801183a:	b30b      	cbz	r3, 8011880 <__sfp+0x68>
 801183c:	6836      	ldr	r6, [r6, #0]
 801183e:	e7f7      	b.n	8011830 <__sfp+0x18>
 8011840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011844:	b9d5      	cbnz	r5, 801187c <__sfp+0x64>
 8011846:	4b16      	ldr	r3, [pc, #88]	; (80118a0 <__sfp+0x88>)
 8011848:	60e3      	str	r3, [r4, #12]
 801184a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801184e:	6665      	str	r5, [r4, #100]	; 0x64
 8011850:	f000 f86c 	bl	801192c <__retarget_lock_init_recursive>
 8011854:	f7ff ff96 	bl	8011784 <__sfp_lock_release>
 8011858:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801185c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011860:	6025      	str	r5, [r4, #0]
 8011862:	61a5      	str	r5, [r4, #24]
 8011864:	2208      	movs	r2, #8
 8011866:	4629      	mov	r1, r5
 8011868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801186c:	f000 f89a 	bl	80119a4 <memset>
 8011870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011878:	4620      	mov	r0, r4
 801187a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801187c:	3468      	adds	r4, #104	; 0x68
 801187e:	e7d9      	b.n	8011834 <__sfp+0x1c>
 8011880:	2104      	movs	r1, #4
 8011882:	4638      	mov	r0, r7
 8011884:	f7ff ff62 	bl	801174c <__sfmoreglue>
 8011888:	4604      	mov	r4, r0
 801188a:	6030      	str	r0, [r6, #0]
 801188c:	2800      	cmp	r0, #0
 801188e:	d1d5      	bne.n	801183c <__sfp+0x24>
 8011890:	f7ff ff78 	bl	8011784 <__sfp_lock_release>
 8011894:	230c      	movs	r3, #12
 8011896:	603b      	str	r3, [r7, #0]
 8011898:	e7ee      	b.n	8011878 <__sfp+0x60>
 801189a:	bf00      	nop
 801189c:	08016f04 	.word	0x08016f04
 80118a0:	ffff0001 	.word	0xffff0001

080118a4 <_fwalk_reent>:
 80118a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118a8:	4606      	mov	r6, r0
 80118aa:	4688      	mov	r8, r1
 80118ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80118b0:	2700      	movs	r7, #0
 80118b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80118b6:	f1b9 0901 	subs.w	r9, r9, #1
 80118ba:	d505      	bpl.n	80118c8 <_fwalk_reent+0x24>
 80118bc:	6824      	ldr	r4, [r4, #0]
 80118be:	2c00      	cmp	r4, #0
 80118c0:	d1f7      	bne.n	80118b2 <_fwalk_reent+0xe>
 80118c2:	4638      	mov	r0, r7
 80118c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118c8:	89ab      	ldrh	r3, [r5, #12]
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	d907      	bls.n	80118de <_fwalk_reent+0x3a>
 80118ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118d2:	3301      	adds	r3, #1
 80118d4:	d003      	beq.n	80118de <_fwalk_reent+0x3a>
 80118d6:	4629      	mov	r1, r5
 80118d8:	4630      	mov	r0, r6
 80118da:	47c0      	blx	r8
 80118dc:	4307      	orrs	r7, r0
 80118de:	3568      	adds	r5, #104	; 0x68
 80118e0:	e7e9      	b.n	80118b6 <_fwalk_reent+0x12>
	...

080118e4 <__libc_init_array>:
 80118e4:	b570      	push	{r4, r5, r6, lr}
 80118e6:	4d0d      	ldr	r5, [pc, #52]	; (801191c <__libc_init_array+0x38>)
 80118e8:	4c0d      	ldr	r4, [pc, #52]	; (8011920 <__libc_init_array+0x3c>)
 80118ea:	1b64      	subs	r4, r4, r5
 80118ec:	10a4      	asrs	r4, r4, #2
 80118ee:	2600      	movs	r6, #0
 80118f0:	42a6      	cmp	r6, r4
 80118f2:	d109      	bne.n	8011908 <__libc_init_array+0x24>
 80118f4:	4d0b      	ldr	r5, [pc, #44]	; (8011924 <__libc_init_array+0x40>)
 80118f6:	4c0c      	ldr	r4, [pc, #48]	; (8011928 <__libc_init_array+0x44>)
 80118f8:	f004 fe20 	bl	801653c <_init>
 80118fc:	1b64      	subs	r4, r4, r5
 80118fe:	10a4      	asrs	r4, r4, #2
 8011900:	2600      	movs	r6, #0
 8011902:	42a6      	cmp	r6, r4
 8011904:	d105      	bne.n	8011912 <__libc_init_array+0x2e>
 8011906:	bd70      	pop	{r4, r5, r6, pc}
 8011908:	f855 3b04 	ldr.w	r3, [r5], #4
 801190c:	4798      	blx	r3
 801190e:	3601      	adds	r6, #1
 8011910:	e7ee      	b.n	80118f0 <__libc_init_array+0xc>
 8011912:	f855 3b04 	ldr.w	r3, [r5], #4
 8011916:	4798      	blx	r3
 8011918:	3601      	adds	r6, #1
 801191a:	e7f2      	b.n	8011902 <__libc_init_array+0x1e>
 801191c:	080173c8 	.word	0x080173c8
 8011920:	080173c8 	.word	0x080173c8
 8011924:	080173c8 	.word	0x080173c8
 8011928:	080173cc 	.word	0x080173cc

0801192c <__retarget_lock_init_recursive>:
 801192c:	4770      	bx	lr

0801192e <__retarget_lock_acquire_recursive>:
 801192e:	4770      	bx	lr

08011930 <__retarget_lock_release_recursive>:
 8011930:	4770      	bx	lr
	...

08011934 <malloc>:
 8011934:	4b02      	ldr	r3, [pc, #8]	; (8011940 <malloc+0xc>)
 8011936:	4601      	mov	r1, r0
 8011938:	6818      	ldr	r0, [r3, #0]
 801193a:	f000 b8bd 	b.w	8011ab8 <_malloc_r>
 801193e:	bf00      	nop
 8011940:	200004d0 	.word	0x200004d0

08011944 <free>:
 8011944:	4b02      	ldr	r3, [pc, #8]	; (8011950 <free+0xc>)
 8011946:	4601      	mov	r1, r0
 8011948:	6818      	ldr	r0, [r3, #0]
 801194a:	f000 b849 	b.w	80119e0 <_free_r>
 801194e:	bf00      	nop
 8011950:	200004d0 	.word	0x200004d0

08011954 <memcpy>:
 8011954:	440a      	add	r2, r1
 8011956:	4291      	cmp	r1, r2
 8011958:	f100 33ff 	add.w	r3, r0, #4294967295
 801195c:	d100      	bne.n	8011960 <memcpy+0xc>
 801195e:	4770      	bx	lr
 8011960:	b510      	push	{r4, lr}
 8011962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011966:	f803 4f01 	strb.w	r4, [r3, #1]!
 801196a:	4291      	cmp	r1, r2
 801196c:	d1f9      	bne.n	8011962 <memcpy+0xe>
 801196e:	bd10      	pop	{r4, pc}

08011970 <memmove>:
 8011970:	4288      	cmp	r0, r1
 8011972:	b510      	push	{r4, lr}
 8011974:	eb01 0402 	add.w	r4, r1, r2
 8011978:	d902      	bls.n	8011980 <memmove+0x10>
 801197a:	4284      	cmp	r4, r0
 801197c:	4623      	mov	r3, r4
 801197e:	d807      	bhi.n	8011990 <memmove+0x20>
 8011980:	1e43      	subs	r3, r0, #1
 8011982:	42a1      	cmp	r1, r4
 8011984:	d008      	beq.n	8011998 <memmove+0x28>
 8011986:	f811 2b01 	ldrb.w	r2, [r1], #1
 801198a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801198e:	e7f8      	b.n	8011982 <memmove+0x12>
 8011990:	4402      	add	r2, r0
 8011992:	4601      	mov	r1, r0
 8011994:	428a      	cmp	r2, r1
 8011996:	d100      	bne.n	801199a <memmove+0x2a>
 8011998:	bd10      	pop	{r4, pc}
 801199a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801199e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119a2:	e7f7      	b.n	8011994 <memmove+0x24>

080119a4 <memset>:
 80119a4:	4402      	add	r2, r0
 80119a6:	4603      	mov	r3, r0
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d100      	bne.n	80119ae <memset+0xa>
 80119ac:	4770      	bx	lr
 80119ae:	f803 1b01 	strb.w	r1, [r3], #1
 80119b2:	e7f9      	b.n	80119a8 <memset+0x4>

080119b4 <_calloc_r>:
 80119b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119b6:	fba1 2402 	umull	r2, r4, r1, r2
 80119ba:	b94c      	cbnz	r4, 80119d0 <_calloc_r+0x1c>
 80119bc:	4611      	mov	r1, r2
 80119be:	9201      	str	r2, [sp, #4]
 80119c0:	f000 f87a 	bl	8011ab8 <_malloc_r>
 80119c4:	9a01      	ldr	r2, [sp, #4]
 80119c6:	4605      	mov	r5, r0
 80119c8:	b930      	cbnz	r0, 80119d8 <_calloc_r+0x24>
 80119ca:	4628      	mov	r0, r5
 80119cc:	b003      	add	sp, #12
 80119ce:	bd30      	pop	{r4, r5, pc}
 80119d0:	220c      	movs	r2, #12
 80119d2:	6002      	str	r2, [r0, #0]
 80119d4:	2500      	movs	r5, #0
 80119d6:	e7f8      	b.n	80119ca <_calloc_r+0x16>
 80119d8:	4621      	mov	r1, r4
 80119da:	f7ff ffe3 	bl	80119a4 <memset>
 80119de:	e7f4      	b.n	80119ca <_calloc_r+0x16>

080119e0 <_free_r>:
 80119e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119e2:	2900      	cmp	r1, #0
 80119e4:	d044      	beq.n	8011a70 <_free_r+0x90>
 80119e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119ea:	9001      	str	r0, [sp, #4]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f1a1 0404 	sub.w	r4, r1, #4
 80119f2:	bfb8      	it	lt
 80119f4:	18e4      	addlt	r4, r4, r3
 80119f6:	f003 fa97 	bl	8014f28 <__malloc_lock>
 80119fa:	4a1e      	ldr	r2, [pc, #120]	; (8011a74 <_free_r+0x94>)
 80119fc:	9801      	ldr	r0, [sp, #4]
 80119fe:	6813      	ldr	r3, [r2, #0]
 8011a00:	b933      	cbnz	r3, 8011a10 <_free_r+0x30>
 8011a02:	6063      	str	r3, [r4, #4]
 8011a04:	6014      	str	r4, [r2, #0]
 8011a06:	b003      	add	sp, #12
 8011a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a0c:	f003 ba92 	b.w	8014f34 <__malloc_unlock>
 8011a10:	42a3      	cmp	r3, r4
 8011a12:	d908      	bls.n	8011a26 <_free_r+0x46>
 8011a14:	6825      	ldr	r5, [r4, #0]
 8011a16:	1961      	adds	r1, r4, r5
 8011a18:	428b      	cmp	r3, r1
 8011a1a:	bf01      	itttt	eq
 8011a1c:	6819      	ldreq	r1, [r3, #0]
 8011a1e:	685b      	ldreq	r3, [r3, #4]
 8011a20:	1949      	addeq	r1, r1, r5
 8011a22:	6021      	streq	r1, [r4, #0]
 8011a24:	e7ed      	b.n	8011a02 <_free_r+0x22>
 8011a26:	461a      	mov	r2, r3
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	b10b      	cbz	r3, 8011a30 <_free_r+0x50>
 8011a2c:	42a3      	cmp	r3, r4
 8011a2e:	d9fa      	bls.n	8011a26 <_free_r+0x46>
 8011a30:	6811      	ldr	r1, [r2, #0]
 8011a32:	1855      	adds	r5, r2, r1
 8011a34:	42a5      	cmp	r5, r4
 8011a36:	d10b      	bne.n	8011a50 <_free_r+0x70>
 8011a38:	6824      	ldr	r4, [r4, #0]
 8011a3a:	4421      	add	r1, r4
 8011a3c:	1854      	adds	r4, r2, r1
 8011a3e:	42a3      	cmp	r3, r4
 8011a40:	6011      	str	r1, [r2, #0]
 8011a42:	d1e0      	bne.n	8011a06 <_free_r+0x26>
 8011a44:	681c      	ldr	r4, [r3, #0]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	6053      	str	r3, [r2, #4]
 8011a4a:	4421      	add	r1, r4
 8011a4c:	6011      	str	r1, [r2, #0]
 8011a4e:	e7da      	b.n	8011a06 <_free_r+0x26>
 8011a50:	d902      	bls.n	8011a58 <_free_r+0x78>
 8011a52:	230c      	movs	r3, #12
 8011a54:	6003      	str	r3, [r0, #0]
 8011a56:	e7d6      	b.n	8011a06 <_free_r+0x26>
 8011a58:	6825      	ldr	r5, [r4, #0]
 8011a5a:	1961      	adds	r1, r4, r5
 8011a5c:	428b      	cmp	r3, r1
 8011a5e:	bf04      	itt	eq
 8011a60:	6819      	ldreq	r1, [r3, #0]
 8011a62:	685b      	ldreq	r3, [r3, #4]
 8011a64:	6063      	str	r3, [r4, #4]
 8011a66:	bf04      	itt	eq
 8011a68:	1949      	addeq	r1, r1, r5
 8011a6a:	6021      	streq	r1, [r4, #0]
 8011a6c:	6054      	str	r4, [r2, #4]
 8011a6e:	e7ca      	b.n	8011a06 <_free_r+0x26>
 8011a70:	b003      	add	sp, #12
 8011a72:	bd30      	pop	{r4, r5, pc}
 8011a74:	20002524 	.word	0x20002524

08011a78 <sbrk_aligned>:
 8011a78:	b570      	push	{r4, r5, r6, lr}
 8011a7a:	4e0e      	ldr	r6, [pc, #56]	; (8011ab4 <sbrk_aligned+0x3c>)
 8011a7c:	460c      	mov	r4, r1
 8011a7e:	6831      	ldr	r1, [r6, #0]
 8011a80:	4605      	mov	r5, r0
 8011a82:	b911      	cbnz	r1, 8011a8a <sbrk_aligned+0x12>
 8011a84:	f000 ff94 	bl	80129b0 <_sbrk_r>
 8011a88:	6030      	str	r0, [r6, #0]
 8011a8a:	4621      	mov	r1, r4
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	f000 ff8f 	bl	80129b0 <_sbrk_r>
 8011a92:	1c43      	adds	r3, r0, #1
 8011a94:	d00a      	beq.n	8011aac <sbrk_aligned+0x34>
 8011a96:	1cc4      	adds	r4, r0, #3
 8011a98:	f024 0403 	bic.w	r4, r4, #3
 8011a9c:	42a0      	cmp	r0, r4
 8011a9e:	d007      	beq.n	8011ab0 <sbrk_aligned+0x38>
 8011aa0:	1a21      	subs	r1, r4, r0
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	f000 ff84 	bl	80129b0 <_sbrk_r>
 8011aa8:	3001      	adds	r0, #1
 8011aaa:	d101      	bne.n	8011ab0 <sbrk_aligned+0x38>
 8011aac:	f04f 34ff 	mov.w	r4, #4294967295
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	bd70      	pop	{r4, r5, r6, pc}
 8011ab4:	20002528 	.word	0x20002528

08011ab8 <_malloc_r>:
 8011ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011abc:	1ccd      	adds	r5, r1, #3
 8011abe:	f025 0503 	bic.w	r5, r5, #3
 8011ac2:	3508      	adds	r5, #8
 8011ac4:	2d0c      	cmp	r5, #12
 8011ac6:	bf38      	it	cc
 8011ac8:	250c      	movcc	r5, #12
 8011aca:	2d00      	cmp	r5, #0
 8011acc:	4607      	mov	r7, r0
 8011ace:	db01      	blt.n	8011ad4 <_malloc_r+0x1c>
 8011ad0:	42a9      	cmp	r1, r5
 8011ad2:	d905      	bls.n	8011ae0 <_malloc_r+0x28>
 8011ad4:	230c      	movs	r3, #12
 8011ad6:	603b      	str	r3, [r7, #0]
 8011ad8:	2600      	movs	r6, #0
 8011ada:	4630      	mov	r0, r6
 8011adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae0:	4e2e      	ldr	r6, [pc, #184]	; (8011b9c <_malloc_r+0xe4>)
 8011ae2:	f003 fa21 	bl	8014f28 <__malloc_lock>
 8011ae6:	6833      	ldr	r3, [r6, #0]
 8011ae8:	461c      	mov	r4, r3
 8011aea:	bb34      	cbnz	r4, 8011b3a <_malloc_r+0x82>
 8011aec:	4629      	mov	r1, r5
 8011aee:	4638      	mov	r0, r7
 8011af0:	f7ff ffc2 	bl	8011a78 <sbrk_aligned>
 8011af4:	1c43      	adds	r3, r0, #1
 8011af6:	4604      	mov	r4, r0
 8011af8:	d14d      	bne.n	8011b96 <_malloc_r+0xde>
 8011afa:	6834      	ldr	r4, [r6, #0]
 8011afc:	4626      	mov	r6, r4
 8011afe:	2e00      	cmp	r6, #0
 8011b00:	d140      	bne.n	8011b84 <_malloc_r+0xcc>
 8011b02:	6823      	ldr	r3, [r4, #0]
 8011b04:	4631      	mov	r1, r6
 8011b06:	4638      	mov	r0, r7
 8011b08:	eb04 0803 	add.w	r8, r4, r3
 8011b0c:	f000 ff50 	bl	80129b0 <_sbrk_r>
 8011b10:	4580      	cmp	r8, r0
 8011b12:	d13a      	bne.n	8011b8a <_malloc_r+0xd2>
 8011b14:	6821      	ldr	r1, [r4, #0]
 8011b16:	3503      	adds	r5, #3
 8011b18:	1a6d      	subs	r5, r5, r1
 8011b1a:	f025 0503 	bic.w	r5, r5, #3
 8011b1e:	3508      	adds	r5, #8
 8011b20:	2d0c      	cmp	r5, #12
 8011b22:	bf38      	it	cc
 8011b24:	250c      	movcc	r5, #12
 8011b26:	4629      	mov	r1, r5
 8011b28:	4638      	mov	r0, r7
 8011b2a:	f7ff ffa5 	bl	8011a78 <sbrk_aligned>
 8011b2e:	3001      	adds	r0, #1
 8011b30:	d02b      	beq.n	8011b8a <_malloc_r+0xd2>
 8011b32:	6823      	ldr	r3, [r4, #0]
 8011b34:	442b      	add	r3, r5
 8011b36:	6023      	str	r3, [r4, #0]
 8011b38:	e00e      	b.n	8011b58 <_malloc_r+0xa0>
 8011b3a:	6822      	ldr	r2, [r4, #0]
 8011b3c:	1b52      	subs	r2, r2, r5
 8011b3e:	d41e      	bmi.n	8011b7e <_malloc_r+0xc6>
 8011b40:	2a0b      	cmp	r2, #11
 8011b42:	d916      	bls.n	8011b72 <_malloc_r+0xba>
 8011b44:	1961      	adds	r1, r4, r5
 8011b46:	42a3      	cmp	r3, r4
 8011b48:	6025      	str	r5, [r4, #0]
 8011b4a:	bf18      	it	ne
 8011b4c:	6059      	strne	r1, [r3, #4]
 8011b4e:	6863      	ldr	r3, [r4, #4]
 8011b50:	bf08      	it	eq
 8011b52:	6031      	streq	r1, [r6, #0]
 8011b54:	5162      	str	r2, [r4, r5]
 8011b56:	604b      	str	r3, [r1, #4]
 8011b58:	4638      	mov	r0, r7
 8011b5a:	f104 060b 	add.w	r6, r4, #11
 8011b5e:	f003 f9e9 	bl	8014f34 <__malloc_unlock>
 8011b62:	f026 0607 	bic.w	r6, r6, #7
 8011b66:	1d23      	adds	r3, r4, #4
 8011b68:	1af2      	subs	r2, r6, r3
 8011b6a:	d0b6      	beq.n	8011ada <_malloc_r+0x22>
 8011b6c:	1b9b      	subs	r3, r3, r6
 8011b6e:	50a3      	str	r3, [r4, r2]
 8011b70:	e7b3      	b.n	8011ada <_malloc_r+0x22>
 8011b72:	6862      	ldr	r2, [r4, #4]
 8011b74:	42a3      	cmp	r3, r4
 8011b76:	bf0c      	ite	eq
 8011b78:	6032      	streq	r2, [r6, #0]
 8011b7a:	605a      	strne	r2, [r3, #4]
 8011b7c:	e7ec      	b.n	8011b58 <_malloc_r+0xa0>
 8011b7e:	4623      	mov	r3, r4
 8011b80:	6864      	ldr	r4, [r4, #4]
 8011b82:	e7b2      	b.n	8011aea <_malloc_r+0x32>
 8011b84:	4634      	mov	r4, r6
 8011b86:	6876      	ldr	r6, [r6, #4]
 8011b88:	e7b9      	b.n	8011afe <_malloc_r+0x46>
 8011b8a:	230c      	movs	r3, #12
 8011b8c:	603b      	str	r3, [r7, #0]
 8011b8e:	4638      	mov	r0, r7
 8011b90:	f003 f9d0 	bl	8014f34 <__malloc_unlock>
 8011b94:	e7a1      	b.n	8011ada <_malloc_r+0x22>
 8011b96:	6025      	str	r5, [r4, #0]
 8011b98:	e7de      	b.n	8011b58 <_malloc_r+0xa0>
 8011b9a:	bf00      	nop
 8011b9c:	20002524 	.word	0x20002524

08011ba0 <__cvt>:
 8011ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ba4:	ec55 4b10 	vmov	r4, r5, d0
 8011ba8:	2d00      	cmp	r5, #0
 8011baa:	460e      	mov	r6, r1
 8011bac:	4619      	mov	r1, r3
 8011bae:	462b      	mov	r3, r5
 8011bb0:	bfbb      	ittet	lt
 8011bb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011bb6:	461d      	movlt	r5, r3
 8011bb8:	2300      	movge	r3, #0
 8011bba:	232d      	movlt	r3, #45	; 0x2d
 8011bbc:	700b      	strb	r3, [r1, #0]
 8011bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011bc4:	4691      	mov	r9, r2
 8011bc6:	f023 0820 	bic.w	r8, r3, #32
 8011bca:	bfbc      	itt	lt
 8011bcc:	4622      	movlt	r2, r4
 8011bce:	4614      	movlt	r4, r2
 8011bd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011bd4:	d005      	beq.n	8011be2 <__cvt+0x42>
 8011bd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011bda:	d100      	bne.n	8011bde <__cvt+0x3e>
 8011bdc:	3601      	adds	r6, #1
 8011bde:	2102      	movs	r1, #2
 8011be0:	e000      	b.n	8011be4 <__cvt+0x44>
 8011be2:	2103      	movs	r1, #3
 8011be4:	ab03      	add	r3, sp, #12
 8011be6:	9301      	str	r3, [sp, #4]
 8011be8:	ab02      	add	r3, sp, #8
 8011bea:	9300      	str	r3, [sp, #0]
 8011bec:	ec45 4b10 	vmov	d0, r4, r5
 8011bf0:	4653      	mov	r3, sl
 8011bf2:	4632      	mov	r2, r6
 8011bf4:	f001 ffac 	bl	8013b50 <_dtoa_r>
 8011bf8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011bfc:	4607      	mov	r7, r0
 8011bfe:	d102      	bne.n	8011c06 <__cvt+0x66>
 8011c00:	f019 0f01 	tst.w	r9, #1
 8011c04:	d022      	beq.n	8011c4c <__cvt+0xac>
 8011c06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011c0a:	eb07 0906 	add.w	r9, r7, r6
 8011c0e:	d110      	bne.n	8011c32 <__cvt+0x92>
 8011c10:	783b      	ldrb	r3, [r7, #0]
 8011c12:	2b30      	cmp	r3, #48	; 0x30
 8011c14:	d10a      	bne.n	8011c2c <__cvt+0x8c>
 8011c16:	2200      	movs	r2, #0
 8011c18:	2300      	movs	r3, #0
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	4629      	mov	r1, r5
 8011c1e:	f7ee ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c22:	b918      	cbnz	r0, 8011c2c <__cvt+0x8c>
 8011c24:	f1c6 0601 	rsb	r6, r6, #1
 8011c28:	f8ca 6000 	str.w	r6, [sl]
 8011c2c:	f8da 3000 	ldr.w	r3, [sl]
 8011c30:	4499      	add	r9, r3
 8011c32:	2200      	movs	r2, #0
 8011c34:	2300      	movs	r3, #0
 8011c36:	4620      	mov	r0, r4
 8011c38:	4629      	mov	r1, r5
 8011c3a:	f7ee ff45 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c3e:	b108      	cbz	r0, 8011c44 <__cvt+0xa4>
 8011c40:	f8cd 900c 	str.w	r9, [sp, #12]
 8011c44:	2230      	movs	r2, #48	; 0x30
 8011c46:	9b03      	ldr	r3, [sp, #12]
 8011c48:	454b      	cmp	r3, r9
 8011c4a:	d307      	bcc.n	8011c5c <__cvt+0xbc>
 8011c4c:	9b03      	ldr	r3, [sp, #12]
 8011c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c50:	1bdb      	subs	r3, r3, r7
 8011c52:	4638      	mov	r0, r7
 8011c54:	6013      	str	r3, [r2, #0]
 8011c56:	b004      	add	sp, #16
 8011c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c5c:	1c59      	adds	r1, r3, #1
 8011c5e:	9103      	str	r1, [sp, #12]
 8011c60:	701a      	strb	r2, [r3, #0]
 8011c62:	e7f0      	b.n	8011c46 <__cvt+0xa6>

08011c64 <__exponent>:
 8011c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c66:	4603      	mov	r3, r0
 8011c68:	2900      	cmp	r1, #0
 8011c6a:	bfb8      	it	lt
 8011c6c:	4249      	neglt	r1, r1
 8011c6e:	f803 2b02 	strb.w	r2, [r3], #2
 8011c72:	bfb4      	ite	lt
 8011c74:	222d      	movlt	r2, #45	; 0x2d
 8011c76:	222b      	movge	r2, #43	; 0x2b
 8011c78:	2909      	cmp	r1, #9
 8011c7a:	7042      	strb	r2, [r0, #1]
 8011c7c:	dd2a      	ble.n	8011cd4 <__exponent+0x70>
 8011c7e:	f10d 0407 	add.w	r4, sp, #7
 8011c82:	46a4      	mov	ip, r4
 8011c84:	270a      	movs	r7, #10
 8011c86:	46a6      	mov	lr, r4
 8011c88:	460a      	mov	r2, r1
 8011c8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8011c8e:	fb07 1516 	mls	r5, r7, r6, r1
 8011c92:	3530      	adds	r5, #48	; 0x30
 8011c94:	2a63      	cmp	r2, #99	; 0x63
 8011c96:	f104 34ff 	add.w	r4, r4, #4294967295
 8011c9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011c9e:	4631      	mov	r1, r6
 8011ca0:	dcf1      	bgt.n	8011c86 <__exponent+0x22>
 8011ca2:	3130      	adds	r1, #48	; 0x30
 8011ca4:	f1ae 0502 	sub.w	r5, lr, #2
 8011ca8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011cac:	1c44      	adds	r4, r0, #1
 8011cae:	4629      	mov	r1, r5
 8011cb0:	4561      	cmp	r1, ip
 8011cb2:	d30a      	bcc.n	8011cca <__exponent+0x66>
 8011cb4:	f10d 0209 	add.w	r2, sp, #9
 8011cb8:	eba2 020e 	sub.w	r2, r2, lr
 8011cbc:	4565      	cmp	r5, ip
 8011cbe:	bf88      	it	hi
 8011cc0:	2200      	movhi	r2, #0
 8011cc2:	4413      	add	r3, r2
 8011cc4:	1a18      	subs	r0, r3, r0
 8011cc6:	b003      	add	sp, #12
 8011cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011cce:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011cd2:	e7ed      	b.n	8011cb0 <__exponent+0x4c>
 8011cd4:	2330      	movs	r3, #48	; 0x30
 8011cd6:	3130      	adds	r1, #48	; 0x30
 8011cd8:	7083      	strb	r3, [r0, #2]
 8011cda:	70c1      	strb	r1, [r0, #3]
 8011cdc:	1d03      	adds	r3, r0, #4
 8011cde:	e7f1      	b.n	8011cc4 <__exponent+0x60>

08011ce0 <_printf_float>:
 8011ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce4:	ed2d 8b02 	vpush	{d8}
 8011ce8:	b08d      	sub	sp, #52	; 0x34
 8011cea:	460c      	mov	r4, r1
 8011cec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011cf0:	4616      	mov	r6, r2
 8011cf2:	461f      	mov	r7, r3
 8011cf4:	4605      	mov	r5, r0
 8011cf6:	f003 f889 	bl	8014e0c <_localeconv_r>
 8011cfa:	f8d0 a000 	ldr.w	sl, [r0]
 8011cfe:	4650      	mov	r0, sl
 8011d00:	f7ee fa66 	bl	80001d0 <strlen>
 8011d04:	2300      	movs	r3, #0
 8011d06:	930a      	str	r3, [sp, #40]	; 0x28
 8011d08:	6823      	ldr	r3, [r4, #0]
 8011d0a:	9305      	str	r3, [sp, #20]
 8011d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8011d10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011d14:	3307      	adds	r3, #7
 8011d16:	f023 0307 	bic.w	r3, r3, #7
 8011d1a:	f103 0208 	add.w	r2, r3, #8
 8011d1e:	f8c8 2000 	str.w	r2, [r8]
 8011d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011d2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011d2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011d32:	9307      	str	r3, [sp, #28]
 8011d34:	f8cd 8018 	str.w	r8, [sp, #24]
 8011d38:	ee08 0a10 	vmov	s16, r0
 8011d3c:	4b9f      	ldr	r3, [pc, #636]	; (8011fbc <_printf_float+0x2dc>)
 8011d3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d42:	f04f 32ff 	mov.w	r2, #4294967295
 8011d46:	f7ee fef1 	bl	8000b2c <__aeabi_dcmpun>
 8011d4a:	bb88      	cbnz	r0, 8011db0 <_printf_float+0xd0>
 8011d4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d50:	4b9a      	ldr	r3, [pc, #616]	; (8011fbc <_printf_float+0x2dc>)
 8011d52:	f04f 32ff 	mov.w	r2, #4294967295
 8011d56:	f7ee fecb 	bl	8000af0 <__aeabi_dcmple>
 8011d5a:	bb48      	cbnz	r0, 8011db0 <_printf_float+0xd0>
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	2300      	movs	r3, #0
 8011d60:	4640      	mov	r0, r8
 8011d62:	4649      	mov	r1, r9
 8011d64:	f7ee feba 	bl	8000adc <__aeabi_dcmplt>
 8011d68:	b110      	cbz	r0, 8011d70 <_printf_float+0x90>
 8011d6a:	232d      	movs	r3, #45	; 0x2d
 8011d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d70:	4b93      	ldr	r3, [pc, #588]	; (8011fc0 <_printf_float+0x2e0>)
 8011d72:	4894      	ldr	r0, [pc, #592]	; (8011fc4 <_printf_float+0x2e4>)
 8011d74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011d78:	bf94      	ite	ls
 8011d7a:	4698      	movls	r8, r3
 8011d7c:	4680      	movhi	r8, r0
 8011d7e:	2303      	movs	r3, #3
 8011d80:	6123      	str	r3, [r4, #16]
 8011d82:	9b05      	ldr	r3, [sp, #20]
 8011d84:	f023 0204 	bic.w	r2, r3, #4
 8011d88:	6022      	str	r2, [r4, #0]
 8011d8a:	f04f 0900 	mov.w	r9, #0
 8011d8e:	9700      	str	r7, [sp, #0]
 8011d90:	4633      	mov	r3, r6
 8011d92:	aa0b      	add	r2, sp, #44	; 0x2c
 8011d94:	4621      	mov	r1, r4
 8011d96:	4628      	mov	r0, r5
 8011d98:	f000 f9d8 	bl	801214c <_printf_common>
 8011d9c:	3001      	adds	r0, #1
 8011d9e:	f040 8090 	bne.w	8011ec2 <_printf_float+0x1e2>
 8011da2:	f04f 30ff 	mov.w	r0, #4294967295
 8011da6:	b00d      	add	sp, #52	; 0x34
 8011da8:	ecbd 8b02 	vpop	{d8}
 8011dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011db0:	4642      	mov	r2, r8
 8011db2:	464b      	mov	r3, r9
 8011db4:	4640      	mov	r0, r8
 8011db6:	4649      	mov	r1, r9
 8011db8:	f7ee feb8 	bl	8000b2c <__aeabi_dcmpun>
 8011dbc:	b140      	cbz	r0, 8011dd0 <_printf_float+0xf0>
 8011dbe:	464b      	mov	r3, r9
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	bfbc      	itt	lt
 8011dc4:	232d      	movlt	r3, #45	; 0x2d
 8011dc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011dca:	487f      	ldr	r0, [pc, #508]	; (8011fc8 <_printf_float+0x2e8>)
 8011dcc:	4b7f      	ldr	r3, [pc, #508]	; (8011fcc <_printf_float+0x2ec>)
 8011dce:	e7d1      	b.n	8011d74 <_printf_float+0x94>
 8011dd0:	6863      	ldr	r3, [r4, #4]
 8011dd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011dd6:	9206      	str	r2, [sp, #24]
 8011dd8:	1c5a      	adds	r2, r3, #1
 8011dda:	d13f      	bne.n	8011e5c <_printf_float+0x17c>
 8011ddc:	2306      	movs	r3, #6
 8011dde:	6063      	str	r3, [r4, #4]
 8011de0:	9b05      	ldr	r3, [sp, #20]
 8011de2:	6861      	ldr	r1, [r4, #4]
 8011de4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011de8:	2300      	movs	r3, #0
 8011dea:	9303      	str	r3, [sp, #12]
 8011dec:	ab0a      	add	r3, sp, #40	; 0x28
 8011dee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011df2:	ab09      	add	r3, sp, #36	; 0x24
 8011df4:	ec49 8b10 	vmov	d0, r8, r9
 8011df8:	9300      	str	r3, [sp, #0]
 8011dfa:	6022      	str	r2, [r4, #0]
 8011dfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011e00:	4628      	mov	r0, r5
 8011e02:	f7ff fecd 	bl	8011ba0 <__cvt>
 8011e06:	9b06      	ldr	r3, [sp, #24]
 8011e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e0a:	2b47      	cmp	r3, #71	; 0x47
 8011e0c:	4680      	mov	r8, r0
 8011e0e:	d108      	bne.n	8011e22 <_printf_float+0x142>
 8011e10:	1cc8      	adds	r0, r1, #3
 8011e12:	db02      	blt.n	8011e1a <_printf_float+0x13a>
 8011e14:	6863      	ldr	r3, [r4, #4]
 8011e16:	4299      	cmp	r1, r3
 8011e18:	dd41      	ble.n	8011e9e <_printf_float+0x1be>
 8011e1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8011e1e:	fa5f fb8b 	uxtb.w	fp, fp
 8011e22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011e26:	d820      	bhi.n	8011e6a <_printf_float+0x18a>
 8011e28:	3901      	subs	r1, #1
 8011e2a:	465a      	mov	r2, fp
 8011e2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011e30:	9109      	str	r1, [sp, #36]	; 0x24
 8011e32:	f7ff ff17 	bl	8011c64 <__exponent>
 8011e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e38:	1813      	adds	r3, r2, r0
 8011e3a:	2a01      	cmp	r2, #1
 8011e3c:	4681      	mov	r9, r0
 8011e3e:	6123      	str	r3, [r4, #16]
 8011e40:	dc02      	bgt.n	8011e48 <_printf_float+0x168>
 8011e42:	6822      	ldr	r2, [r4, #0]
 8011e44:	07d2      	lsls	r2, r2, #31
 8011e46:	d501      	bpl.n	8011e4c <_printf_float+0x16c>
 8011e48:	3301      	adds	r3, #1
 8011e4a:	6123      	str	r3, [r4, #16]
 8011e4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d09c      	beq.n	8011d8e <_printf_float+0xae>
 8011e54:	232d      	movs	r3, #45	; 0x2d
 8011e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e5a:	e798      	b.n	8011d8e <_printf_float+0xae>
 8011e5c:	9a06      	ldr	r2, [sp, #24]
 8011e5e:	2a47      	cmp	r2, #71	; 0x47
 8011e60:	d1be      	bne.n	8011de0 <_printf_float+0x100>
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d1bc      	bne.n	8011de0 <_printf_float+0x100>
 8011e66:	2301      	movs	r3, #1
 8011e68:	e7b9      	b.n	8011dde <_printf_float+0xfe>
 8011e6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011e6e:	d118      	bne.n	8011ea2 <_printf_float+0x1c2>
 8011e70:	2900      	cmp	r1, #0
 8011e72:	6863      	ldr	r3, [r4, #4]
 8011e74:	dd0b      	ble.n	8011e8e <_printf_float+0x1ae>
 8011e76:	6121      	str	r1, [r4, #16]
 8011e78:	b913      	cbnz	r3, 8011e80 <_printf_float+0x1a0>
 8011e7a:	6822      	ldr	r2, [r4, #0]
 8011e7c:	07d0      	lsls	r0, r2, #31
 8011e7e:	d502      	bpl.n	8011e86 <_printf_float+0x1a6>
 8011e80:	3301      	adds	r3, #1
 8011e82:	440b      	add	r3, r1
 8011e84:	6123      	str	r3, [r4, #16]
 8011e86:	65a1      	str	r1, [r4, #88]	; 0x58
 8011e88:	f04f 0900 	mov.w	r9, #0
 8011e8c:	e7de      	b.n	8011e4c <_printf_float+0x16c>
 8011e8e:	b913      	cbnz	r3, 8011e96 <_printf_float+0x1b6>
 8011e90:	6822      	ldr	r2, [r4, #0]
 8011e92:	07d2      	lsls	r2, r2, #31
 8011e94:	d501      	bpl.n	8011e9a <_printf_float+0x1ba>
 8011e96:	3302      	adds	r3, #2
 8011e98:	e7f4      	b.n	8011e84 <_printf_float+0x1a4>
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	e7f2      	b.n	8011e84 <_printf_float+0x1a4>
 8011e9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ea4:	4299      	cmp	r1, r3
 8011ea6:	db05      	blt.n	8011eb4 <_printf_float+0x1d4>
 8011ea8:	6823      	ldr	r3, [r4, #0]
 8011eaa:	6121      	str	r1, [r4, #16]
 8011eac:	07d8      	lsls	r0, r3, #31
 8011eae:	d5ea      	bpl.n	8011e86 <_printf_float+0x1a6>
 8011eb0:	1c4b      	adds	r3, r1, #1
 8011eb2:	e7e7      	b.n	8011e84 <_printf_float+0x1a4>
 8011eb4:	2900      	cmp	r1, #0
 8011eb6:	bfd4      	ite	le
 8011eb8:	f1c1 0202 	rsble	r2, r1, #2
 8011ebc:	2201      	movgt	r2, #1
 8011ebe:	4413      	add	r3, r2
 8011ec0:	e7e0      	b.n	8011e84 <_printf_float+0x1a4>
 8011ec2:	6823      	ldr	r3, [r4, #0]
 8011ec4:	055a      	lsls	r2, r3, #21
 8011ec6:	d407      	bmi.n	8011ed8 <_printf_float+0x1f8>
 8011ec8:	6923      	ldr	r3, [r4, #16]
 8011eca:	4642      	mov	r2, r8
 8011ecc:	4631      	mov	r1, r6
 8011ece:	4628      	mov	r0, r5
 8011ed0:	47b8      	blx	r7
 8011ed2:	3001      	adds	r0, #1
 8011ed4:	d12c      	bne.n	8011f30 <_printf_float+0x250>
 8011ed6:	e764      	b.n	8011da2 <_printf_float+0xc2>
 8011ed8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011edc:	f240 80e0 	bls.w	80120a0 <_printf_float+0x3c0>
 8011ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	f7ee fdee 	bl	8000ac8 <__aeabi_dcmpeq>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	d034      	beq.n	8011f5a <_printf_float+0x27a>
 8011ef0:	4a37      	ldr	r2, [pc, #220]	; (8011fd0 <_printf_float+0x2f0>)
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	4631      	mov	r1, r6
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	47b8      	blx	r7
 8011efa:	3001      	adds	r0, #1
 8011efc:	f43f af51 	beq.w	8011da2 <_printf_float+0xc2>
 8011f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f04:	429a      	cmp	r2, r3
 8011f06:	db02      	blt.n	8011f0e <_printf_float+0x22e>
 8011f08:	6823      	ldr	r3, [r4, #0]
 8011f0a:	07d8      	lsls	r0, r3, #31
 8011f0c:	d510      	bpl.n	8011f30 <_printf_float+0x250>
 8011f0e:	ee18 3a10 	vmov	r3, s16
 8011f12:	4652      	mov	r2, sl
 8011f14:	4631      	mov	r1, r6
 8011f16:	4628      	mov	r0, r5
 8011f18:	47b8      	blx	r7
 8011f1a:	3001      	adds	r0, #1
 8011f1c:	f43f af41 	beq.w	8011da2 <_printf_float+0xc2>
 8011f20:	f04f 0800 	mov.w	r8, #0
 8011f24:	f104 091a 	add.w	r9, r4, #26
 8011f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f2a:	3b01      	subs	r3, #1
 8011f2c:	4543      	cmp	r3, r8
 8011f2e:	dc09      	bgt.n	8011f44 <_printf_float+0x264>
 8011f30:	6823      	ldr	r3, [r4, #0]
 8011f32:	079b      	lsls	r3, r3, #30
 8011f34:	f100 8105 	bmi.w	8012142 <_printf_float+0x462>
 8011f38:	68e0      	ldr	r0, [r4, #12]
 8011f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f3c:	4298      	cmp	r0, r3
 8011f3e:	bfb8      	it	lt
 8011f40:	4618      	movlt	r0, r3
 8011f42:	e730      	b.n	8011da6 <_printf_float+0xc6>
 8011f44:	2301      	movs	r3, #1
 8011f46:	464a      	mov	r2, r9
 8011f48:	4631      	mov	r1, r6
 8011f4a:	4628      	mov	r0, r5
 8011f4c:	47b8      	blx	r7
 8011f4e:	3001      	adds	r0, #1
 8011f50:	f43f af27 	beq.w	8011da2 <_printf_float+0xc2>
 8011f54:	f108 0801 	add.w	r8, r8, #1
 8011f58:	e7e6      	b.n	8011f28 <_printf_float+0x248>
 8011f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	dc39      	bgt.n	8011fd4 <_printf_float+0x2f4>
 8011f60:	4a1b      	ldr	r2, [pc, #108]	; (8011fd0 <_printf_float+0x2f0>)
 8011f62:	2301      	movs	r3, #1
 8011f64:	4631      	mov	r1, r6
 8011f66:	4628      	mov	r0, r5
 8011f68:	47b8      	blx	r7
 8011f6a:	3001      	adds	r0, #1
 8011f6c:	f43f af19 	beq.w	8011da2 <_printf_float+0xc2>
 8011f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f74:	4313      	orrs	r3, r2
 8011f76:	d102      	bne.n	8011f7e <_printf_float+0x29e>
 8011f78:	6823      	ldr	r3, [r4, #0]
 8011f7a:	07d9      	lsls	r1, r3, #31
 8011f7c:	d5d8      	bpl.n	8011f30 <_printf_float+0x250>
 8011f7e:	ee18 3a10 	vmov	r3, s16
 8011f82:	4652      	mov	r2, sl
 8011f84:	4631      	mov	r1, r6
 8011f86:	4628      	mov	r0, r5
 8011f88:	47b8      	blx	r7
 8011f8a:	3001      	adds	r0, #1
 8011f8c:	f43f af09 	beq.w	8011da2 <_printf_float+0xc2>
 8011f90:	f04f 0900 	mov.w	r9, #0
 8011f94:	f104 0a1a 	add.w	sl, r4, #26
 8011f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f9a:	425b      	negs	r3, r3
 8011f9c:	454b      	cmp	r3, r9
 8011f9e:	dc01      	bgt.n	8011fa4 <_printf_float+0x2c4>
 8011fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fa2:	e792      	b.n	8011eca <_printf_float+0x1ea>
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	4652      	mov	r2, sl
 8011fa8:	4631      	mov	r1, r6
 8011faa:	4628      	mov	r0, r5
 8011fac:	47b8      	blx	r7
 8011fae:	3001      	adds	r0, #1
 8011fb0:	f43f aef7 	beq.w	8011da2 <_printf_float+0xc2>
 8011fb4:	f109 0901 	add.w	r9, r9, #1
 8011fb8:	e7ee      	b.n	8011f98 <_printf_float+0x2b8>
 8011fba:	bf00      	nop
 8011fbc:	7fefffff 	.word	0x7fefffff
 8011fc0:	08016f08 	.word	0x08016f08
 8011fc4:	08016f0c 	.word	0x08016f0c
 8011fc8:	08016f14 	.word	0x08016f14
 8011fcc:	08016f10 	.word	0x08016f10
 8011fd0:	08016f18 	.word	0x08016f18
 8011fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	bfa8      	it	ge
 8011fdc:	461a      	movge	r2, r3
 8011fde:	2a00      	cmp	r2, #0
 8011fe0:	4691      	mov	r9, r2
 8011fe2:	dc37      	bgt.n	8012054 <_printf_float+0x374>
 8011fe4:	f04f 0b00 	mov.w	fp, #0
 8011fe8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011fec:	f104 021a 	add.w	r2, r4, #26
 8011ff0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ff2:	9305      	str	r3, [sp, #20]
 8011ff4:	eba3 0309 	sub.w	r3, r3, r9
 8011ff8:	455b      	cmp	r3, fp
 8011ffa:	dc33      	bgt.n	8012064 <_printf_float+0x384>
 8011ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012000:	429a      	cmp	r2, r3
 8012002:	db3b      	blt.n	801207c <_printf_float+0x39c>
 8012004:	6823      	ldr	r3, [r4, #0]
 8012006:	07da      	lsls	r2, r3, #31
 8012008:	d438      	bmi.n	801207c <_printf_float+0x39c>
 801200a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801200c:	9a05      	ldr	r2, [sp, #20]
 801200e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012010:	1a9a      	subs	r2, r3, r2
 8012012:	eba3 0901 	sub.w	r9, r3, r1
 8012016:	4591      	cmp	r9, r2
 8012018:	bfa8      	it	ge
 801201a:	4691      	movge	r9, r2
 801201c:	f1b9 0f00 	cmp.w	r9, #0
 8012020:	dc35      	bgt.n	801208e <_printf_float+0x3ae>
 8012022:	f04f 0800 	mov.w	r8, #0
 8012026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801202a:	f104 0a1a 	add.w	sl, r4, #26
 801202e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012032:	1a9b      	subs	r3, r3, r2
 8012034:	eba3 0309 	sub.w	r3, r3, r9
 8012038:	4543      	cmp	r3, r8
 801203a:	f77f af79 	ble.w	8011f30 <_printf_float+0x250>
 801203e:	2301      	movs	r3, #1
 8012040:	4652      	mov	r2, sl
 8012042:	4631      	mov	r1, r6
 8012044:	4628      	mov	r0, r5
 8012046:	47b8      	blx	r7
 8012048:	3001      	adds	r0, #1
 801204a:	f43f aeaa 	beq.w	8011da2 <_printf_float+0xc2>
 801204e:	f108 0801 	add.w	r8, r8, #1
 8012052:	e7ec      	b.n	801202e <_printf_float+0x34e>
 8012054:	4613      	mov	r3, r2
 8012056:	4631      	mov	r1, r6
 8012058:	4642      	mov	r2, r8
 801205a:	4628      	mov	r0, r5
 801205c:	47b8      	blx	r7
 801205e:	3001      	adds	r0, #1
 8012060:	d1c0      	bne.n	8011fe4 <_printf_float+0x304>
 8012062:	e69e      	b.n	8011da2 <_printf_float+0xc2>
 8012064:	2301      	movs	r3, #1
 8012066:	4631      	mov	r1, r6
 8012068:	4628      	mov	r0, r5
 801206a:	9205      	str	r2, [sp, #20]
 801206c:	47b8      	blx	r7
 801206e:	3001      	adds	r0, #1
 8012070:	f43f ae97 	beq.w	8011da2 <_printf_float+0xc2>
 8012074:	9a05      	ldr	r2, [sp, #20]
 8012076:	f10b 0b01 	add.w	fp, fp, #1
 801207a:	e7b9      	b.n	8011ff0 <_printf_float+0x310>
 801207c:	ee18 3a10 	vmov	r3, s16
 8012080:	4652      	mov	r2, sl
 8012082:	4631      	mov	r1, r6
 8012084:	4628      	mov	r0, r5
 8012086:	47b8      	blx	r7
 8012088:	3001      	adds	r0, #1
 801208a:	d1be      	bne.n	801200a <_printf_float+0x32a>
 801208c:	e689      	b.n	8011da2 <_printf_float+0xc2>
 801208e:	9a05      	ldr	r2, [sp, #20]
 8012090:	464b      	mov	r3, r9
 8012092:	4442      	add	r2, r8
 8012094:	4631      	mov	r1, r6
 8012096:	4628      	mov	r0, r5
 8012098:	47b8      	blx	r7
 801209a:	3001      	adds	r0, #1
 801209c:	d1c1      	bne.n	8012022 <_printf_float+0x342>
 801209e:	e680      	b.n	8011da2 <_printf_float+0xc2>
 80120a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120a2:	2a01      	cmp	r2, #1
 80120a4:	dc01      	bgt.n	80120aa <_printf_float+0x3ca>
 80120a6:	07db      	lsls	r3, r3, #31
 80120a8:	d538      	bpl.n	801211c <_printf_float+0x43c>
 80120aa:	2301      	movs	r3, #1
 80120ac:	4642      	mov	r2, r8
 80120ae:	4631      	mov	r1, r6
 80120b0:	4628      	mov	r0, r5
 80120b2:	47b8      	blx	r7
 80120b4:	3001      	adds	r0, #1
 80120b6:	f43f ae74 	beq.w	8011da2 <_printf_float+0xc2>
 80120ba:	ee18 3a10 	vmov	r3, s16
 80120be:	4652      	mov	r2, sl
 80120c0:	4631      	mov	r1, r6
 80120c2:	4628      	mov	r0, r5
 80120c4:	47b8      	blx	r7
 80120c6:	3001      	adds	r0, #1
 80120c8:	f43f ae6b 	beq.w	8011da2 <_printf_float+0xc2>
 80120cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80120d0:	2200      	movs	r2, #0
 80120d2:	2300      	movs	r3, #0
 80120d4:	f7ee fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80120d8:	b9d8      	cbnz	r0, 8012112 <_printf_float+0x432>
 80120da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120dc:	f108 0201 	add.w	r2, r8, #1
 80120e0:	3b01      	subs	r3, #1
 80120e2:	4631      	mov	r1, r6
 80120e4:	4628      	mov	r0, r5
 80120e6:	47b8      	blx	r7
 80120e8:	3001      	adds	r0, #1
 80120ea:	d10e      	bne.n	801210a <_printf_float+0x42a>
 80120ec:	e659      	b.n	8011da2 <_printf_float+0xc2>
 80120ee:	2301      	movs	r3, #1
 80120f0:	4652      	mov	r2, sl
 80120f2:	4631      	mov	r1, r6
 80120f4:	4628      	mov	r0, r5
 80120f6:	47b8      	blx	r7
 80120f8:	3001      	adds	r0, #1
 80120fa:	f43f ae52 	beq.w	8011da2 <_printf_float+0xc2>
 80120fe:	f108 0801 	add.w	r8, r8, #1
 8012102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012104:	3b01      	subs	r3, #1
 8012106:	4543      	cmp	r3, r8
 8012108:	dcf1      	bgt.n	80120ee <_printf_float+0x40e>
 801210a:	464b      	mov	r3, r9
 801210c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012110:	e6dc      	b.n	8011ecc <_printf_float+0x1ec>
 8012112:	f04f 0800 	mov.w	r8, #0
 8012116:	f104 0a1a 	add.w	sl, r4, #26
 801211a:	e7f2      	b.n	8012102 <_printf_float+0x422>
 801211c:	2301      	movs	r3, #1
 801211e:	4642      	mov	r2, r8
 8012120:	e7df      	b.n	80120e2 <_printf_float+0x402>
 8012122:	2301      	movs	r3, #1
 8012124:	464a      	mov	r2, r9
 8012126:	4631      	mov	r1, r6
 8012128:	4628      	mov	r0, r5
 801212a:	47b8      	blx	r7
 801212c:	3001      	adds	r0, #1
 801212e:	f43f ae38 	beq.w	8011da2 <_printf_float+0xc2>
 8012132:	f108 0801 	add.w	r8, r8, #1
 8012136:	68e3      	ldr	r3, [r4, #12]
 8012138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801213a:	1a5b      	subs	r3, r3, r1
 801213c:	4543      	cmp	r3, r8
 801213e:	dcf0      	bgt.n	8012122 <_printf_float+0x442>
 8012140:	e6fa      	b.n	8011f38 <_printf_float+0x258>
 8012142:	f04f 0800 	mov.w	r8, #0
 8012146:	f104 0919 	add.w	r9, r4, #25
 801214a:	e7f4      	b.n	8012136 <_printf_float+0x456>

0801214c <_printf_common>:
 801214c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012150:	4616      	mov	r6, r2
 8012152:	4699      	mov	r9, r3
 8012154:	688a      	ldr	r2, [r1, #8]
 8012156:	690b      	ldr	r3, [r1, #16]
 8012158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801215c:	4293      	cmp	r3, r2
 801215e:	bfb8      	it	lt
 8012160:	4613      	movlt	r3, r2
 8012162:	6033      	str	r3, [r6, #0]
 8012164:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012168:	4607      	mov	r7, r0
 801216a:	460c      	mov	r4, r1
 801216c:	b10a      	cbz	r2, 8012172 <_printf_common+0x26>
 801216e:	3301      	adds	r3, #1
 8012170:	6033      	str	r3, [r6, #0]
 8012172:	6823      	ldr	r3, [r4, #0]
 8012174:	0699      	lsls	r1, r3, #26
 8012176:	bf42      	ittt	mi
 8012178:	6833      	ldrmi	r3, [r6, #0]
 801217a:	3302      	addmi	r3, #2
 801217c:	6033      	strmi	r3, [r6, #0]
 801217e:	6825      	ldr	r5, [r4, #0]
 8012180:	f015 0506 	ands.w	r5, r5, #6
 8012184:	d106      	bne.n	8012194 <_printf_common+0x48>
 8012186:	f104 0a19 	add.w	sl, r4, #25
 801218a:	68e3      	ldr	r3, [r4, #12]
 801218c:	6832      	ldr	r2, [r6, #0]
 801218e:	1a9b      	subs	r3, r3, r2
 8012190:	42ab      	cmp	r3, r5
 8012192:	dc26      	bgt.n	80121e2 <_printf_common+0x96>
 8012194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012198:	1e13      	subs	r3, r2, #0
 801219a:	6822      	ldr	r2, [r4, #0]
 801219c:	bf18      	it	ne
 801219e:	2301      	movne	r3, #1
 80121a0:	0692      	lsls	r2, r2, #26
 80121a2:	d42b      	bmi.n	80121fc <_printf_common+0xb0>
 80121a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80121a8:	4649      	mov	r1, r9
 80121aa:	4638      	mov	r0, r7
 80121ac:	47c0      	blx	r8
 80121ae:	3001      	adds	r0, #1
 80121b0:	d01e      	beq.n	80121f0 <_printf_common+0xa4>
 80121b2:	6823      	ldr	r3, [r4, #0]
 80121b4:	68e5      	ldr	r5, [r4, #12]
 80121b6:	6832      	ldr	r2, [r6, #0]
 80121b8:	f003 0306 	and.w	r3, r3, #6
 80121bc:	2b04      	cmp	r3, #4
 80121be:	bf08      	it	eq
 80121c0:	1aad      	subeq	r5, r5, r2
 80121c2:	68a3      	ldr	r3, [r4, #8]
 80121c4:	6922      	ldr	r2, [r4, #16]
 80121c6:	bf0c      	ite	eq
 80121c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80121cc:	2500      	movne	r5, #0
 80121ce:	4293      	cmp	r3, r2
 80121d0:	bfc4      	itt	gt
 80121d2:	1a9b      	subgt	r3, r3, r2
 80121d4:	18ed      	addgt	r5, r5, r3
 80121d6:	2600      	movs	r6, #0
 80121d8:	341a      	adds	r4, #26
 80121da:	42b5      	cmp	r5, r6
 80121dc:	d11a      	bne.n	8012214 <_printf_common+0xc8>
 80121de:	2000      	movs	r0, #0
 80121e0:	e008      	b.n	80121f4 <_printf_common+0xa8>
 80121e2:	2301      	movs	r3, #1
 80121e4:	4652      	mov	r2, sl
 80121e6:	4649      	mov	r1, r9
 80121e8:	4638      	mov	r0, r7
 80121ea:	47c0      	blx	r8
 80121ec:	3001      	adds	r0, #1
 80121ee:	d103      	bne.n	80121f8 <_printf_common+0xac>
 80121f0:	f04f 30ff 	mov.w	r0, #4294967295
 80121f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121f8:	3501      	adds	r5, #1
 80121fa:	e7c6      	b.n	801218a <_printf_common+0x3e>
 80121fc:	18e1      	adds	r1, r4, r3
 80121fe:	1c5a      	adds	r2, r3, #1
 8012200:	2030      	movs	r0, #48	; 0x30
 8012202:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012206:	4422      	add	r2, r4
 8012208:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801220c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012210:	3302      	adds	r3, #2
 8012212:	e7c7      	b.n	80121a4 <_printf_common+0x58>
 8012214:	2301      	movs	r3, #1
 8012216:	4622      	mov	r2, r4
 8012218:	4649      	mov	r1, r9
 801221a:	4638      	mov	r0, r7
 801221c:	47c0      	blx	r8
 801221e:	3001      	adds	r0, #1
 8012220:	d0e6      	beq.n	80121f0 <_printf_common+0xa4>
 8012222:	3601      	adds	r6, #1
 8012224:	e7d9      	b.n	80121da <_printf_common+0x8e>
	...

08012228 <_printf_i>:
 8012228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801222c:	7e0f      	ldrb	r7, [r1, #24]
 801222e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012230:	2f78      	cmp	r7, #120	; 0x78
 8012232:	4691      	mov	r9, r2
 8012234:	4680      	mov	r8, r0
 8012236:	460c      	mov	r4, r1
 8012238:	469a      	mov	sl, r3
 801223a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801223e:	d807      	bhi.n	8012250 <_printf_i+0x28>
 8012240:	2f62      	cmp	r7, #98	; 0x62
 8012242:	d80a      	bhi.n	801225a <_printf_i+0x32>
 8012244:	2f00      	cmp	r7, #0
 8012246:	f000 80d8 	beq.w	80123fa <_printf_i+0x1d2>
 801224a:	2f58      	cmp	r7, #88	; 0x58
 801224c:	f000 80a3 	beq.w	8012396 <_printf_i+0x16e>
 8012250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012258:	e03a      	b.n	80122d0 <_printf_i+0xa8>
 801225a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801225e:	2b15      	cmp	r3, #21
 8012260:	d8f6      	bhi.n	8012250 <_printf_i+0x28>
 8012262:	a101      	add	r1, pc, #4	; (adr r1, 8012268 <_printf_i+0x40>)
 8012264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012268:	080122c1 	.word	0x080122c1
 801226c:	080122d5 	.word	0x080122d5
 8012270:	08012251 	.word	0x08012251
 8012274:	08012251 	.word	0x08012251
 8012278:	08012251 	.word	0x08012251
 801227c:	08012251 	.word	0x08012251
 8012280:	080122d5 	.word	0x080122d5
 8012284:	08012251 	.word	0x08012251
 8012288:	08012251 	.word	0x08012251
 801228c:	08012251 	.word	0x08012251
 8012290:	08012251 	.word	0x08012251
 8012294:	080123e1 	.word	0x080123e1
 8012298:	08012305 	.word	0x08012305
 801229c:	080123c3 	.word	0x080123c3
 80122a0:	08012251 	.word	0x08012251
 80122a4:	08012251 	.word	0x08012251
 80122a8:	08012403 	.word	0x08012403
 80122ac:	08012251 	.word	0x08012251
 80122b0:	08012305 	.word	0x08012305
 80122b4:	08012251 	.word	0x08012251
 80122b8:	08012251 	.word	0x08012251
 80122bc:	080123cb 	.word	0x080123cb
 80122c0:	682b      	ldr	r3, [r5, #0]
 80122c2:	1d1a      	adds	r2, r3, #4
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	602a      	str	r2, [r5, #0]
 80122c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80122cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80122d0:	2301      	movs	r3, #1
 80122d2:	e0a3      	b.n	801241c <_printf_i+0x1f4>
 80122d4:	6820      	ldr	r0, [r4, #0]
 80122d6:	6829      	ldr	r1, [r5, #0]
 80122d8:	0606      	lsls	r6, r0, #24
 80122da:	f101 0304 	add.w	r3, r1, #4
 80122de:	d50a      	bpl.n	80122f6 <_printf_i+0xce>
 80122e0:	680e      	ldr	r6, [r1, #0]
 80122e2:	602b      	str	r3, [r5, #0]
 80122e4:	2e00      	cmp	r6, #0
 80122e6:	da03      	bge.n	80122f0 <_printf_i+0xc8>
 80122e8:	232d      	movs	r3, #45	; 0x2d
 80122ea:	4276      	negs	r6, r6
 80122ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80122f0:	485e      	ldr	r0, [pc, #376]	; (801246c <_printf_i+0x244>)
 80122f2:	230a      	movs	r3, #10
 80122f4:	e019      	b.n	801232a <_printf_i+0x102>
 80122f6:	680e      	ldr	r6, [r1, #0]
 80122f8:	602b      	str	r3, [r5, #0]
 80122fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80122fe:	bf18      	it	ne
 8012300:	b236      	sxthne	r6, r6
 8012302:	e7ef      	b.n	80122e4 <_printf_i+0xbc>
 8012304:	682b      	ldr	r3, [r5, #0]
 8012306:	6820      	ldr	r0, [r4, #0]
 8012308:	1d19      	adds	r1, r3, #4
 801230a:	6029      	str	r1, [r5, #0]
 801230c:	0601      	lsls	r1, r0, #24
 801230e:	d501      	bpl.n	8012314 <_printf_i+0xec>
 8012310:	681e      	ldr	r6, [r3, #0]
 8012312:	e002      	b.n	801231a <_printf_i+0xf2>
 8012314:	0646      	lsls	r6, r0, #25
 8012316:	d5fb      	bpl.n	8012310 <_printf_i+0xe8>
 8012318:	881e      	ldrh	r6, [r3, #0]
 801231a:	4854      	ldr	r0, [pc, #336]	; (801246c <_printf_i+0x244>)
 801231c:	2f6f      	cmp	r7, #111	; 0x6f
 801231e:	bf0c      	ite	eq
 8012320:	2308      	moveq	r3, #8
 8012322:	230a      	movne	r3, #10
 8012324:	2100      	movs	r1, #0
 8012326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801232a:	6865      	ldr	r5, [r4, #4]
 801232c:	60a5      	str	r5, [r4, #8]
 801232e:	2d00      	cmp	r5, #0
 8012330:	bfa2      	ittt	ge
 8012332:	6821      	ldrge	r1, [r4, #0]
 8012334:	f021 0104 	bicge.w	r1, r1, #4
 8012338:	6021      	strge	r1, [r4, #0]
 801233a:	b90e      	cbnz	r6, 8012340 <_printf_i+0x118>
 801233c:	2d00      	cmp	r5, #0
 801233e:	d04d      	beq.n	80123dc <_printf_i+0x1b4>
 8012340:	4615      	mov	r5, r2
 8012342:	fbb6 f1f3 	udiv	r1, r6, r3
 8012346:	fb03 6711 	mls	r7, r3, r1, r6
 801234a:	5dc7      	ldrb	r7, [r0, r7]
 801234c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012350:	4637      	mov	r7, r6
 8012352:	42bb      	cmp	r3, r7
 8012354:	460e      	mov	r6, r1
 8012356:	d9f4      	bls.n	8012342 <_printf_i+0x11a>
 8012358:	2b08      	cmp	r3, #8
 801235a:	d10b      	bne.n	8012374 <_printf_i+0x14c>
 801235c:	6823      	ldr	r3, [r4, #0]
 801235e:	07de      	lsls	r6, r3, #31
 8012360:	d508      	bpl.n	8012374 <_printf_i+0x14c>
 8012362:	6923      	ldr	r3, [r4, #16]
 8012364:	6861      	ldr	r1, [r4, #4]
 8012366:	4299      	cmp	r1, r3
 8012368:	bfde      	ittt	le
 801236a:	2330      	movle	r3, #48	; 0x30
 801236c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012370:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012374:	1b52      	subs	r2, r2, r5
 8012376:	6122      	str	r2, [r4, #16]
 8012378:	f8cd a000 	str.w	sl, [sp]
 801237c:	464b      	mov	r3, r9
 801237e:	aa03      	add	r2, sp, #12
 8012380:	4621      	mov	r1, r4
 8012382:	4640      	mov	r0, r8
 8012384:	f7ff fee2 	bl	801214c <_printf_common>
 8012388:	3001      	adds	r0, #1
 801238a:	d14c      	bne.n	8012426 <_printf_i+0x1fe>
 801238c:	f04f 30ff 	mov.w	r0, #4294967295
 8012390:	b004      	add	sp, #16
 8012392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012396:	4835      	ldr	r0, [pc, #212]	; (801246c <_printf_i+0x244>)
 8012398:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801239c:	6829      	ldr	r1, [r5, #0]
 801239e:	6823      	ldr	r3, [r4, #0]
 80123a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80123a4:	6029      	str	r1, [r5, #0]
 80123a6:	061d      	lsls	r5, r3, #24
 80123a8:	d514      	bpl.n	80123d4 <_printf_i+0x1ac>
 80123aa:	07df      	lsls	r7, r3, #31
 80123ac:	bf44      	itt	mi
 80123ae:	f043 0320 	orrmi.w	r3, r3, #32
 80123b2:	6023      	strmi	r3, [r4, #0]
 80123b4:	b91e      	cbnz	r6, 80123be <_printf_i+0x196>
 80123b6:	6823      	ldr	r3, [r4, #0]
 80123b8:	f023 0320 	bic.w	r3, r3, #32
 80123bc:	6023      	str	r3, [r4, #0]
 80123be:	2310      	movs	r3, #16
 80123c0:	e7b0      	b.n	8012324 <_printf_i+0xfc>
 80123c2:	6823      	ldr	r3, [r4, #0]
 80123c4:	f043 0320 	orr.w	r3, r3, #32
 80123c8:	6023      	str	r3, [r4, #0]
 80123ca:	2378      	movs	r3, #120	; 0x78
 80123cc:	4828      	ldr	r0, [pc, #160]	; (8012470 <_printf_i+0x248>)
 80123ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80123d2:	e7e3      	b.n	801239c <_printf_i+0x174>
 80123d4:	0659      	lsls	r1, r3, #25
 80123d6:	bf48      	it	mi
 80123d8:	b2b6      	uxthmi	r6, r6
 80123da:	e7e6      	b.n	80123aa <_printf_i+0x182>
 80123dc:	4615      	mov	r5, r2
 80123de:	e7bb      	b.n	8012358 <_printf_i+0x130>
 80123e0:	682b      	ldr	r3, [r5, #0]
 80123e2:	6826      	ldr	r6, [r4, #0]
 80123e4:	6961      	ldr	r1, [r4, #20]
 80123e6:	1d18      	adds	r0, r3, #4
 80123e8:	6028      	str	r0, [r5, #0]
 80123ea:	0635      	lsls	r5, r6, #24
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	d501      	bpl.n	80123f4 <_printf_i+0x1cc>
 80123f0:	6019      	str	r1, [r3, #0]
 80123f2:	e002      	b.n	80123fa <_printf_i+0x1d2>
 80123f4:	0670      	lsls	r0, r6, #25
 80123f6:	d5fb      	bpl.n	80123f0 <_printf_i+0x1c8>
 80123f8:	8019      	strh	r1, [r3, #0]
 80123fa:	2300      	movs	r3, #0
 80123fc:	6123      	str	r3, [r4, #16]
 80123fe:	4615      	mov	r5, r2
 8012400:	e7ba      	b.n	8012378 <_printf_i+0x150>
 8012402:	682b      	ldr	r3, [r5, #0]
 8012404:	1d1a      	adds	r2, r3, #4
 8012406:	602a      	str	r2, [r5, #0]
 8012408:	681d      	ldr	r5, [r3, #0]
 801240a:	6862      	ldr	r2, [r4, #4]
 801240c:	2100      	movs	r1, #0
 801240e:	4628      	mov	r0, r5
 8012410:	f7ed fee6 	bl	80001e0 <memchr>
 8012414:	b108      	cbz	r0, 801241a <_printf_i+0x1f2>
 8012416:	1b40      	subs	r0, r0, r5
 8012418:	6060      	str	r0, [r4, #4]
 801241a:	6863      	ldr	r3, [r4, #4]
 801241c:	6123      	str	r3, [r4, #16]
 801241e:	2300      	movs	r3, #0
 8012420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012424:	e7a8      	b.n	8012378 <_printf_i+0x150>
 8012426:	6923      	ldr	r3, [r4, #16]
 8012428:	462a      	mov	r2, r5
 801242a:	4649      	mov	r1, r9
 801242c:	4640      	mov	r0, r8
 801242e:	47d0      	blx	sl
 8012430:	3001      	adds	r0, #1
 8012432:	d0ab      	beq.n	801238c <_printf_i+0x164>
 8012434:	6823      	ldr	r3, [r4, #0]
 8012436:	079b      	lsls	r3, r3, #30
 8012438:	d413      	bmi.n	8012462 <_printf_i+0x23a>
 801243a:	68e0      	ldr	r0, [r4, #12]
 801243c:	9b03      	ldr	r3, [sp, #12]
 801243e:	4298      	cmp	r0, r3
 8012440:	bfb8      	it	lt
 8012442:	4618      	movlt	r0, r3
 8012444:	e7a4      	b.n	8012390 <_printf_i+0x168>
 8012446:	2301      	movs	r3, #1
 8012448:	4632      	mov	r2, r6
 801244a:	4649      	mov	r1, r9
 801244c:	4640      	mov	r0, r8
 801244e:	47d0      	blx	sl
 8012450:	3001      	adds	r0, #1
 8012452:	d09b      	beq.n	801238c <_printf_i+0x164>
 8012454:	3501      	adds	r5, #1
 8012456:	68e3      	ldr	r3, [r4, #12]
 8012458:	9903      	ldr	r1, [sp, #12]
 801245a:	1a5b      	subs	r3, r3, r1
 801245c:	42ab      	cmp	r3, r5
 801245e:	dcf2      	bgt.n	8012446 <_printf_i+0x21e>
 8012460:	e7eb      	b.n	801243a <_printf_i+0x212>
 8012462:	2500      	movs	r5, #0
 8012464:	f104 0619 	add.w	r6, r4, #25
 8012468:	e7f5      	b.n	8012456 <_printf_i+0x22e>
 801246a:	bf00      	nop
 801246c:	08016f1a 	.word	0x08016f1a
 8012470:	08016f2b 	.word	0x08016f2b

08012474 <_scanf_float>:
 8012474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012478:	b087      	sub	sp, #28
 801247a:	4617      	mov	r7, r2
 801247c:	9303      	str	r3, [sp, #12]
 801247e:	688b      	ldr	r3, [r1, #8]
 8012480:	1e5a      	subs	r2, r3, #1
 8012482:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012486:	bf83      	ittte	hi
 8012488:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801248c:	195b      	addhi	r3, r3, r5
 801248e:	9302      	strhi	r3, [sp, #8]
 8012490:	2300      	movls	r3, #0
 8012492:	bf86      	itte	hi
 8012494:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012498:	608b      	strhi	r3, [r1, #8]
 801249a:	9302      	strls	r3, [sp, #8]
 801249c:	680b      	ldr	r3, [r1, #0]
 801249e:	468b      	mov	fp, r1
 80124a0:	2500      	movs	r5, #0
 80124a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80124a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80124aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80124ae:	4680      	mov	r8, r0
 80124b0:	460c      	mov	r4, r1
 80124b2:	465e      	mov	r6, fp
 80124b4:	46aa      	mov	sl, r5
 80124b6:	46a9      	mov	r9, r5
 80124b8:	9501      	str	r5, [sp, #4]
 80124ba:	68a2      	ldr	r2, [r4, #8]
 80124bc:	b152      	cbz	r2, 80124d4 <_scanf_float+0x60>
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	781b      	ldrb	r3, [r3, #0]
 80124c2:	2b4e      	cmp	r3, #78	; 0x4e
 80124c4:	d864      	bhi.n	8012590 <_scanf_float+0x11c>
 80124c6:	2b40      	cmp	r3, #64	; 0x40
 80124c8:	d83c      	bhi.n	8012544 <_scanf_float+0xd0>
 80124ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80124ce:	b2c8      	uxtb	r0, r1
 80124d0:	280e      	cmp	r0, #14
 80124d2:	d93a      	bls.n	801254a <_scanf_float+0xd6>
 80124d4:	f1b9 0f00 	cmp.w	r9, #0
 80124d8:	d003      	beq.n	80124e2 <_scanf_float+0x6e>
 80124da:	6823      	ldr	r3, [r4, #0]
 80124dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124e0:	6023      	str	r3, [r4, #0]
 80124e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80124e6:	f1ba 0f01 	cmp.w	sl, #1
 80124ea:	f200 8113 	bhi.w	8012714 <_scanf_float+0x2a0>
 80124ee:	455e      	cmp	r6, fp
 80124f0:	f200 8105 	bhi.w	80126fe <_scanf_float+0x28a>
 80124f4:	2501      	movs	r5, #1
 80124f6:	4628      	mov	r0, r5
 80124f8:	b007      	add	sp, #28
 80124fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012502:	2a0d      	cmp	r2, #13
 8012504:	d8e6      	bhi.n	80124d4 <_scanf_float+0x60>
 8012506:	a101      	add	r1, pc, #4	; (adr r1, 801250c <_scanf_float+0x98>)
 8012508:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801250c:	0801264b 	.word	0x0801264b
 8012510:	080124d5 	.word	0x080124d5
 8012514:	080124d5 	.word	0x080124d5
 8012518:	080124d5 	.word	0x080124d5
 801251c:	080126ab 	.word	0x080126ab
 8012520:	08012683 	.word	0x08012683
 8012524:	080124d5 	.word	0x080124d5
 8012528:	080124d5 	.word	0x080124d5
 801252c:	08012659 	.word	0x08012659
 8012530:	080124d5 	.word	0x080124d5
 8012534:	080124d5 	.word	0x080124d5
 8012538:	080124d5 	.word	0x080124d5
 801253c:	080124d5 	.word	0x080124d5
 8012540:	08012611 	.word	0x08012611
 8012544:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012548:	e7db      	b.n	8012502 <_scanf_float+0x8e>
 801254a:	290e      	cmp	r1, #14
 801254c:	d8c2      	bhi.n	80124d4 <_scanf_float+0x60>
 801254e:	a001      	add	r0, pc, #4	; (adr r0, 8012554 <_scanf_float+0xe0>)
 8012550:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012554:	08012603 	.word	0x08012603
 8012558:	080124d5 	.word	0x080124d5
 801255c:	08012603 	.word	0x08012603
 8012560:	08012697 	.word	0x08012697
 8012564:	080124d5 	.word	0x080124d5
 8012568:	080125b1 	.word	0x080125b1
 801256c:	080125ed 	.word	0x080125ed
 8012570:	080125ed 	.word	0x080125ed
 8012574:	080125ed 	.word	0x080125ed
 8012578:	080125ed 	.word	0x080125ed
 801257c:	080125ed 	.word	0x080125ed
 8012580:	080125ed 	.word	0x080125ed
 8012584:	080125ed 	.word	0x080125ed
 8012588:	080125ed 	.word	0x080125ed
 801258c:	080125ed 	.word	0x080125ed
 8012590:	2b6e      	cmp	r3, #110	; 0x6e
 8012592:	d809      	bhi.n	80125a8 <_scanf_float+0x134>
 8012594:	2b60      	cmp	r3, #96	; 0x60
 8012596:	d8b2      	bhi.n	80124fe <_scanf_float+0x8a>
 8012598:	2b54      	cmp	r3, #84	; 0x54
 801259a:	d077      	beq.n	801268c <_scanf_float+0x218>
 801259c:	2b59      	cmp	r3, #89	; 0x59
 801259e:	d199      	bne.n	80124d4 <_scanf_float+0x60>
 80125a0:	2d07      	cmp	r5, #7
 80125a2:	d197      	bne.n	80124d4 <_scanf_float+0x60>
 80125a4:	2508      	movs	r5, #8
 80125a6:	e029      	b.n	80125fc <_scanf_float+0x188>
 80125a8:	2b74      	cmp	r3, #116	; 0x74
 80125aa:	d06f      	beq.n	801268c <_scanf_float+0x218>
 80125ac:	2b79      	cmp	r3, #121	; 0x79
 80125ae:	e7f6      	b.n	801259e <_scanf_float+0x12a>
 80125b0:	6821      	ldr	r1, [r4, #0]
 80125b2:	05c8      	lsls	r0, r1, #23
 80125b4:	d51a      	bpl.n	80125ec <_scanf_float+0x178>
 80125b6:	9b02      	ldr	r3, [sp, #8]
 80125b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80125bc:	6021      	str	r1, [r4, #0]
 80125be:	f109 0901 	add.w	r9, r9, #1
 80125c2:	b11b      	cbz	r3, 80125cc <_scanf_float+0x158>
 80125c4:	3b01      	subs	r3, #1
 80125c6:	3201      	adds	r2, #1
 80125c8:	9302      	str	r3, [sp, #8]
 80125ca:	60a2      	str	r2, [r4, #8]
 80125cc:	68a3      	ldr	r3, [r4, #8]
 80125ce:	3b01      	subs	r3, #1
 80125d0:	60a3      	str	r3, [r4, #8]
 80125d2:	6923      	ldr	r3, [r4, #16]
 80125d4:	3301      	adds	r3, #1
 80125d6:	6123      	str	r3, [r4, #16]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	3b01      	subs	r3, #1
 80125dc:	2b00      	cmp	r3, #0
 80125de:	607b      	str	r3, [r7, #4]
 80125e0:	f340 8084 	ble.w	80126ec <_scanf_float+0x278>
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	3301      	adds	r3, #1
 80125e8:	603b      	str	r3, [r7, #0]
 80125ea:	e766      	b.n	80124ba <_scanf_float+0x46>
 80125ec:	eb1a 0f05 	cmn.w	sl, r5
 80125f0:	f47f af70 	bne.w	80124d4 <_scanf_float+0x60>
 80125f4:	6822      	ldr	r2, [r4, #0]
 80125f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80125fa:	6022      	str	r2, [r4, #0]
 80125fc:	f806 3b01 	strb.w	r3, [r6], #1
 8012600:	e7e4      	b.n	80125cc <_scanf_float+0x158>
 8012602:	6822      	ldr	r2, [r4, #0]
 8012604:	0610      	lsls	r0, r2, #24
 8012606:	f57f af65 	bpl.w	80124d4 <_scanf_float+0x60>
 801260a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801260e:	e7f4      	b.n	80125fa <_scanf_float+0x186>
 8012610:	f1ba 0f00 	cmp.w	sl, #0
 8012614:	d10e      	bne.n	8012634 <_scanf_float+0x1c0>
 8012616:	f1b9 0f00 	cmp.w	r9, #0
 801261a:	d10e      	bne.n	801263a <_scanf_float+0x1c6>
 801261c:	6822      	ldr	r2, [r4, #0]
 801261e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012622:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012626:	d108      	bne.n	801263a <_scanf_float+0x1c6>
 8012628:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801262c:	6022      	str	r2, [r4, #0]
 801262e:	f04f 0a01 	mov.w	sl, #1
 8012632:	e7e3      	b.n	80125fc <_scanf_float+0x188>
 8012634:	f1ba 0f02 	cmp.w	sl, #2
 8012638:	d055      	beq.n	80126e6 <_scanf_float+0x272>
 801263a:	2d01      	cmp	r5, #1
 801263c:	d002      	beq.n	8012644 <_scanf_float+0x1d0>
 801263e:	2d04      	cmp	r5, #4
 8012640:	f47f af48 	bne.w	80124d4 <_scanf_float+0x60>
 8012644:	3501      	adds	r5, #1
 8012646:	b2ed      	uxtb	r5, r5
 8012648:	e7d8      	b.n	80125fc <_scanf_float+0x188>
 801264a:	f1ba 0f01 	cmp.w	sl, #1
 801264e:	f47f af41 	bne.w	80124d4 <_scanf_float+0x60>
 8012652:	f04f 0a02 	mov.w	sl, #2
 8012656:	e7d1      	b.n	80125fc <_scanf_float+0x188>
 8012658:	b97d      	cbnz	r5, 801267a <_scanf_float+0x206>
 801265a:	f1b9 0f00 	cmp.w	r9, #0
 801265e:	f47f af3c 	bne.w	80124da <_scanf_float+0x66>
 8012662:	6822      	ldr	r2, [r4, #0]
 8012664:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012668:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801266c:	f47f af39 	bne.w	80124e2 <_scanf_float+0x6e>
 8012670:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012674:	6022      	str	r2, [r4, #0]
 8012676:	2501      	movs	r5, #1
 8012678:	e7c0      	b.n	80125fc <_scanf_float+0x188>
 801267a:	2d03      	cmp	r5, #3
 801267c:	d0e2      	beq.n	8012644 <_scanf_float+0x1d0>
 801267e:	2d05      	cmp	r5, #5
 8012680:	e7de      	b.n	8012640 <_scanf_float+0x1cc>
 8012682:	2d02      	cmp	r5, #2
 8012684:	f47f af26 	bne.w	80124d4 <_scanf_float+0x60>
 8012688:	2503      	movs	r5, #3
 801268a:	e7b7      	b.n	80125fc <_scanf_float+0x188>
 801268c:	2d06      	cmp	r5, #6
 801268e:	f47f af21 	bne.w	80124d4 <_scanf_float+0x60>
 8012692:	2507      	movs	r5, #7
 8012694:	e7b2      	b.n	80125fc <_scanf_float+0x188>
 8012696:	6822      	ldr	r2, [r4, #0]
 8012698:	0591      	lsls	r1, r2, #22
 801269a:	f57f af1b 	bpl.w	80124d4 <_scanf_float+0x60>
 801269e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80126a2:	6022      	str	r2, [r4, #0]
 80126a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80126a8:	e7a8      	b.n	80125fc <_scanf_float+0x188>
 80126aa:	6822      	ldr	r2, [r4, #0]
 80126ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80126b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80126b4:	d006      	beq.n	80126c4 <_scanf_float+0x250>
 80126b6:	0550      	lsls	r0, r2, #21
 80126b8:	f57f af0c 	bpl.w	80124d4 <_scanf_float+0x60>
 80126bc:	f1b9 0f00 	cmp.w	r9, #0
 80126c0:	f43f af0f 	beq.w	80124e2 <_scanf_float+0x6e>
 80126c4:	0591      	lsls	r1, r2, #22
 80126c6:	bf58      	it	pl
 80126c8:	9901      	ldrpl	r1, [sp, #4]
 80126ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80126ce:	bf58      	it	pl
 80126d0:	eba9 0101 	subpl.w	r1, r9, r1
 80126d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80126d8:	bf58      	it	pl
 80126da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80126de:	6022      	str	r2, [r4, #0]
 80126e0:	f04f 0900 	mov.w	r9, #0
 80126e4:	e78a      	b.n	80125fc <_scanf_float+0x188>
 80126e6:	f04f 0a03 	mov.w	sl, #3
 80126ea:	e787      	b.n	80125fc <_scanf_float+0x188>
 80126ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80126f0:	4639      	mov	r1, r7
 80126f2:	4640      	mov	r0, r8
 80126f4:	4798      	blx	r3
 80126f6:	2800      	cmp	r0, #0
 80126f8:	f43f aedf 	beq.w	80124ba <_scanf_float+0x46>
 80126fc:	e6ea      	b.n	80124d4 <_scanf_float+0x60>
 80126fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012702:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012706:	463a      	mov	r2, r7
 8012708:	4640      	mov	r0, r8
 801270a:	4798      	blx	r3
 801270c:	6923      	ldr	r3, [r4, #16]
 801270e:	3b01      	subs	r3, #1
 8012710:	6123      	str	r3, [r4, #16]
 8012712:	e6ec      	b.n	80124ee <_scanf_float+0x7a>
 8012714:	1e6b      	subs	r3, r5, #1
 8012716:	2b06      	cmp	r3, #6
 8012718:	d825      	bhi.n	8012766 <_scanf_float+0x2f2>
 801271a:	2d02      	cmp	r5, #2
 801271c:	d836      	bhi.n	801278c <_scanf_float+0x318>
 801271e:	455e      	cmp	r6, fp
 8012720:	f67f aee8 	bls.w	80124f4 <_scanf_float+0x80>
 8012724:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012728:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801272c:	463a      	mov	r2, r7
 801272e:	4640      	mov	r0, r8
 8012730:	4798      	blx	r3
 8012732:	6923      	ldr	r3, [r4, #16]
 8012734:	3b01      	subs	r3, #1
 8012736:	6123      	str	r3, [r4, #16]
 8012738:	e7f1      	b.n	801271e <_scanf_float+0x2aa>
 801273a:	9802      	ldr	r0, [sp, #8]
 801273c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012740:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012744:	9002      	str	r0, [sp, #8]
 8012746:	463a      	mov	r2, r7
 8012748:	4640      	mov	r0, r8
 801274a:	4798      	blx	r3
 801274c:	6923      	ldr	r3, [r4, #16]
 801274e:	3b01      	subs	r3, #1
 8012750:	6123      	str	r3, [r4, #16]
 8012752:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012756:	fa5f fa8a 	uxtb.w	sl, sl
 801275a:	f1ba 0f02 	cmp.w	sl, #2
 801275e:	d1ec      	bne.n	801273a <_scanf_float+0x2c6>
 8012760:	3d03      	subs	r5, #3
 8012762:	b2ed      	uxtb	r5, r5
 8012764:	1b76      	subs	r6, r6, r5
 8012766:	6823      	ldr	r3, [r4, #0]
 8012768:	05da      	lsls	r2, r3, #23
 801276a:	d52f      	bpl.n	80127cc <_scanf_float+0x358>
 801276c:	055b      	lsls	r3, r3, #21
 801276e:	d510      	bpl.n	8012792 <_scanf_float+0x31e>
 8012770:	455e      	cmp	r6, fp
 8012772:	f67f aebf 	bls.w	80124f4 <_scanf_float+0x80>
 8012776:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801277a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801277e:	463a      	mov	r2, r7
 8012780:	4640      	mov	r0, r8
 8012782:	4798      	blx	r3
 8012784:	6923      	ldr	r3, [r4, #16]
 8012786:	3b01      	subs	r3, #1
 8012788:	6123      	str	r3, [r4, #16]
 801278a:	e7f1      	b.n	8012770 <_scanf_float+0x2fc>
 801278c:	46aa      	mov	sl, r5
 801278e:	9602      	str	r6, [sp, #8]
 8012790:	e7df      	b.n	8012752 <_scanf_float+0x2de>
 8012792:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012796:	6923      	ldr	r3, [r4, #16]
 8012798:	2965      	cmp	r1, #101	; 0x65
 801279a:	f103 33ff 	add.w	r3, r3, #4294967295
 801279e:	f106 35ff 	add.w	r5, r6, #4294967295
 80127a2:	6123      	str	r3, [r4, #16]
 80127a4:	d00c      	beq.n	80127c0 <_scanf_float+0x34c>
 80127a6:	2945      	cmp	r1, #69	; 0x45
 80127a8:	d00a      	beq.n	80127c0 <_scanf_float+0x34c>
 80127aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80127ae:	463a      	mov	r2, r7
 80127b0:	4640      	mov	r0, r8
 80127b2:	4798      	blx	r3
 80127b4:	6923      	ldr	r3, [r4, #16]
 80127b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80127ba:	3b01      	subs	r3, #1
 80127bc:	1eb5      	subs	r5, r6, #2
 80127be:	6123      	str	r3, [r4, #16]
 80127c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80127c4:	463a      	mov	r2, r7
 80127c6:	4640      	mov	r0, r8
 80127c8:	4798      	blx	r3
 80127ca:	462e      	mov	r6, r5
 80127cc:	6825      	ldr	r5, [r4, #0]
 80127ce:	f015 0510 	ands.w	r5, r5, #16
 80127d2:	d159      	bne.n	8012888 <_scanf_float+0x414>
 80127d4:	7035      	strb	r5, [r6, #0]
 80127d6:	6823      	ldr	r3, [r4, #0]
 80127d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80127dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80127e0:	d11b      	bne.n	801281a <_scanf_float+0x3a6>
 80127e2:	9b01      	ldr	r3, [sp, #4]
 80127e4:	454b      	cmp	r3, r9
 80127e6:	eba3 0209 	sub.w	r2, r3, r9
 80127ea:	d123      	bne.n	8012834 <_scanf_float+0x3c0>
 80127ec:	2200      	movs	r2, #0
 80127ee:	4659      	mov	r1, fp
 80127f0:	4640      	mov	r0, r8
 80127f2:	f000 ff7b 	bl	80136ec <_strtod_r>
 80127f6:	6822      	ldr	r2, [r4, #0]
 80127f8:	9b03      	ldr	r3, [sp, #12]
 80127fa:	f012 0f02 	tst.w	r2, #2
 80127fe:	ec57 6b10 	vmov	r6, r7, d0
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	d021      	beq.n	801284a <_scanf_float+0x3d6>
 8012806:	9903      	ldr	r1, [sp, #12]
 8012808:	1d1a      	adds	r2, r3, #4
 801280a:	600a      	str	r2, [r1, #0]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	e9c3 6700 	strd	r6, r7, [r3]
 8012812:	68e3      	ldr	r3, [r4, #12]
 8012814:	3301      	adds	r3, #1
 8012816:	60e3      	str	r3, [r4, #12]
 8012818:	e66d      	b.n	80124f6 <_scanf_float+0x82>
 801281a:	9b04      	ldr	r3, [sp, #16]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d0e5      	beq.n	80127ec <_scanf_float+0x378>
 8012820:	9905      	ldr	r1, [sp, #20]
 8012822:	230a      	movs	r3, #10
 8012824:	462a      	mov	r2, r5
 8012826:	3101      	adds	r1, #1
 8012828:	4640      	mov	r0, r8
 801282a:	f000 ffe7 	bl	80137fc <_strtol_r>
 801282e:	9b04      	ldr	r3, [sp, #16]
 8012830:	9e05      	ldr	r6, [sp, #20]
 8012832:	1ac2      	subs	r2, r0, r3
 8012834:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012838:	429e      	cmp	r6, r3
 801283a:	bf28      	it	cs
 801283c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012840:	4912      	ldr	r1, [pc, #72]	; (801288c <_scanf_float+0x418>)
 8012842:	4630      	mov	r0, r6
 8012844:	f000 f8ca 	bl	80129dc <siprintf>
 8012848:	e7d0      	b.n	80127ec <_scanf_float+0x378>
 801284a:	9903      	ldr	r1, [sp, #12]
 801284c:	f012 0f04 	tst.w	r2, #4
 8012850:	f103 0204 	add.w	r2, r3, #4
 8012854:	600a      	str	r2, [r1, #0]
 8012856:	d1d9      	bne.n	801280c <_scanf_float+0x398>
 8012858:	f8d3 8000 	ldr.w	r8, [r3]
 801285c:	ee10 2a10 	vmov	r2, s0
 8012860:	ee10 0a10 	vmov	r0, s0
 8012864:	463b      	mov	r3, r7
 8012866:	4639      	mov	r1, r7
 8012868:	f7ee f960 	bl	8000b2c <__aeabi_dcmpun>
 801286c:	b128      	cbz	r0, 801287a <_scanf_float+0x406>
 801286e:	4808      	ldr	r0, [pc, #32]	; (8012890 <_scanf_float+0x41c>)
 8012870:	f000 f8ae 	bl	80129d0 <nanf>
 8012874:	ed88 0a00 	vstr	s0, [r8]
 8012878:	e7cb      	b.n	8012812 <_scanf_float+0x39e>
 801287a:	4630      	mov	r0, r6
 801287c:	4639      	mov	r1, r7
 801287e:	f7ee f9b3 	bl	8000be8 <__aeabi_d2f>
 8012882:	f8c8 0000 	str.w	r0, [r8]
 8012886:	e7c4      	b.n	8012812 <_scanf_float+0x39e>
 8012888:	2500      	movs	r5, #0
 801288a:	e634      	b.n	80124f6 <_scanf_float+0x82>
 801288c:	08016f3c 	.word	0x08016f3c
 8012890:	08017348 	.word	0x08017348

08012894 <iprintf>:
 8012894:	b40f      	push	{r0, r1, r2, r3}
 8012896:	4b0a      	ldr	r3, [pc, #40]	; (80128c0 <iprintf+0x2c>)
 8012898:	b513      	push	{r0, r1, r4, lr}
 801289a:	681c      	ldr	r4, [r3, #0]
 801289c:	b124      	cbz	r4, 80128a8 <iprintf+0x14>
 801289e:	69a3      	ldr	r3, [r4, #24]
 80128a0:	b913      	cbnz	r3, 80128a8 <iprintf+0x14>
 80128a2:	4620      	mov	r0, r4
 80128a4:	f7fe ff80 	bl	80117a8 <__sinit>
 80128a8:	ab05      	add	r3, sp, #20
 80128aa:	9a04      	ldr	r2, [sp, #16]
 80128ac:	68a1      	ldr	r1, [r4, #8]
 80128ae:	9301      	str	r3, [sp, #4]
 80128b0:	4620      	mov	r0, r4
 80128b2:	f003 f98b 	bl	8015bcc <_vfiprintf_r>
 80128b6:	b002      	add	sp, #8
 80128b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128bc:	b004      	add	sp, #16
 80128be:	4770      	bx	lr
 80128c0:	200004d0 	.word	0x200004d0

080128c4 <_puts_r>:
 80128c4:	b570      	push	{r4, r5, r6, lr}
 80128c6:	460e      	mov	r6, r1
 80128c8:	4605      	mov	r5, r0
 80128ca:	b118      	cbz	r0, 80128d4 <_puts_r+0x10>
 80128cc:	6983      	ldr	r3, [r0, #24]
 80128ce:	b90b      	cbnz	r3, 80128d4 <_puts_r+0x10>
 80128d0:	f7fe ff6a 	bl	80117a8 <__sinit>
 80128d4:	69ab      	ldr	r3, [r5, #24]
 80128d6:	68ac      	ldr	r4, [r5, #8]
 80128d8:	b913      	cbnz	r3, 80128e0 <_puts_r+0x1c>
 80128da:	4628      	mov	r0, r5
 80128dc:	f7fe ff64 	bl	80117a8 <__sinit>
 80128e0:	4b2c      	ldr	r3, [pc, #176]	; (8012994 <_puts_r+0xd0>)
 80128e2:	429c      	cmp	r4, r3
 80128e4:	d120      	bne.n	8012928 <_puts_r+0x64>
 80128e6:	686c      	ldr	r4, [r5, #4]
 80128e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128ea:	07db      	lsls	r3, r3, #31
 80128ec:	d405      	bmi.n	80128fa <_puts_r+0x36>
 80128ee:	89a3      	ldrh	r3, [r4, #12]
 80128f0:	0598      	lsls	r0, r3, #22
 80128f2:	d402      	bmi.n	80128fa <_puts_r+0x36>
 80128f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128f6:	f7ff f81a 	bl	801192e <__retarget_lock_acquire_recursive>
 80128fa:	89a3      	ldrh	r3, [r4, #12]
 80128fc:	0719      	lsls	r1, r3, #28
 80128fe:	d51d      	bpl.n	801293c <_puts_r+0x78>
 8012900:	6923      	ldr	r3, [r4, #16]
 8012902:	b1db      	cbz	r3, 801293c <_puts_r+0x78>
 8012904:	3e01      	subs	r6, #1
 8012906:	68a3      	ldr	r3, [r4, #8]
 8012908:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801290c:	3b01      	subs	r3, #1
 801290e:	60a3      	str	r3, [r4, #8]
 8012910:	bb39      	cbnz	r1, 8012962 <_puts_r+0x9e>
 8012912:	2b00      	cmp	r3, #0
 8012914:	da38      	bge.n	8012988 <_puts_r+0xc4>
 8012916:	4622      	mov	r2, r4
 8012918:	210a      	movs	r1, #10
 801291a:	4628      	mov	r0, r5
 801291c:	f000 ffaa 	bl	8013874 <__swbuf_r>
 8012920:	3001      	adds	r0, #1
 8012922:	d011      	beq.n	8012948 <_puts_r+0x84>
 8012924:	250a      	movs	r5, #10
 8012926:	e011      	b.n	801294c <_puts_r+0x88>
 8012928:	4b1b      	ldr	r3, [pc, #108]	; (8012998 <_puts_r+0xd4>)
 801292a:	429c      	cmp	r4, r3
 801292c:	d101      	bne.n	8012932 <_puts_r+0x6e>
 801292e:	68ac      	ldr	r4, [r5, #8]
 8012930:	e7da      	b.n	80128e8 <_puts_r+0x24>
 8012932:	4b1a      	ldr	r3, [pc, #104]	; (801299c <_puts_r+0xd8>)
 8012934:	429c      	cmp	r4, r3
 8012936:	bf08      	it	eq
 8012938:	68ec      	ldreq	r4, [r5, #12]
 801293a:	e7d5      	b.n	80128e8 <_puts_r+0x24>
 801293c:	4621      	mov	r1, r4
 801293e:	4628      	mov	r0, r5
 8012940:	f000 fffc 	bl	801393c <__swsetup_r>
 8012944:	2800      	cmp	r0, #0
 8012946:	d0dd      	beq.n	8012904 <_puts_r+0x40>
 8012948:	f04f 35ff 	mov.w	r5, #4294967295
 801294c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801294e:	07da      	lsls	r2, r3, #31
 8012950:	d405      	bmi.n	801295e <_puts_r+0x9a>
 8012952:	89a3      	ldrh	r3, [r4, #12]
 8012954:	059b      	lsls	r3, r3, #22
 8012956:	d402      	bmi.n	801295e <_puts_r+0x9a>
 8012958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801295a:	f7fe ffe9 	bl	8011930 <__retarget_lock_release_recursive>
 801295e:	4628      	mov	r0, r5
 8012960:	bd70      	pop	{r4, r5, r6, pc}
 8012962:	2b00      	cmp	r3, #0
 8012964:	da04      	bge.n	8012970 <_puts_r+0xac>
 8012966:	69a2      	ldr	r2, [r4, #24]
 8012968:	429a      	cmp	r2, r3
 801296a:	dc06      	bgt.n	801297a <_puts_r+0xb6>
 801296c:	290a      	cmp	r1, #10
 801296e:	d004      	beq.n	801297a <_puts_r+0xb6>
 8012970:	6823      	ldr	r3, [r4, #0]
 8012972:	1c5a      	adds	r2, r3, #1
 8012974:	6022      	str	r2, [r4, #0]
 8012976:	7019      	strb	r1, [r3, #0]
 8012978:	e7c5      	b.n	8012906 <_puts_r+0x42>
 801297a:	4622      	mov	r2, r4
 801297c:	4628      	mov	r0, r5
 801297e:	f000 ff79 	bl	8013874 <__swbuf_r>
 8012982:	3001      	adds	r0, #1
 8012984:	d1bf      	bne.n	8012906 <_puts_r+0x42>
 8012986:	e7df      	b.n	8012948 <_puts_r+0x84>
 8012988:	6823      	ldr	r3, [r4, #0]
 801298a:	250a      	movs	r5, #10
 801298c:	1c5a      	adds	r2, r3, #1
 801298e:	6022      	str	r2, [r4, #0]
 8012990:	701d      	strb	r5, [r3, #0]
 8012992:	e7db      	b.n	801294c <_puts_r+0x88>
 8012994:	08016ec4 	.word	0x08016ec4
 8012998:	08016ee4 	.word	0x08016ee4
 801299c:	08016ea4 	.word	0x08016ea4

080129a0 <puts>:
 80129a0:	4b02      	ldr	r3, [pc, #8]	; (80129ac <puts+0xc>)
 80129a2:	4601      	mov	r1, r0
 80129a4:	6818      	ldr	r0, [r3, #0]
 80129a6:	f7ff bf8d 	b.w	80128c4 <_puts_r>
 80129aa:	bf00      	nop
 80129ac:	200004d0 	.word	0x200004d0

080129b0 <_sbrk_r>:
 80129b0:	b538      	push	{r3, r4, r5, lr}
 80129b2:	4d06      	ldr	r5, [pc, #24]	; (80129cc <_sbrk_r+0x1c>)
 80129b4:	2300      	movs	r3, #0
 80129b6:	4604      	mov	r4, r0
 80129b8:	4608      	mov	r0, r1
 80129ba:	602b      	str	r3, [r5, #0]
 80129bc:	f7f5 ffda 	bl	8008974 <_sbrk>
 80129c0:	1c43      	adds	r3, r0, #1
 80129c2:	d102      	bne.n	80129ca <_sbrk_r+0x1a>
 80129c4:	682b      	ldr	r3, [r5, #0]
 80129c6:	b103      	cbz	r3, 80129ca <_sbrk_r+0x1a>
 80129c8:	6023      	str	r3, [r4, #0]
 80129ca:	bd38      	pop	{r3, r4, r5, pc}
 80129cc:	2000252c 	.word	0x2000252c

080129d0 <nanf>:
 80129d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80129d8 <nanf+0x8>
 80129d4:	4770      	bx	lr
 80129d6:	bf00      	nop
 80129d8:	7fc00000 	.word	0x7fc00000

080129dc <siprintf>:
 80129dc:	b40e      	push	{r1, r2, r3}
 80129de:	b500      	push	{lr}
 80129e0:	b09c      	sub	sp, #112	; 0x70
 80129e2:	ab1d      	add	r3, sp, #116	; 0x74
 80129e4:	9002      	str	r0, [sp, #8]
 80129e6:	9006      	str	r0, [sp, #24]
 80129e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80129ec:	4809      	ldr	r0, [pc, #36]	; (8012a14 <siprintf+0x38>)
 80129ee:	9107      	str	r1, [sp, #28]
 80129f0:	9104      	str	r1, [sp, #16]
 80129f2:	4909      	ldr	r1, [pc, #36]	; (8012a18 <siprintf+0x3c>)
 80129f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80129f8:	9105      	str	r1, [sp, #20]
 80129fa:	6800      	ldr	r0, [r0, #0]
 80129fc:	9301      	str	r3, [sp, #4]
 80129fe:	a902      	add	r1, sp, #8
 8012a00:	f002 ffba 	bl	8015978 <_svfiprintf_r>
 8012a04:	9b02      	ldr	r3, [sp, #8]
 8012a06:	2200      	movs	r2, #0
 8012a08:	701a      	strb	r2, [r3, #0]
 8012a0a:	b01c      	add	sp, #112	; 0x70
 8012a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a10:	b003      	add	sp, #12
 8012a12:	4770      	bx	lr
 8012a14:	200004d0 	.word	0x200004d0
 8012a18:	ffff0208 	.word	0xffff0208

08012a1c <__sread>:
 8012a1c:	b510      	push	{r4, lr}
 8012a1e:	460c      	mov	r4, r1
 8012a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a24:	f003 fa02 	bl	8015e2c <_read_r>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	bfab      	itete	ge
 8012a2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8012a30:	181b      	addge	r3, r3, r0
 8012a32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a36:	bfac      	ite	ge
 8012a38:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a3a:	81a3      	strhlt	r3, [r4, #12]
 8012a3c:	bd10      	pop	{r4, pc}

08012a3e <__swrite>:
 8012a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a42:	461f      	mov	r7, r3
 8012a44:	898b      	ldrh	r3, [r1, #12]
 8012a46:	05db      	lsls	r3, r3, #23
 8012a48:	4605      	mov	r5, r0
 8012a4a:	460c      	mov	r4, r1
 8012a4c:	4616      	mov	r6, r2
 8012a4e:	d505      	bpl.n	8012a5c <__swrite+0x1e>
 8012a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a54:	2302      	movs	r3, #2
 8012a56:	2200      	movs	r2, #0
 8012a58:	f002 f9dc 	bl	8014e14 <_lseek_r>
 8012a5c:	89a3      	ldrh	r3, [r4, #12]
 8012a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a66:	81a3      	strh	r3, [r4, #12]
 8012a68:	4632      	mov	r2, r6
 8012a6a:	463b      	mov	r3, r7
 8012a6c:	4628      	mov	r0, r5
 8012a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a72:	f000 bf51 	b.w	8013918 <_write_r>

08012a76 <__sseek>:
 8012a76:	b510      	push	{r4, lr}
 8012a78:	460c      	mov	r4, r1
 8012a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a7e:	f002 f9c9 	bl	8014e14 <_lseek_r>
 8012a82:	1c43      	adds	r3, r0, #1
 8012a84:	89a3      	ldrh	r3, [r4, #12]
 8012a86:	bf15      	itete	ne
 8012a88:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a92:	81a3      	strheq	r3, [r4, #12]
 8012a94:	bf18      	it	ne
 8012a96:	81a3      	strhne	r3, [r4, #12]
 8012a98:	bd10      	pop	{r4, pc}

08012a9a <__sclose>:
 8012a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a9e:	f000 bfbb 	b.w	8013a18 <_close_r>

08012aa2 <sulp>:
 8012aa2:	b570      	push	{r4, r5, r6, lr}
 8012aa4:	4604      	mov	r4, r0
 8012aa6:	460d      	mov	r5, r1
 8012aa8:	ec45 4b10 	vmov	d0, r4, r5
 8012aac:	4616      	mov	r6, r2
 8012aae:	f002 fdb9 	bl	8015624 <__ulp>
 8012ab2:	ec51 0b10 	vmov	r0, r1, d0
 8012ab6:	b17e      	cbz	r6, 8012ad8 <sulp+0x36>
 8012ab8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012abc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	dd09      	ble.n	8012ad8 <sulp+0x36>
 8012ac4:	051b      	lsls	r3, r3, #20
 8012ac6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012aca:	2400      	movs	r4, #0
 8012acc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012ad0:	4622      	mov	r2, r4
 8012ad2:	462b      	mov	r3, r5
 8012ad4:	f7ed fd90 	bl	80005f8 <__aeabi_dmul>
 8012ad8:	bd70      	pop	{r4, r5, r6, pc}
 8012ada:	0000      	movs	r0, r0
 8012adc:	0000      	movs	r0, r0
	...

08012ae0 <_strtod_l>:
 8012ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ae4:	ed2d 8b02 	vpush	{d8}
 8012ae8:	b09d      	sub	sp, #116	; 0x74
 8012aea:	461f      	mov	r7, r3
 8012aec:	2300      	movs	r3, #0
 8012aee:	9318      	str	r3, [sp, #96]	; 0x60
 8012af0:	4ba2      	ldr	r3, [pc, #648]	; (8012d7c <_strtod_l+0x29c>)
 8012af2:	9213      	str	r2, [sp, #76]	; 0x4c
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	9305      	str	r3, [sp, #20]
 8012af8:	4604      	mov	r4, r0
 8012afa:	4618      	mov	r0, r3
 8012afc:	4688      	mov	r8, r1
 8012afe:	f7ed fb67 	bl	80001d0 <strlen>
 8012b02:	f04f 0a00 	mov.w	sl, #0
 8012b06:	4605      	mov	r5, r0
 8012b08:	f04f 0b00 	mov.w	fp, #0
 8012b0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b12:	781a      	ldrb	r2, [r3, #0]
 8012b14:	2a2b      	cmp	r2, #43	; 0x2b
 8012b16:	d04e      	beq.n	8012bb6 <_strtod_l+0xd6>
 8012b18:	d83b      	bhi.n	8012b92 <_strtod_l+0xb2>
 8012b1a:	2a0d      	cmp	r2, #13
 8012b1c:	d834      	bhi.n	8012b88 <_strtod_l+0xa8>
 8012b1e:	2a08      	cmp	r2, #8
 8012b20:	d834      	bhi.n	8012b8c <_strtod_l+0xac>
 8012b22:	2a00      	cmp	r2, #0
 8012b24:	d03e      	beq.n	8012ba4 <_strtod_l+0xc4>
 8012b26:	2300      	movs	r3, #0
 8012b28:	930a      	str	r3, [sp, #40]	; 0x28
 8012b2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012b2c:	7833      	ldrb	r3, [r6, #0]
 8012b2e:	2b30      	cmp	r3, #48	; 0x30
 8012b30:	f040 80b0 	bne.w	8012c94 <_strtod_l+0x1b4>
 8012b34:	7873      	ldrb	r3, [r6, #1]
 8012b36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012b3a:	2b58      	cmp	r3, #88	; 0x58
 8012b3c:	d168      	bne.n	8012c10 <_strtod_l+0x130>
 8012b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b40:	9301      	str	r3, [sp, #4]
 8012b42:	ab18      	add	r3, sp, #96	; 0x60
 8012b44:	9702      	str	r7, [sp, #8]
 8012b46:	9300      	str	r3, [sp, #0]
 8012b48:	4a8d      	ldr	r2, [pc, #564]	; (8012d80 <_strtod_l+0x2a0>)
 8012b4a:	ab19      	add	r3, sp, #100	; 0x64
 8012b4c:	a917      	add	r1, sp, #92	; 0x5c
 8012b4e:	4620      	mov	r0, r4
 8012b50:	f001 fe54 	bl	80147fc <__gethex>
 8012b54:	f010 0707 	ands.w	r7, r0, #7
 8012b58:	4605      	mov	r5, r0
 8012b5a:	d005      	beq.n	8012b68 <_strtod_l+0x88>
 8012b5c:	2f06      	cmp	r7, #6
 8012b5e:	d12c      	bne.n	8012bba <_strtod_l+0xda>
 8012b60:	3601      	adds	r6, #1
 8012b62:	2300      	movs	r3, #0
 8012b64:	9617      	str	r6, [sp, #92]	; 0x5c
 8012b66:	930a      	str	r3, [sp, #40]	; 0x28
 8012b68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	f040 8590 	bne.w	8013690 <_strtod_l+0xbb0>
 8012b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b72:	b1eb      	cbz	r3, 8012bb0 <_strtod_l+0xd0>
 8012b74:	4652      	mov	r2, sl
 8012b76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012b7a:	ec43 2b10 	vmov	d0, r2, r3
 8012b7e:	b01d      	add	sp, #116	; 0x74
 8012b80:	ecbd 8b02 	vpop	{d8}
 8012b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b88:	2a20      	cmp	r2, #32
 8012b8a:	d1cc      	bne.n	8012b26 <_strtod_l+0x46>
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012b90:	e7be      	b.n	8012b10 <_strtod_l+0x30>
 8012b92:	2a2d      	cmp	r2, #45	; 0x2d
 8012b94:	d1c7      	bne.n	8012b26 <_strtod_l+0x46>
 8012b96:	2201      	movs	r2, #1
 8012b98:	920a      	str	r2, [sp, #40]	; 0x28
 8012b9a:	1c5a      	adds	r2, r3, #1
 8012b9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8012b9e:	785b      	ldrb	r3, [r3, #1]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d1c2      	bne.n	8012b2a <_strtod_l+0x4a>
 8012ba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012ba6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	f040 856e 	bne.w	801368c <_strtod_l+0xbac>
 8012bb0:	4652      	mov	r2, sl
 8012bb2:	465b      	mov	r3, fp
 8012bb4:	e7e1      	b.n	8012b7a <_strtod_l+0x9a>
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	e7ee      	b.n	8012b98 <_strtod_l+0xb8>
 8012bba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012bbc:	b13a      	cbz	r2, 8012bce <_strtod_l+0xee>
 8012bbe:	2135      	movs	r1, #53	; 0x35
 8012bc0:	a81a      	add	r0, sp, #104	; 0x68
 8012bc2:	f002 fe3a 	bl	801583a <__copybits>
 8012bc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f002 f9f9 	bl	8014fc0 <_Bfree>
 8012bce:	3f01      	subs	r7, #1
 8012bd0:	2f04      	cmp	r7, #4
 8012bd2:	d806      	bhi.n	8012be2 <_strtod_l+0x102>
 8012bd4:	e8df f007 	tbb	[pc, r7]
 8012bd8:	1714030a 	.word	0x1714030a
 8012bdc:	0a          	.byte	0x0a
 8012bdd:	00          	.byte	0x00
 8012bde:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8012be2:	0728      	lsls	r0, r5, #28
 8012be4:	d5c0      	bpl.n	8012b68 <_strtod_l+0x88>
 8012be6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012bea:	e7bd      	b.n	8012b68 <_strtod_l+0x88>
 8012bec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8012bf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012bf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012bf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012bfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012bfe:	e7f0      	b.n	8012be2 <_strtod_l+0x102>
 8012c00:	f8df b180 	ldr.w	fp, [pc, #384]	; 8012d84 <_strtod_l+0x2a4>
 8012c04:	e7ed      	b.n	8012be2 <_strtod_l+0x102>
 8012c06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012c0a:	f04f 3aff 	mov.w	sl, #4294967295
 8012c0e:	e7e8      	b.n	8012be2 <_strtod_l+0x102>
 8012c10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c12:	1c5a      	adds	r2, r3, #1
 8012c14:	9217      	str	r2, [sp, #92]	; 0x5c
 8012c16:	785b      	ldrb	r3, [r3, #1]
 8012c18:	2b30      	cmp	r3, #48	; 0x30
 8012c1a:	d0f9      	beq.n	8012c10 <_strtod_l+0x130>
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d0a3      	beq.n	8012b68 <_strtod_l+0x88>
 8012c20:	2301      	movs	r3, #1
 8012c22:	f04f 0900 	mov.w	r9, #0
 8012c26:	9304      	str	r3, [sp, #16]
 8012c28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c2a:	9308      	str	r3, [sp, #32]
 8012c2c:	f8cd 901c 	str.w	r9, [sp, #28]
 8012c30:	464f      	mov	r7, r9
 8012c32:	220a      	movs	r2, #10
 8012c34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012c36:	7806      	ldrb	r6, [r0, #0]
 8012c38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012c3c:	b2d9      	uxtb	r1, r3
 8012c3e:	2909      	cmp	r1, #9
 8012c40:	d92a      	bls.n	8012c98 <_strtod_l+0x1b8>
 8012c42:	9905      	ldr	r1, [sp, #20]
 8012c44:	462a      	mov	r2, r5
 8012c46:	f003 f90b 	bl	8015e60 <strncmp>
 8012c4a:	b398      	cbz	r0, 8012cb4 <_strtod_l+0x1d4>
 8012c4c:	2000      	movs	r0, #0
 8012c4e:	4632      	mov	r2, r6
 8012c50:	463d      	mov	r5, r7
 8012c52:	9005      	str	r0, [sp, #20]
 8012c54:	4603      	mov	r3, r0
 8012c56:	2a65      	cmp	r2, #101	; 0x65
 8012c58:	d001      	beq.n	8012c5e <_strtod_l+0x17e>
 8012c5a:	2a45      	cmp	r2, #69	; 0x45
 8012c5c:	d118      	bne.n	8012c90 <_strtod_l+0x1b0>
 8012c5e:	b91d      	cbnz	r5, 8012c68 <_strtod_l+0x188>
 8012c60:	9a04      	ldr	r2, [sp, #16]
 8012c62:	4302      	orrs	r2, r0
 8012c64:	d09e      	beq.n	8012ba4 <_strtod_l+0xc4>
 8012c66:	2500      	movs	r5, #0
 8012c68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8012c6c:	f108 0201 	add.w	r2, r8, #1
 8012c70:	9217      	str	r2, [sp, #92]	; 0x5c
 8012c72:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012c76:	2a2b      	cmp	r2, #43	; 0x2b
 8012c78:	d075      	beq.n	8012d66 <_strtod_l+0x286>
 8012c7a:	2a2d      	cmp	r2, #45	; 0x2d
 8012c7c:	d07b      	beq.n	8012d76 <_strtod_l+0x296>
 8012c7e:	f04f 0c00 	mov.w	ip, #0
 8012c82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012c86:	2909      	cmp	r1, #9
 8012c88:	f240 8082 	bls.w	8012d90 <_strtod_l+0x2b0>
 8012c8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012c90:	2600      	movs	r6, #0
 8012c92:	e09d      	b.n	8012dd0 <_strtod_l+0x2f0>
 8012c94:	2300      	movs	r3, #0
 8012c96:	e7c4      	b.n	8012c22 <_strtod_l+0x142>
 8012c98:	2f08      	cmp	r7, #8
 8012c9a:	bfd8      	it	le
 8012c9c:	9907      	ldrle	r1, [sp, #28]
 8012c9e:	f100 0001 	add.w	r0, r0, #1
 8012ca2:	bfda      	itte	le
 8012ca4:	fb02 3301 	mlale	r3, r2, r1, r3
 8012ca8:	9307      	strle	r3, [sp, #28]
 8012caa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012cae:	3701      	adds	r7, #1
 8012cb0:	9017      	str	r0, [sp, #92]	; 0x5c
 8012cb2:	e7bf      	b.n	8012c34 <_strtod_l+0x154>
 8012cb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012cb6:	195a      	adds	r2, r3, r5
 8012cb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8012cba:	5d5a      	ldrb	r2, [r3, r5]
 8012cbc:	2f00      	cmp	r7, #0
 8012cbe:	d037      	beq.n	8012d30 <_strtod_l+0x250>
 8012cc0:	9005      	str	r0, [sp, #20]
 8012cc2:	463d      	mov	r5, r7
 8012cc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012cc8:	2b09      	cmp	r3, #9
 8012cca:	d912      	bls.n	8012cf2 <_strtod_l+0x212>
 8012ccc:	2301      	movs	r3, #1
 8012cce:	e7c2      	b.n	8012c56 <_strtod_l+0x176>
 8012cd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012cd2:	1c5a      	adds	r2, r3, #1
 8012cd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8012cd6:	785a      	ldrb	r2, [r3, #1]
 8012cd8:	3001      	adds	r0, #1
 8012cda:	2a30      	cmp	r2, #48	; 0x30
 8012cdc:	d0f8      	beq.n	8012cd0 <_strtod_l+0x1f0>
 8012cde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012ce2:	2b08      	cmp	r3, #8
 8012ce4:	f200 84d9 	bhi.w	801369a <_strtod_l+0xbba>
 8012ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012cea:	9005      	str	r0, [sp, #20]
 8012cec:	2000      	movs	r0, #0
 8012cee:	9308      	str	r3, [sp, #32]
 8012cf0:	4605      	mov	r5, r0
 8012cf2:	3a30      	subs	r2, #48	; 0x30
 8012cf4:	f100 0301 	add.w	r3, r0, #1
 8012cf8:	d014      	beq.n	8012d24 <_strtod_l+0x244>
 8012cfa:	9905      	ldr	r1, [sp, #20]
 8012cfc:	4419      	add	r1, r3
 8012cfe:	9105      	str	r1, [sp, #20]
 8012d00:	462b      	mov	r3, r5
 8012d02:	eb00 0e05 	add.w	lr, r0, r5
 8012d06:	210a      	movs	r1, #10
 8012d08:	4573      	cmp	r3, lr
 8012d0a:	d113      	bne.n	8012d34 <_strtod_l+0x254>
 8012d0c:	182b      	adds	r3, r5, r0
 8012d0e:	2b08      	cmp	r3, #8
 8012d10:	f105 0501 	add.w	r5, r5, #1
 8012d14:	4405      	add	r5, r0
 8012d16:	dc1c      	bgt.n	8012d52 <_strtod_l+0x272>
 8012d18:	9907      	ldr	r1, [sp, #28]
 8012d1a:	230a      	movs	r3, #10
 8012d1c:	fb03 2301 	mla	r3, r3, r1, r2
 8012d20:	9307      	str	r3, [sp, #28]
 8012d22:	2300      	movs	r3, #0
 8012d24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012d26:	1c51      	adds	r1, r2, #1
 8012d28:	9117      	str	r1, [sp, #92]	; 0x5c
 8012d2a:	7852      	ldrb	r2, [r2, #1]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	e7c9      	b.n	8012cc4 <_strtod_l+0x1e4>
 8012d30:	4638      	mov	r0, r7
 8012d32:	e7d2      	b.n	8012cda <_strtod_l+0x1fa>
 8012d34:	2b08      	cmp	r3, #8
 8012d36:	dc04      	bgt.n	8012d42 <_strtod_l+0x262>
 8012d38:	9e07      	ldr	r6, [sp, #28]
 8012d3a:	434e      	muls	r6, r1
 8012d3c:	9607      	str	r6, [sp, #28]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	e7e2      	b.n	8012d08 <_strtod_l+0x228>
 8012d42:	f103 0c01 	add.w	ip, r3, #1
 8012d46:	f1bc 0f10 	cmp.w	ip, #16
 8012d4a:	bfd8      	it	le
 8012d4c:	fb01 f909 	mulle.w	r9, r1, r9
 8012d50:	e7f5      	b.n	8012d3e <_strtod_l+0x25e>
 8012d52:	2d10      	cmp	r5, #16
 8012d54:	bfdc      	itt	le
 8012d56:	230a      	movle	r3, #10
 8012d58:	fb03 2909 	mlale	r9, r3, r9, r2
 8012d5c:	e7e1      	b.n	8012d22 <_strtod_l+0x242>
 8012d5e:	2300      	movs	r3, #0
 8012d60:	9305      	str	r3, [sp, #20]
 8012d62:	2301      	movs	r3, #1
 8012d64:	e77c      	b.n	8012c60 <_strtod_l+0x180>
 8012d66:	f04f 0c00 	mov.w	ip, #0
 8012d6a:	f108 0202 	add.w	r2, r8, #2
 8012d6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8012d70:	f898 2002 	ldrb.w	r2, [r8, #2]
 8012d74:	e785      	b.n	8012c82 <_strtod_l+0x1a2>
 8012d76:	f04f 0c01 	mov.w	ip, #1
 8012d7a:	e7f6      	b.n	8012d6a <_strtod_l+0x28a>
 8012d7c:	08017190 	.word	0x08017190
 8012d80:	08016f44 	.word	0x08016f44
 8012d84:	7ff00000 	.word	0x7ff00000
 8012d88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012d8a:	1c51      	adds	r1, r2, #1
 8012d8c:	9117      	str	r1, [sp, #92]	; 0x5c
 8012d8e:	7852      	ldrb	r2, [r2, #1]
 8012d90:	2a30      	cmp	r2, #48	; 0x30
 8012d92:	d0f9      	beq.n	8012d88 <_strtod_l+0x2a8>
 8012d94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012d98:	2908      	cmp	r1, #8
 8012d9a:	f63f af79 	bhi.w	8012c90 <_strtod_l+0x1b0>
 8012d9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8012da2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012da4:	9206      	str	r2, [sp, #24]
 8012da6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012da8:	1c51      	adds	r1, r2, #1
 8012daa:	9117      	str	r1, [sp, #92]	; 0x5c
 8012dac:	7852      	ldrb	r2, [r2, #1]
 8012dae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8012db2:	2e09      	cmp	r6, #9
 8012db4:	d937      	bls.n	8012e26 <_strtod_l+0x346>
 8012db6:	9e06      	ldr	r6, [sp, #24]
 8012db8:	1b89      	subs	r1, r1, r6
 8012dba:	2908      	cmp	r1, #8
 8012dbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8012dc0:	dc02      	bgt.n	8012dc8 <_strtod_l+0x2e8>
 8012dc2:	4576      	cmp	r6, lr
 8012dc4:	bfa8      	it	ge
 8012dc6:	4676      	movge	r6, lr
 8012dc8:	f1bc 0f00 	cmp.w	ip, #0
 8012dcc:	d000      	beq.n	8012dd0 <_strtod_l+0x2f0>
 8012dce:	4276      	negs	r6, r6
 8012dd0:	2d00      	cmp	r5, #0
 8012dd2:	d14d      	bne.n	8012e70 <_strtod_l+0x390>
 8012dd4:	9904      	ldr	r1, [sp, #16]
 8012dd6:	4301      	orrs	r1, r0
 8012dd8:	f47f aec6 	bne.w	8012b68 <_strtod_l+0x88>
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	f47f aee1 	bne.w	8012ba4 <_strtod_l+0xc4>
 8012de2:	2a69      	cmp	r2, #105	; 0x69
 8012de4:	d027      	beq.n	8012e36 <_strtod_l+0x356>
 8012de6:	dc24      	bgt.n	8012e32 <_strtod_l+0x352>
 8012de8:	2a49      	cmp	r2, #73	; 0x49
 8012dea:	d024      	beq.n	8012e36 <_strtod_l+0x356>
 8012dec:	2a4e      	cmp	r2, #78	; 0x4e
 8012dee:	f47f aed9 	bne.w	8012ba4 <_strtod_l+0xc4>
 8012df2:	499f      	ldr	r1, [pc, #636]	; (8013070 <_strtod_l+0x590>)
 8012df4:	a817      	add	r0, sp, #92	; 0x5c
 8012df6:	f001 ff59 	bl	8014cac <__match>
 8012dfa:	2800      	cmp	r0, #0
 8012dfc:	f43f aed2 	beq.w	8012ba4 <_strtod_l+0xc4>
 8012e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	2b28      	cmp	r3, #40	; 0x28
 8012e06:	d12d      	bne.n	8012e64 <_strtod_l+0x384>
 8012e08:	499a      	ldr	r1, [pc, #616]	; (8013074 <_strtod_l+0x594>)
 8012e0a:	aa1a      	add	r2, sp, #104	; 0x68
 8012e0c:	a817      	add	r0, sp, #92	; 0x5c
 8012e0e:	f001 ff61 	bl	8014cd4 <__hexnan>
 8012e12:	2805      	cmp	r0, #5
 8012e14:	d126      	bne.n	8012e64 <_strtod_l+0x384>
 8012e16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e18:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012e1c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012e20:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012e24:	e6a0      	b.n	8012b68 <_strtod_l+0x88>
 8012e26:	210a      	movs	r1, #10
 8012e28:	fb01 2e0e 	mla	lr, r1, lr, r2
 8012e2c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012e30:	e7b9      	b.n	8012da6 <_strtod_l+0x2c6>
 8012e32:	2a6e      	cmp	r2, #110	; 0x6e
 8012e34:	e7db      	b.n	8012dee <_strtod_l+0x30e>
 8012e36:	4990      	ldr	r1, [pc, #576]	; (8013078 <_strtod_l+0x598>)
 8012e38:	a817      	add	r0, sp, #92	; 0x5c
 8012e3a:	f001 ff37 	bl	8014cac <__match>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	f43f aeb0 	beq.w	8012ba4 <_strtod_l+0xc4>
 8012e44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012e46:	498d      	ldr	r1, [pc, #564]	; (801307c <_strtod_l+0x59c>)
 8012e48:	3b01      	subs	r3, #1
 8012e4a:	a817      	add	r0, sp, #92	; 0x5c
 8012e4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8012e4e:	f001 ff2d 	bl	8014cac <__match>
 8012e52:	b910      	cbnz	r0, 8012e5a <_strtod_l+0x37a>
 8012e54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012e56:	3301      	adds	r3, #1
 8012e58:	9317      	str	r3, [sp, #92]	; 0x5c
 8012e5a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801308c <_strtod_l+0x5ac>
 8012e5e:	f04f 0a00 	mov.w	sl, #0
 8012e62:	e681      	b.n	8012b68 <_strtod_l+0x88>
 8012e64:	4886      	ldr	r0, [pc, #536]	; (8013080 <_strtod_l+0x5a0>)
 8012e66:	f002 fff3 	bl	8015e50 <nan>
 8012e6a:	ec5b ab10 	vmov	sl, fp, d0
 8012e6e:	e67b      	b.n	8012b68 <_strtod_l+0x88>
 8012e70:	9b05      	ldr	r3, [sp, #20]
 8012e72:	9807      	ldr	r0, [sp, #28]
 8012e74:	1af3      	subs	r3, r6, r3
 8012e76:	2f00      	cmp	r7, #0
 8012e78:	bf08      	it	eq
 8012e7a:	462f      	moveq	r7, r5
 8012e7c:	2d10      	cmp	r5, #16
 8012e7e:	9306      	str	r3, [sp, #24]
 8012e80:	46a8      	mov	r8, r5
 8012e82:	bfa8      	it	ge
 8012e84:	f04f 0810 	movge.w	r8, #16
 8012e88:	f7ed fb3c 	bl	8000504 <__aeabi_ui2d>
 8012e8c:	2d09      	cmp	r5, #9
 8012e8e:	4682      	mov	sl, r0
 8012e90:	468b      	mov	fp, r1
 8012e92:	dd13      	ble.n	8012ebc <_strtod_l+0x3dc>
 8012e94:	4b7b      	ldr	r3, [pc, #492]	; (8013084 <_strtod_l+0x5a4>)
 8012e96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012e9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012e9e:	f7ed fbab 	bl	80005f8 <__aeabi_dmul>
 8012ea2:	4682      	mov	sl, r0
 8012ea4:	4648      	mov	r0, r9
 8012ea6:	468b      	mov	fp, r1
 8012ea8:	f7ed fb2c 	bl	8000504 <__aeabi_ui2d>
 8012eac:	4602      	mov	r2, r0
 8012eae:	460b      	mov	r3, r1
 8012eb0:	4650      	mov	r0, sl
 8012eb2:	4659      	mov	r1, fp
 8012eb4:	f7ed f9ea 	bl	800028c <__adddf3>
 8012eb8:	4682      	mov	sl, r0
 8012eba:	468b      	mov	fp, r1
 8012ebc:	2d0f      	cmp	r5, #15
 8012ebe:	dc38      	bgt.n	8012f32 <_strtod_l+0x452>
 8012ec0:	9b06      	ldr	r3, [sp, #24]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	f43f ae50 	beq.w	8012b68 <_strtod_l+0x88>
 8012ec8:	dd24      	ble.n	8012f14 <_strtod_l+0x434>
 8012eca:	2b16      	cmp	r3, #22
 8012ecc:	dc0b      	bgt.n	8012ee6 <_strtod_l+0x406>
 8012ece:	496d      	ldr	r1, [pc, #436]	; (8013084 <_strtod_l+0x5a4>)
 8012ed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ed8:	4652      	mov	r2, sl
 8012eda:	465b      	mov	r3, fp
 8012edc:	f7ed fb8c 	bl	80005f8 <__aeabi_dmul>
 8012ee0:	4682      	mov	sl, r0
 8012ee2:	468b      	mov	fp, r1
 8012ee4:	e640      	b.n	8012b68 <_strtod_l+0x88>
 8012ee6:	9a06      	ldr	r2, [sp, #24]
 8012ee8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8012eec:	4293      	cmp	r3, r2
 8012eee:	db20      	blt.n	8012f32 <_strtod_l+0x452>
 8012ef0:	4c64      	ldr	r4, [pc, #400]	; (8013084 <_strtod_l+0x5a4>)
 8012ef2:	f1c5 050f 	rsb	r5, r5, #15
 8012ef6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012efa:	4652      	mov	r2, sl
 8012efc:	465b      	mov	r3, fp
 8012efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f02:	f7ed fb79 	bl	80005f8 <__aeabi_dmul>
 8012f06:	9b06      	ldr	r3, [sp, #24]
 8012f08:	1b5d      	subs	r5, r3, r5
 8012f0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012f0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012f12:	e7e3      	b.n	8012edc <_strtod_l+0x3fc>
 8012f14:	9b06      	ldr	r3, [sp, #24]
 8012f16:	3316      	adds	r3, #22
 8012f18:	db0b      	blt.n	8012f32 <_strtod_l+0x452>
 8012f1a:	9b05      	ldr	r3, [sp, #20]
 8012f1c:	1b9e      	subs	r6, r3, r6
 8012f1e:	4b59      	ldr	r3, [pc, #356]	; (8013084 <_strtod_l+0x5a4>)
 8012f20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8012f24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012f28:	4650      	mov	r0, sl
 8012f2a:	4659      	mov	r1, fp
 8012f2c:	f7ed fc8e 	bl	800084c <__aeabi_ddiv>
 8012f30:	e7d6      	b.n	8012ee0 <_strtod_l+0x400>
 8012f32:	9b06      	ldr	r3, [sp, #24]
 8012f34:	eba5 0808 	sub.w	r8, r5, r8
 8012f38:	4498      	add	r8, r3
 8012f3a:	f1b8 0f00 	cmp.w	r8, #0
 8012f3e:	dd74      	ble.n	801302a <_strtod_l+0x54a>
 8012f40:	f018 030f 	ands.w	r3, r8, #15
 8012f44:	d00a      	beq.n	8012f5c <_strtod_l+0x47c>
 8012f46:	494f      	ldr	r1, [pc, #316]	; (8013084 <_strtod_l+0x5a4>)
 8012f48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012f4c:	4652      	mov	r2, sl
 8012f4e:	465b      	mov	r3, fp
 8012f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f54:	f7ed fb50 	bl	80005f8 <__aeabi_dmul>
 8012f58:	4682      	mov	sl, r0
 8012f5a:	468b      	mov	fp, r1
 8012f5c:	f038 080f 	bics.w	r8, r8, #15
 8012f60:	d04f      	beq.n	8013002 <_strtod_l+0x522>
 8012f62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012f66:	dd22      	ble.n	8012fae <_strtod_l+0x4ce>
 8012f68:	2500      	movs	r5, #0
 8012f6a:	462e      	mov	r6, r5
 8012f6c:	9507      	str	r5, [sp, #28]
 8012f6e:	9505      	str	r5, [sp, #20]
 8012f70:	2322      	movs	r3, #34	; 0x22
 8012f72:	f8df b118 	ldr.w	fp, [pc, #280]	; 801308c <_strtod_l+0x5ac>
 8012f76:	6023      	str	r3, [r4, #0]
 8012f78:	f04f 0a00 	mov.w	sl, #0
 8012f7c:	9b07      	ldr	r3, [sp, #28]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	f43f adf2 	beq.w	8012b68 <_strtod_l+0x88>
 8012f84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012f86:	4620      	mov	r0, r4
 8012f88:	f002 f81a 	bl	8014fc0 <_Bfree>
 8012f8c:	9905      	ldr	r1, [sp, #20]
 8012f8e:	4620      	mov	r0, r4
 8012f90:	f002 f816 	bl	8014fc0 <_Bfree>
 8012f94:	4631      	mov	r1, r6
 8012f96:	4620      	mov	r0, r4
 8012f98:	f002 f812 	bl	8014fc0 <_Bfree>
 8012f9c:	9907      	ldr	r1, [sp, #28]
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	f002 f80e 	bl	8014fc0 <_Bfree>
 8012fa4:	4629      	mov	r1, r5
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	f002 f80a 	bl	8014fc0 <_Bfree>
 8012fac:	e5dc      	b.n	8012b68 <_strtod_l+0x88>
 8012fae:	4b36      	ldr	r3, [pc, #216]	; (8013088 <_strtod_l+0x5a8>)
 8012fb0:	9304      	str	r3, [sp, #16]
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012fb8:	4650      	mov	r0, sl
 8012fba:	4659      	mov	r1, fp
 8012fbc:	4699      	mov	r9, r3
 8012fbe:	f1b8 0f01 	cmp.w	r8, #1
 8012fc2:	dc21      	bgt.n	8013008 <_strtod_l+0x528>
 8012fc4:	b10b      	cbz	r3, 8012fca <_strtod_l+0x4ea>
 8012fc6:	4682      	mov	sl, r0
 8012fc8:	468b      	mov	fp, r1
 8012fca:	4b2f      	ldr	r3, [pc, #188]	; (8013088 <_strtod_l+0x5a8>)
 8012fcc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012fd0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012fd4:	4652      	mov	r2, sl
 8012fd6:	465b      	mov	r3, fp
 8012fd8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8012fdc:	f7ed fb0c 	bl	80005f8 <__aeabi_dmul>
 8012fe0:	4b2a      	ldr	r3, [pc, #168]	; (801308c <_strtod_l+0x5ac>)
 8012fe2:	460a      	mov	r2, r1
 8012fe4:	400b      	ands	r3, r1
 8012fe6:	492a      	ldr	r1, [pc, #168]	; (8013090 <_strtod_l+0x5b0>)
 8012fe8:	428b      	cmp	r3, r1
 8012fea:	4682      	mov	sl, r0
 8012fec:	d8bc      	bhi.n	8012f68 <_strtod_l+0x488>
 8012fee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012ff2:	428b      	cmp	r3, r1
 8012ff4:	bf86      	itte	hi
 8012ff6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8013094 <_strtod_l+0x5b4>
 8012ffa:	f04f 3aff 	movhi.w	sl, #4294967295
 8012ffe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013002:	2300      	movs	r3, #0
 8013004:	9304      	str	r3, [sp, #16]
 8013006:	e084      	b.n	8013112 <_strtod_l+0x632>
 8013008:	f018 0f01 	tst.w	r8, #1
 801300c:	d005      	beq.n	801301a <_strtod_l+0x53a>
 801300e:	9b04      	ldr	r3, [sp, #16]
 8013010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013014:	f7ed faf0 	bl	80005f8 <__aeabi_dmul>
 8013018:	2301      	movs	r3, #1
 801301a:	9a04      	ldr	r2, [sp, #16]
 801301c:	3208      	adds	r2, #8
 801301e:	f109 0901 	add.w	r9, r9, #1
 8013022:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013026:	9204      	str	r2, [sp, #16]
 8013028:	e7c9      	b.n	8012fbe <_strtod_l+0x4de>
 801302a:	d0ea      	beq.n	8013002 <_strtod_l+0x522>
 801302c:	f1c8 0800 	rsb	r8, r8, #0
 8013030:	f018 020f 	ands.w	r2, r8, #15
 8013034:	d00a      	beq.n	801304c <_strtod_l+0x56c>
 8013036:	4b13      	ldr	r3, [pc, #76]	; (8013084 <_strtod_l+0x5a4>)
 8013038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801303c:	4650      	mov	r0, sl
 801303e:	4659      	mov	r1, fp
 8013040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013044:	f7ed fc02 	bl	800084c <__aeabi_ddiv>
 8013048:	4682      	mov	sl, r0
 801304a:	468b      	mov	fp, r1
 801304c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013050:	d0d7      	beq.n	8013002 <_strtod_l+0x522>
 8013052:	f1b8 0f1f 	cmp.w	r8, #31
 8013056:	dd1f      	ble.n	8013098 <_strtod_l+0x5b8>
 8013058:	2500      	movs	r5, #0
 801305a:	462e      	mov	r6, r5
 801305c:	9507      	str	r5, [sp, #28]
 801305e:	9505      	str	r5, [sp, #20]
 8013060:	2322      	movs	r3, #34	; 0x22
 8013062:	f04f 0a00 	mov.w	sl, #0
 8013066:	f04f 0b00 	mov.w	fp, #0
 801306a:	6023      	str	r3, [r4, #0]
 801306c:	e786      	b.n	8012f7c <_strtod_l+0x49c>
 801306e:	bf00      	nop
 8013070:	08016f15 	.word	0x08016f15
 8013074:	08016f58 	.word	0x08016f58
 8013078:	08016f0d 	.word	0x08016f0d
 801307c:	0801709c 	.word	0x0801709c
 8013080:	08017348 	.word	0x08017348
 8013084:	08017228 	.word	0x08017228
 8013088:	08017200 	.word	0x08017200
 801308c:	7ff00000 	.word	0x7ff00000
 8013090:	7ca00000 	.word	0x7ca00000
 8013094:	7fefffff 	.word	0x7fefffff
 8013098:	f018 0310 	ands.w	r3, r8, #16
 801309c:	bf18      	it	ne
 801309e:	236a      	movne	r3, #106	; 0x6a
 80130a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8013450 <_strtod_l+0x970>
 80130a4:	9304      	str	r3, [sp, #16]
 80130a6:	4650      	mov	r0, sl
 80130a8:	4659      	mov	r1, fp
 80130aa:	2300      	movs	r3, #0
 80130ac:	f018 0f01 	tst.w	r8, #1
 80130b0:	d004      	beq.n	80130bc <_strtod_l+0x5dc>
 80130b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80130b6:	f7ed fa9f 	bl	80005f8 <__aeabi_dmul>
 80130ba:	2301      	movs	r3, #1
 80130bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80130c0:	f109 0908 	add.w	r9, r9, #8
 80130c4:	d1f2      	bne.n	80130ac <_strtod_l+0x5cc>
 80130c6:	b10b      	cbz	r3, 80130cc <_strtod_l+0x5ec>
 80130c8:	4682      	mov	sl, r0
 80130ca:	468b      	mov	fp, r1
 80130cc:	9b04      	ldr	r3, [sp, #16]
 80130ce:	b1c3      	cbz	r3, 8013102 <_strtod_l+0x622>
 80130d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80130d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80130d8:	2b00      	cmp	r3, #0
 80130da:	4659      	mov	r1, fp
 80130dc:	dd11      	ble.n	8013102 <_strtod_l+0x622>
 80130de:	2b1f      	cmp	r3, #31
 80130e0:	f340 8124 	ble.w	801332c <_strtod_l+0x84c>
 80130e4:	2b34      	cmp	r3, #52	; 0x34
 80130e6:	bfde      	ittt	le
 80130e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80130ec:	f04f 33ff 	movle.w	r3, #4294967295
 80130f0:	fa03 f202 	lslle.w	r2, r3, r2
 80130f4:	f04f 0a00 	mov.w	sl, #0
 80130f8:	bfcc      	ite	gt
 80130fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80130fe:	ea02 0b01 	andle.w	fp, r2, r1
 8013102:	2200      	movs	r2, #0
 8013104:	2300      	movs	r3, #0
 8013106:	4650      	mov	r0, sl
 8013108:	4659      	mov	r1, fp
 801310a:	f7ed fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 801310e:	2800      	cmp	r0, #0
 8013110:	d1a2      	bne.n	8013058 <_strtod_l+0x578>
 8013112:	9b07      	ldr	r3, [sp, #28]
 8013114:	9300      	str	r3, [sp, #0]
 8013116:	9908      	ldr	r1, [sp, #32]
 8013118:	462b      	mov	r3, r5
 801311a:	463a      	mov	r2, r7
 801311c:	4620      	mov	r0, r4
 801311e:	f001 ffb7 	bl	8015090 <__s2b>
 8013122:	9007      	str	r0, [sp, #28]
 8013124:	2800      	cmp	r0, #0
 8013126:	f43f af1f 	beq.w	8012f68 <_strtod_l+0x488>
 801312a:	9b05      	ldr	r3, [sp, #20]
 801312c:	1b9e      	subs	r6, r3, r6
 801312e:	9b06      	ldr	r3, [sp, #24]
 8013130:	2b00      	cmp	r3, #0
 8013132:	bfb4      	ite	lt
 8013134:	4633      	movlt	r3, r6
 8013136:	2300      	movge	r3, #0
 8013138:	930c      	str	r3, [sp, #48]	; 0x30
 801313a:	9b06      	ldr	r3, [sp, #24]
 801313c:	2500      	movs	r5, #0
 801313e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013142:	9312      	str	r3, [sp, #72]	; 0x48
 8013144:	462e      	mov	r6, r5
 8013146:	9b07      	ldr	r3, [sp, #28]
 8013148:	4620      	mov	r0, r4
 801314a:	6859      	ldr	r1, [r3, #4]
 801314c:	f001 fef8 	bl	8014f40 <_Balloc>
 8013150:	9005      	str	r0, [sp, #20]
 8013152:	2800      	cmp	r0, #0
 8013154:	f43f af0c 	beq.w	8012f70 <_strtod_l+0x490>
 8013158:	9b07      	ldr	r3, [sp, #28]
 801315a:	691a      	ldr	r2, [r3, #16]
 801315c:	3202      	adds	r2, #2
 801315e:	f103 010c 	add.w	r1, r3, #12
 8013162:	0092      	lsls	r2, r2, #2
 8013164:	300c      	adds	r0, #12
 8013166:	f7fe fbf5 	bl	8011954 <memcpy>
 801316a:	ec4b ab10 	vmov	d0, sl, fp
 801316e:	aa1a      	add	r2, sp, #104	; 0x68
 8013170:	a919      	add	r1, sp, #100	; 0x64
 8013172:	4620      	mov	r0, r4
 8013174:	f002 fad2 	bl	801571c <__d2b>
 8013178:	ec4b ab18 	vmov	d8, sl, fp
 801317c:	9018      	str	r0, [sp, #96]	; 0x60
 801317e:	2800      	cmp	r0, #0
 8013180:	f43f aef6 	beq.w	8012f70 <_strtod_l+0x490>
 8013184:	2101      	movs	r1, #1
 8013186:	4620      	mov	r0, r4
 8013188:	f002 f81c 	bl	80151c4 <__i2b>
 801318c:	4606      	mov	r6, r0
 801318e:	2800      	cmp	r0, #0
 8013190:	f43f aeee 	beq.w	8012f70 <_strtod_l+0x490>
 8013194:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013196:	9904      	ldr	r1, [sp, #16]
 8013198:	2b00      	cmp	r3, #0
 801319a:	bfab      	itete	ge
 801319c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801319e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80131a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80131a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80131a6:	bfac      	ite	ge
 80131a8:	eb03 0902 	addge.w	r9, r3, r2
 80131ac:	1ad7      	sublt	r7, r2, r3
 80131ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80131b0:	eba3 0801 	sub.w	r8, r3, r1
 80131b4:	4490      	add	r8, r2
 80131b6:	4ba1      	ldr	r3, [pc, #644]	; (801343c <_strtod_l+0x95c>)
 80131b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80131bc:	4598      	cmp	r8, r3
 80131be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80131c2:	f280 80c7 	bge.w	8013354 <_strtod_l+0x874>
 80131c6:	eba3 0308 	sub.w	r3, r3, r8
 80131ca:	2b1f      	cmp	r3, #31
 80131cc:	eba2 0203 	sub.w	r2, r2, r3
 80131d0:	f04f 0101 	mov.w	r1, #1
 80131d4:	f300 80b1 	bgt.w	801333a <_strtod_l+0x85a>
 80131d8:	fa01 f303 	lsl.w	r3, r1, r3
 80131dc:	930d      	str	r3, [sp, #52]	; 0x34
 80131de:	2300      	movs	r3, #0
 80131e0:	9308      	str	r3, [sp, #32]
 80131e2:	eb09 0802 	add.w	r8, r9, r2
 80131e6:	9b04      	ldr	r3, [sp, #16]
 80131e8:	45c1      	cmp	r9, r8
 80131ea:	4417      	add	r7, r2
 80131ec:	441f      	add	r7, r3
 80131ee:	464b      	mov	r3, r9
 80131f0:	bfa8      	it	ge
 80131f2:	4643      	movge	r3, r8
 80131f4:	42bb      	cmp	r3, r7
 80131f6:	bfa8      	it	ge
 80131f8:	463b      	movge	r3, r7
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	bfc2      	ittt	gt
 80131fe:	eba8 0803 	subgt.w	r8, r8, r3
 8013202:	1aff      	subgt	r7, r7, r3
 8013204:	eba9 0903 	subgt.w	r9, r9, r3
 8013208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801320a:	2b00      	cmp	r3, #0
 801320c:	dd17      	ble.n	801323e <_strtod_l+0x75e>
 801320e:	4631      	mov	r1, r6
 8013210:	461a      	mov	r2, r3
 8013212:	4620      	mov	r0, r4
 8013214:	f002 f896 	bl	8015344 <__pow5mult>
 8013218:	4606      	mov	r6, r0
 801321a:	2800      	cmp	r0, #0
 801321c:	f43f aea8 	beq.w	8012f70 <_strtod_l+0x490>
 8013220:	4601      	mov	r1, r0
 8013222:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013224:	4620      	mov	r0, r4
 8013226:	f001 ffe3 	bl	80151f0 <__multiply>
 801322a:	900b      	str	r0, [sp, #44]	; 0x2c
 801322c:	2800      	cmp	r0, #0
 801322e:	f43f ae9f 	beq.w	8012f70 <_strtod_l+0x490>
 8013232:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013234:	4620      	mov	r0, r4
 8013236:	f001 fec3 	bl	8014fc0 <_Bfree>
 801323a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801323c:	9318      	str	r3, [sp, #96]	; 0x60
 801323e:	f1b8 0f00 	cmp.w	r8, #0
 8013242:	f300 808c 	bgt.w	801335e <_strtod_l+0x87e>
 8013246:	9b06      	ldr	r3, [sp, #24]
 8013248:	2b00      	cmp	r3, #0
 801324a:	dd08      	ble.n	801325e <_strtod_l+0x77e>
 801324c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801324e:	9905      	ldr	r1, [sp, #20]
 8013250:	4620      	mov	r0, r4
 8013252:	f002 f877 	bl	8015344 <__pow5mult>
 8013256:	9005      	str	r0, [sp, #20]
 8013258:	2800      	cmp	r0, #0
 801325a:	f43f ae89 	beq.w	8012f70 <_strtod_l+0x490>
 801325e:	2f00      	cmp	r7, #0
 8013260:	dd08      	ble.n	8013274 <_strtod_l+0x794>
 8013262:	9905      	ldr	r1, [sp, #20]
 8013264:	463a      	mov	r2, r7
 8013266:	4620      	mov	r0, r4
 8013268:	f002 f8c6 	bl	80153f8 <__lshift>
 801326c:	9005      	str	r0, [sp, #20]
 801326e:	2800      	cmp	r0, #0
 8013270:	f43f ae7e 	beq.w	8012f70 <_strtod_l+0x490>
 8013274:	f1b9 0f00 	cmp.w	r9, #0
 8013278:	dd08      	ble.n	801328c <_strtod_l+0x7ac>
 801327a:	4631      	mov	r1, r6
 801327c:	464a      	mov	r2, r9
 801327e:	4620      	mov	r0, r4
 8013280:	f002 f8ba 	bl	80153f8 <__lshift>
 8013284:	4606      	mov	r6, r0
 8013286:	2800      	cmp	r0, #0
 8013288:	f43f ae72 	beq.w	8012f70 <_strtod_l+0x490>
 801328c:	9a05      	ldr	r2, [sp, #20]
 801328e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013290:	4620      	mov	r0, r4
 8013292:	f002 f93d 	bl	8015510 <__mdiff>
 8013296:	4605      	mov	r5, r0
 8013298:	2800      	cmp	r0, #0
 801329a:	f43f ae69 	beq.w	8012f70 <_strtod_l+0x490>
 801329e:	68c3      	ldr	r3, [r0, #12]
 80132a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80132a2:	2300      	movs	r3, #0
 80132a4:	60c3      	str	r3, [r0, #12]
 80132a6:	4631      	mov	r1, r6
 80132a8:	f002 f916 	bl	80154d8 <__mcmp>
 80132ac:	2800      	cmp	r0, #0
 80132ae:	da60      	bge.n	8013372 <_strtod_l+0x892>
 80132b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132b2:	ea53 030a 	orrs.w	r3, r3, sl
 80132b6:	f040 8082 	bne.w	80133be <_strtod_l+0x8de>
 80132ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d17d      	bne.n	80133be <_strtod_l+0x8de>
 80132c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80132c6:	0d1b      	lsrs	r3, r3, #20
 80132c8:	051b      	lsls	r3, r3, #20
 80132ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80132ce:	d976      	bls.n	80133be <_strtod_l+0x8de>
 80132d0:	696b      	ldr	r3, [r5, #20]
 80132d2:	b913      	cbnz	r3, 80132da <_strtod_l+0x7fa>
 80132d4:	692b      	ldr	r3, [r5, #16]
 80132d6:	2b01      	cmp	r3, #1
 80132d8:	dd71      	ble.n	80133be <_strtod_l+0x8de>
 80132da:	4629      	mov	r1, r5
 80132dc:	2201      	movs	r2, #1
 80132de:	4620      	mov	r0, r4
 80132e0:	f002 f88a 	bl	80153f8 <__lshift>
 80132e4:	4631      	mov	r1, r6
 80132e6:	4605      	mov	r5, r0
 80132e8:	f002 f8f6 	bl	80154d8 <__mcmp>
 80132ec:	2800      	cmp	r0, #0
 80132ee:	dd66      	ble.n	80133be <_strtod_l+0x8de>
 80132f0:	9904      	ldr	r1, [sp, #16]
 80132f2:	4a53      	ldr	r2, [pc, #332]	; (8013440 <_strtod_l+0x960>)
 80132f4:	465b      	mov	r3, fp
 80132f6:	2900      	cmp	r1, #0
 80132f8:	f000 8081 	beq.w	80133fe <_strtod_l+0x91e>
 80132fc:	ea02 010b 	and.w	r1, r2, fp
 8013300:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013304:	dc7b      	bgt.n	80133fe <_strtod_l+0x91e>
 8013306:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801330a:	f77f aea9 	ble.w	8013060 <_strtod_l+0x580>
 801330e:	4b4d      	ldr	r3, [pc, #308]	; (8013444 <_strtod_l+0x964>)
 8013310:	4650      	mov	r0, sl
 8013312:	4659      	mov	r1, fp
 8013314:	2200      	movs	r2, #0
 8013316:	f7ed f96f 	bl	80005f8 <__aeabi_dmul>
 801331a:	460b      	mov	r3, r1
 801331c:	4303      	orrs	r3, r0
 801331e:	bf08      	it	eq
 8013320:	2322      	moveq	r3, #34	; 0x22
 8013322:	4682      	mov	sl, r0
 8013324:	468b      	mov	fp, r1
 8013326:	bf08      	it	eq
 8013328:	6023      	streq	r3, [r4, #0]
 801332a:	e62b      	b.n	8012f84 <_strtod_l+0x4a4>
 801332c:	f04f 32ff 	mov.w	r2, #4294967295
 8013330:	fa02 f303 	lsl.w	r3, r2, r3
 8013334:	ea03 0a0a 	and.w	sl, r3, sl
 8013338:	e6e3      	b.n	8013102 <_strtod_l+0x622>
 801333a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801333e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013342:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013346:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801334a:	fa01 f308 	lsl.w	r3, r1, r8
 801334e:	9308      	str	r3, [sp, #32]
 8013350:	910d      	str	r1, [sp, #52]	; 0x34
 8013352:	e746      	b.n	80131e2 <_strtod_l+0x702>
 8013354:	2300      	movs	r3, #0
 8013356:	9308      	str	r3, [sp, #32]
 8013358:	2301      	movs	r3, #1
 801335a:	930d      	str	r3, [sp, #52]	; 0x34
 801335c:	e741      	b.n	80131e2 <_strtod_l+0x702>
 801335e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013360:	4642      	mov	r2, r8
 8013362:	4620      	mov	r0, r4
 8013364:	f002 f848 	bl	80153f8 <__lshift>
 8013368:	9018      	str	r0, [sp, #96]	; 0x60
 801336a:	2800      	cmp	r0, #0
 801336c:	f47f af6b 	bne.w	8013246 <_strtod_l+0x766>
 8013370:	e5fe      	b.n	8012f70 <_strtod_l+0x490>
 8013372:	465f      	mov	r7, fp
 8013374:	d16e      	bne.n	8013454 <_strtod_l+0x974>
 8013376:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801337c:	b342      	cbz	r2, 80133d0 <_strtod_l+0x8f0>
 801337e:	4a32      	ldr	r2, [pc, #200]	; (8013448 <_strtod_l+0x968>)
 8013380:	4293      	cmp	r3, r2
 8013382:	d128      	bne.n	80133d6 <_strtod_l+0x8f6>
 8013384:	9b04      	ldr	r3, [sp, #16]
 8013386:	4651      	mov	r1, sl
 8013388:	b1eb      	cbz	r3, 80133c6 <_strtod_l+0x8e6>
 801338a:	4b2d      	ldr	r3, [pc, #180]	; (8013440 <_strtod_l+0x960>)
 801338c:	403b      	ands	r3, r7
 801338e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013392:	f04f 32ff 	mov.w	r2, #4294967295
 8013396:	d819      	bhi.n	80133cc <_strtod_l+0x8ec>
 8013398:	0d1b      	lsrs	r3, r3, #20
 801339a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801339e:	fa02 f303 	lsl.w	r3, r2, r3
 80133a2:	4299      	cmp	r1, r3
 80133a4:	d117      	bne.n	80133d6 <_strtod_l+0x8f6>
 80133a6:	4b29      	ldr	r3, [pc, #164]	; (801344c <_strtod_l+0x96c>)
 80133a8:	429f      	cmp	r7, r3
 80133aa:	d102      	bne.n	80133b2 <_strtod_l+0x8d2>
 80133ac:	3101      	adds	r1, #1
 80133ae:	f43f addf 	beq.w	8012f70 <_strtod_l+0x490>
 80133b2:	4b23      	ldr	r3, [pc, #140]	; (8013440 <_strtod_l+0x960>)
 80133b4:	403b      	ands	r3, r7
 80133b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80133ba:	f04f 0a00 	mov.w	sl, #0
 80133be:	9b04      	ldr	r3, [sp, #16]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d1a4      	bne.n	801330e <_strtod_l+0x82e>
 80133c4:	e5de      	b.n	8012f84 <_strtod_l+0x4a4>
 80133c6:	f04f 33ff 	mov.w	r3, #4294967295
 80133ca:	e7ea      	b.n	80133a2 <_strtod_l+0x8c2>
 80133cc:	4613      	mov	r3, r2
 80133ce:	e7e8      	b.n	80133a2 <_strtod_l+0x8c2>
 80133d0:	ea53 030a 	orrs.w	r3, r3, sl
 80133d4:	d08c      	beq.n	80132f0 <_strtod_l+0x810>
 80133d6:	9b08      	ldr	r3, [sp, #32]
 80133d8:	b1db      	cbz	r3, 8013412 <_strtod_l+0x932>
 80133da:	423b      	tst	r3, r7
 80133dc:	d0ef      	beq.n	80133be <_strtod_l+0x8de>
 80133de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133e0:	9a04      	ldr	r2, [sp, #16]
 80133e2:	4650      	mov	r0, sl
 80133e4:	4659      	mov	r1, fp
 80133e6:	b1c3      	cbz	r3, 801341a <_strtod_l+0x93a>
 80133e8:	f7ff fb5b 	bl	8012aa2 <sulp>
 80133ec:	4602      	mov	r2, r0
 80133ee:	460b      	mov	r3, r1
 80133f0:	ec51 0b18 	vmov	r0, r1, d8
 80133f4:	f7ec ff4a 	bl	800028c <__adddf3>
 80133f8:	4682      	mov	sl, r0
 80133fa:	468b      	mov	fp, r1
 80133fc:	e7df      	b.n	80133be <_strtod_l+0x8de>
 80133fe:	4013      	ands	r3, r2
 8013400:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013404:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013408:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801340c:	f04f 3aff 	mov.w	sl, #4294967295
 8013410:	e7d5      	b.n	80133be <_strtod_l+0x8de>
 8013412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013414:	ea13 0f0a 	tst.w	r3, sl
 8013418:	e7e0      	b.n	80133dc <_strtod_l+0x8fc>
 801341a:	f7ff fb42 	bl	8012aa2 <sulp>
 801341e:	4602      	mov	r2, r0
 8013420:	460b      	mov	r3, r1
 8013422:	ec51 0b18 	vmov	r0, r1, d8
 8013426:	f7ec ff2f 	bl	8000288 <__aeabi_dsub>
 801342a:	2200      	movs	r2, #0
 801342c:	2300      	movs	r3, #0
 801342e:	4682      	mov	sl, r0
 8013430:	468b      	mov	fp, r1
 8013432:	f7ed fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 8013436:	2800      	cmp	r0, #0
 8013438:	d0c1      	beq.n	80133be <_strtod_l+0x8de>
 801343a:	e611      	b.n	8013060 <_strtod_l+0x580>
 801343c:	fffffc02 	.word	0xfffffc02
 8013440:	7ff00000 	.word	0x7ff00000
 8013444:	39500000 	.word	0x39500000
 8013448:	000fffff 	.word	0x000fffff
 801344c:	7fefffff 	.word	0x7fefffff
 8013450:	08016f70 	.word	0x08016f70
 8013454:	4631      	mov	r1, r6
 8013456:	4628      	mov	r0, r5
 8013458:	f002 f9bc 	bl	80157d4 <__ratio>
 801345c:	ec59 8b10 	vmov	r8, r9, d0
 8013460:	ee10 0a10 	vmov	r0, s0
 8013464:	2200      	movs	r2, #0
 8013466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801346a:	4649      	mov	r1, r9
 801346c:	f7ed fb40 	bl	8000af0 <__aeabi_dcmple>
 8013470:	2800      	cmp	r0, #0
 8013472:	d07a      	beq.n	801356a <_strtod_l+0xa8a>
 8013474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013476:	2b00      	cmp	r3, #0
 8013478:	d04a      	beq.n	8013510 <_strtod_l+0xa30>
 801347a:	4b95      	ldr	r3, [pc, #596]	; (80136d0 <_strtod_l+0xbf0>)
 801347c:	2200      	movs	r2, #0
 801347e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013482:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80136d0 <_strtod_l+0xbf0>
 8013486:	f04f 0800 	mov.w	r8, #0
 801348a:	4b92      	ldr	r3, [pc, #584]	; (80136d4 <_strtod_l+0xbf4>)
 801348c:	403b      	ands	r3, r7
 801348e:	930d      	str	r3, [sp, #52]	; 0x34
 8013490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013492:	4b91      	ldr	r3, [pc, #580]	; (80136d8 <_strtod_l+0xbf8>)
 8013494:	429a      	cmp	r2, r3
 8013496:	f040 80b0 	bne.w	80135fa <_strtod_l+0xb1a>
 801349a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801349e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80134a2:	ec4b ab10 	vmov	d0, sl, fp
 80134a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80134aa:	f002 f8bb 	bl	8015624 <__ulp>
 80134ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80134b2:	ec53 2b10 	vmov	r2, r3, d0
 80134b6:	f7ed f89f 	bl	80005f8 <__aeabi_dmul>
 80134ba:	4652      	mov	r2, sl
 80134bc:	465b      	mov	r3, fp
 80134be:	f7ec fee5 	bl	800028c <__adddf3>
 80134c2:	460b      	mov	r3, r1
 80134c4:	4983      	ldr	r1, [pc, #524]	; (80136d4 <_strtod_l+0xbf4>)
 80134c6:	4a85      	ldr	r2, [pc, #532]	; (80136dc <_strtod_l+0xbfc>)
 80134c8:	4019      	ands	r1, r3
 80134ca:	4291      	cmp	r1, r2
 80134cc:	4682      	mov	sl, r0
 80134ce:	d960      	bls.n	8013592 <_strtod_l+0xab2>
 80134d0:	ee18 3a90 	vmov	r3, s17
 80134d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80134d8:	4293      	cmp	r3, r2
 80134da:	d104      	bne.n	80134e6 <_strtod_l+0xa06>
 80134dc:	ee18 3a10 	vmov	r3, s16
 80134e0:	3301      	adds	r3, #1
 80134e2:	f43f ad45 	beq.w	8012f70 <_strtod_l+0x490>
 80134e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80136e8 <_strtod_l+0xc08>
 80134ea:	f04f 3aff 	mov.w	sl, #4294967295
 80134ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80134f0:	4620      	mov	r0, r4
 80134f2:	f001 fd65 	bl	8014fc0 <_Bfree>
 80134f6:	9905      	ldr	r1, [sp, #20]
 80134f8:	4620      	mov	r0, r4
 80134fa:	f001 fd61 	bl	8014fc0 <_Bfree>
 80134fe:	4631      	mov	r1, r6
 8013500:	4620      	mov	r0, r4
 8013502:	f001 fd5d 	bl	8014fc0 <_Bfree>
 8013506:	4629      	mov	r1, r5
 8013508:	4620      	mov	r0, r4
 801350a:	f001 fd59 	bl	8014fc0 <_Bfree>
 801350e:	e61a      	b.n	8013146 <_strtod_l+0x666>
 8013510:	f1ba 0f00 	cmp.w	sl, #0
 8013514:	d11b      	bne.n	801354e <_strtod_l+0xa6e>
 8013516:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801351a:	b9f3      	cbnz	r3, 801355a <_strtod_l+0xa7a>
 801351c:	4b6c      	ldr	r3, [pc, #432]	; (80136d0 <_strtod_l+0xbf0>)
 801351e:	2200      	movs	r2, #0
 8013520:	4640      	mov	r0, r8
 8013522:	4649      	mov	r1, r9
 8013524:	f7ed fada 	bl	8000adc <__aeabi_dcmplt>
 8013528:	b9d0      	cbnz	r0, 8013560 <_strtod_l+0xa80>
 801352a:	4640      	mov	r0, r8
 801352c:	4649      	mov	r1, r9
 801352e:	4b6c      	ldr	r3, [pc, #432]	; (80136e0 <_strtod_l+0xc00>)
 8013530:	2200      	movs	r2, #0
 8013532:	f7ed f861 	bl	80005f8 <__aeabi_dmul>
 8013536:	4680      	mov	r8, r0
 8013538:	4689      	mov	r9, r1
 801353a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801353e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8013542:	9315      	str	r3, [sp, #84]	; 0x54
 8013544:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013548:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801354c:	e79d      	b.n	801348a <_strtod_l+0x9aa>
 801354e:	f1ba 0f01 	cmp.w	sl, #1
 8013552:	d102      	bne.n	801355a <_strtod_l+0xa7a>
 8013554:	2f00      	cmp	r7, #0
 8013556:	f43f ad83 	beq.w	8013060 <_strtod_l+0x580>
 801355a:	4b62      	ldr	r3, [pc, #392]	; (80136e4 <_strtod_l+0xc04>)
 801355c:	2200      	movs	r2, #0
 801355e:	e78e      	b.n	801347e <_strtod_l+0x99e>
 8013560:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80136e0 <_strtod_l+0xc00>
 8013564:	f04f 0800 	mov.w	r8, #0
 8013568:	e7e7      	b.n	801353a <_strtod_l+0xa5a>
 801356a:	4b5d      	ldr	r3, [pc, #372]	; (80136e0 <_strtod_l+0xc00>)
 801356c:	4640      	mov	r0, r8
 801356e:	4649      	mov	r1, r9
 8013570:	2200      	movs	r2, #0
 8013572:	f7ed f841 	bl	80005f8 <__aeabi_dmul>
 8013576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013578:	4680      	mov	r8, r0
 801357a:	4689      	mov	r9, r1
 801357c:	b933      	cbnz	r3, 801358c <_strtod_l+0xaac>
 801357e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013582:	900e      	str	r0, [sp, #56]	; 0x38
 8013584:	930f      	str	r3, [sp, #60]	; 0x3c
 8013586:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801358a:	e7dd      	b.n	8013548 <_strtod_l+0xa68>
 801358c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8013590:	e7f9      	b.n	8013586 <_strtod_l+0xaa6>
 8013592:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013596:	9b04      	ldr	r3, [sp, #16]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d1a8      	bne.n	80134ee <_strtod_l+0xa0e>
 801359c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80135a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135a2:	0d1b      	lsrs	r3, r3, #20
 80135a4:	051b      	lsls	r3, r3, #20
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d1a1      	bne.n	80134ee <_strtod_l+0xa0e>
 80135aa:	4640      	mov	r0, r8
 80135ac:	4649      	mov	r1, r9
 80135ae:	f7ed fb83 	bl	8000cb8 <__aeabi_d2lz>
 80135b2:	f7ec fff3 	bl	800059c <__aeabi_l2d>
 80135b6:	4602      	mov	r2, r0
 80135b8:	460b      	mov	r3, r1
 80135ba:	4640      	mov	r0, r8
 80135bc:	4649      	mov	r1, r9
 80135be:	f7ec fe63 	bl	8000288 <__aeabi_dsub>
 80135c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80135c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80135c8:	ea43 030a 	orr.w	r3, r3, sl
 80135cc:	4313      	orrs	r3, r2
 80135ce:	4680      	mov	r8, r0
 80135d0:	4689      	mov	r9, r1
 80135d2:	d055      	beq.n	8013680 <_strtod_l+0xba0>
 80135d4:	a336      	add	r3, pc, #216	; (adr r3, 80136b0 <_strtod_l+0xbd0>)
 80135d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135da:	f7ed fa7f 	bl	8000adc <__aeabi_dcmplt>
 80135de:	2800      	cmp	r0, #0
 80135e0:	f47f acd0 	bne.w	8012f84 <_strtod_l+0x4a4>
 80135e4:	a334      	add	r3, pc, #208	; (adr r3, 80136b8 <_strtod_l+0xbd8>)
 80135e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ea:	4640      	mov	r0, r8
 80135ec:	4649      	mov	r1, r9
 80135ee:	f7ed fa93 	bl	8000b18 <__aeabi_dcmpgt>
 80135f2:	2800      	cmp	r0, #0
 80135f4:	f43f af7b 	beq.w	80134ee <_strtod_l+0xa0e>
 80135f8:	e4c4      	b.n	8012f84 <_strtod_l+0x4a4>
 80135fa:	9b04      	ldr	r3, [sp, #16]
 80135fc:	b333      	cbz	r3, 801364c <_strtod_l+0xb6c>
 80135fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013600:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013604:	d822      	bhi.n	801364c <_strtod_l+0xb6c>
 8013606:	a32e      	add	r3, pc, #184	; (adr r3, 80136c0 <_strtod_l+0xbe0>)
 8013608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801360c:	4640      	mov	r0, r8
 801360e:	4649      	mov	r1, r9
 8013610:	f7ed fa6e 	bl	8000af0 <__aeabi_dcmple>
 8013614:	b1a0      	cbz	r0, 8013640 <_strtod_l+0xb60>
 8013616:	4649      	mov	r1, r9
 8013618:	4640      	mov	r0, r8
 801361a:	f7ed fac5 	bl	8000ba8 <__aeabi_d2uiz>
 801361e:	2801      	cmp	r0, #1
 8013620:	bf38      	it	cc
 8013622:	2001      	movcc	r0, #1
 8013624:	f7ec ff6e 	bl	8000504 <__aeabi_ui2d>
 8013628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801362a:	4680      	mov	r8, r0
 801362c:	4689      	mov	r9, r1
 801362e:	bb23      	cbnz	r3, 801367a <_strtod_l+0xb9a>
 8013630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013634:	9010      	str	r0, [sp, #64]	; 0x40
 8013636:	9311      	str	r3, [sp, #68]	; 0x44
 8013638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801363c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013644:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013648:	1a9b      	subs	r3, r3, r2
 801364a:	9309      	str	r3, [sp, #36]	; 0x24
 801364c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013650:	eeb0 0a48 	vmov.f32	s0, s16
 8013654:	eef0 0a68 	vmov.f32	s1, s17
 8013658:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801365c:	f001 ffe2 	bl	8015624 <__ulp>
 8013660:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013664:	ec53 2b10 	vmov	r2, r3, d0
 8013668:	f7ec ffc6 	bl	80005f8 <__aeabi_dmul>
 801366c:	ec53 2b18 	vmov	r2, r3, d8
 8013670:	f7ec fe0c 	bl	800028c <__adddf3>
 8013674:	4682      	mov	sl, r0
 8013676:	468b      	mov	fp, r1
 8013678:	e78d      	b.n	8013596 <_strtod_l+0xab6>
 801367a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801367e:	e7db      	b.n	8013638 <_strtod_l+0xb58>
 8013680:	a311      	add	r3, pc, #68	; (adr r3, 80136c8 <_strtod_l+0xbe8>)
 8013682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013686:	f7ed fa29 	bl	8000adc <__aeabi_dcmplt>
 801368a:	e7b2      	b.n	80135f2 <_strtod_l+0xb12>
 801368c:	2300      	movs	r3, #0
 801368e:	930a      	str	r3, [sp, #40]	; 0x28
 8013690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013692:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013694:	6013      	str	r3, [r2, #0]
 8013696:	f7ff ba6b 	b.w	8012b70 <_strtod_l+0x90>
 801369a:	2a65      	cmp	r2, #101	; 0x65
 801369c:	f43f ab5f 	beq.w	8012d5e <_strtod_l+0x27e>
 80136a0:	2a45      	cmp	r2, #69	; 0x45
 80136a2:	f43f ab5c 	beq.w	8012d5e <_strtod_l+0x27e>
 80136a6:	2301      	movs	r3, #1
 80136a8:	f7ff bb94 	b.w	8012dd4 <_strtod_l+0x2f4>
 80136ac:	f3af 8000 	nop.w
 80136b0:	94a03595 	.word	0x94a03595
 80136b4:	3fdfffff 	.word	0x3fdfffff
 80136b8:	35afe535 	.word	0x35afe535
 80136bc:	3fe00000 	.word	0x3fe00000
 80136c0:	ffc00000 	.word	0xffc00000
 80136c4:	41dfffff 	.word	0x41dfffff
 80136c8:	94a03595 	.word	0x94a03595
 80136cc:	3fcfffff 	.word	0x3fcfffff
 80136d0:	3ff00000 	.word	0x3ff00000
 80136d4:	7ff00000 	.word	0x7ff00000
 80136d8:	7fe00000 	.word	0x7fe00000
 80136dc:	7c9fffff 	.word	0x7c9fffff
 80136e0:	3fe00000 	.word	0x3fe00000
 80136e4:	bff00000 	.word	0xbff00000
 80136e8:	7fefffff 	.word	0x7fefffff

080136ec <_strtod_r>:
 80136ec:	4b01      	ldr	r3, [pc, #4]	; (80136f4 <_strtod_r+0x8>)
 80136ee:	f7ff b9f7 	b.w	8012ae0 <_strtod_l>
 80136f2:	bf00      	nop
 80136f4:	20000538 	.word	0x20000538

080136f8 <_strtol_l.constprop.0>:
 80136f8:	2b01      	cmp	r3, #1
 80136fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136fe:	d001      	beq.n	8013704 <_strtol_l.constprop.0+0xc>
 8013700:	2b24      	cmp	r3, #36	; 0x24
 8013702:	d906      	bls.n	8013712 <_strtol_l.constprop.0+0x1a>
 8013704:	f7fd ff1e 	bl	8011544 <__errno>
 8013708:	2316      	movs	r3, #22
 801370a:	6003      	str	r3, [r0, #0]
 801370c:	2000      	movs	r0, #0
 801370e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013712:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80137f8 <_strtol_l.constprop.0+0x100>
 8013716:	460d      	mov	r5, r1
 8013718:	462e      	mov	r6, r5
 801371a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801371e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8013722:	f017 0708 	ands.w	r7, r7, #8
 8013726:	d1f7      	bne.n	8013718 <_strtol_l.constprop.0+0x20>
 8013728:	2c2d      	cmp	r4, #45	; 0x2d
 801372a:	d132      	bne.n	8013792 <_strtol_l.constprop.0+0x9a>
 801372c:	782c      	ldrb	r4, [r5, #0]
 801372e:	2701      	movs	r7, #1
 8013730:	1cb5      	adds	r5, r6, #2
 8013732:	2b00      	cmp	r3, #0
 8013734:	d05b      	beq.n	80137ee <_strtol_l.constprop.0+0xf6>
 8013736:	2b10      	cmp	r3, #16
 8013738:	d109      	bne.n	801374e <_strtol_l.constprop.0+0x56>
 801373a:	2c30      	cmp	r4, #48	; 0x30
 801373c:	d107      	bne.n	801374e <_strtol_l.constprop.0+0x56>
 801373e:	782c      	ldrb	r4, [r5, #0]
 8013740:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013744:	2c58      	cmp	r4, #88	; 0x58
 8013746:	d14d      	bne.n	80137e4 <_strtol_l.constprop.0+0xec>
 8013748:	786c      	ldrb	r4, [r5, #1]
 801374a:	2310      	movs	r3, #16
 801374c:	3502      	adds	r5, #2
 801374e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013752:	f108 38ff 	add.w	r8, r8, #4294967295
 8013756:	f04f 0c00 	mov.w	ip, #0
 801375a:	fbb8 f9f3 	udiv	r9, r8, r3
 801375e:	4666      	mov	r6, ip
 8013760:	fb03 8a19 	mls	sl, r3, r9, r8
 8013764:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8013768:	f1be 0f09 	cmp.w	lr, #9
 801376c:	d816      	bhi.n	801379c <_strtol_l.constprop.0+0xa4>
 801376e:	4674      	mov	r4, lr
 8013770:	42a3      	cmp	r3, r4
 8013772:	dd24      	ble.n	80137be <_strtol_l.constprop.0+0xc6>
 8013774:	f1bc 0f00 	cmp.w	ip, #0
 8013778:	db1e      	blt.n	80137b8 <_strtol_l.constprop.0+0xc0>
 801377a:	45b1      	cmp	r9, r6
 801377c:	d31c      	bcc.n	80137b8 <_strtol_l.constprop.0+0xc0>
 801377e:	d101      	bne.n	8013784 <_strtol_l.constprop.0+0x8c>
 8013780:	45a2      	cmp	sl, r4
 8013782:	db19      	blt.n	80137b8 <_strtol_l.constprop.0+0xc0>
 8013784:	fb06 4603 	mla	r6, r6, r3, r4
 8013788:	f04f 0c01 	mov.w	ip, #1
 801378c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013790:	e7e8      	b.n	8013764 <_strtol_l.constprop.0+0x6c>
 8013792:	2c2b      	cmp	r4, #43	; 0x2b
 8013794:	bf04      	itt	eq
 8013796:	782c      	ldrbeq	r4, [r5, #0]
 8013798:	1cb5      	addeq	r5, r6, #2
 801379a:	e7ca      	b.n	8013732 <_strtol_l.constprop.0+0x3a>
 801379c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80137a0:	f1be 0f19 	cmp.w	lr, #25
 80137a4:	d801      	bhi.n	80137aa <_strtol_l.constprop.0+0xb2>
 80137a6:	3c37      	subs	r4, #55	; 0x37
 80137a8:	e7e2      	b.n	8013770 <_strtol_l.constprop.0+0x78>
 80137aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80137ae:	f1be 0f19 	cmp.w	lr, #25
 80137b2:	d804      	bhi.n	80137be <_strtol_l.constprop.0+0xc6>
 80137b4:	3c57      	subs	r4, #87	; 0x57
 80137b6:	e7db      	b.n	8013770 <_strtol_l.constprop.0+0x78>
 80137b8:	f04f 3cff 	mov.w	ip, #4294967295
 80137bc:	e7e6      	b.n	801378c <_strtol_l.constprop.0+0x94>
 80137be:	f1bc 0f00 	cmp.w	ip, #0
 80137c2:	da05      	bge.n	80137d0 <_strtol_l.constprop.0+0xd8>
 80137c4:	2322      	movs	r3, #34	; 0x22
 80137c6:	6003      	str	r3, [r0, #0]
 80137c8:	4646      	mov	r6, r8
 80137ca:	b942      	cbnz	r2, 80137de <_strtol_l.constprop.0+0xe6>
 80137cc:	4630      	mov	r0, r6
 80137ce:	e79e      	b.n	801370e <_strtol_l.constprop.0+0x16>
 80137d0:	b107      	cbz	r7, 80137d4 <_strtol_l.constprop.0+0xdc>
 80137d2:	4276      	negs	r6, r6
 80137d4:	2a00      	cmp	r2, #0
 80137d6:	d0f9      	beq.n	80137cc <_strtol_l.constprop.0+0xd4>
 80137d8:	f1bc 0f00 	cmp.w	ip, #0
 80137dc:	d000      	beq.n	80137e0 <_strtol_l.constprop.0+0xe8>
 80137de:	1e69      	subs	r1, r5, #1
 80137e0:	6011      	str	r1, [r2, #0]
 80137e2:	e7f3      	b.n	80137cc <_strtol_l.constprop.0+0xd4>
 80137e4:	2430      	movs	r4, #48	; 0x30
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d1b1      	bne.n	801374e <_strtol_l.constprop.0+0x56>
 80137ea:	2308      	movs	r3, #8
 80137ec:	e7af      	b.n	801374e <_strtol_l.constprop.0+0x56>
 80137ee:	2c30      	cmp	r4, #48	; 0x30
 80137f0:	d0a5      	beq.n	801373e <_strtol_l.constprop.0+0x46>
 80137f2:	230a      	movs	r3, #10
 80137f4:	e7ab      	b.n	801374e <_strtol_l.constprop.0+0x56>
 80137f6:	bf00      	nop
 80137f8:	08016f99 	.word	0x08016f99

080137fc <_strtol_r>:
 80137fc:	f7ff bf7c 	b.w	80136f8 <_strtol_l.constprop.0>

08013800 <_vsniprintf_r>:
 8013800:	b530      	push	{r4, r5, lr}
 8013802:	4614      	mov	r4, r2
 8013804:	2c00      	cmp	r4, #0
 8013806:	b09b      	sub	sp, #108	; 0x6c
 8013808:	4605      	mov	r5, r0
 801380a:	461a      	mov	r2, r3
 801380c:	da05      	bge.n	801381a <_vsniprintf_r+0x1a>
 801380e:	238b      	movs	r3, #139	; 0x8b
 8013810:	6003      	str	r3, [r0, #0]
 8013812:	f04f 30ff 	mov.w	r0, #4294967295
 8013816:	b01b      	add	sp, #108	; 0x6c
 8013818:	bd30      	pop	{r4, r5, pc}
 801381a:	f44f 7302 	mov.w	r3, #520	; 0x208
 801381e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013822:	bf14      	ite	ne
 8013824:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013828:	4623      	moveq	r3, r4
 801382a:	9302      	str	r3, [sp, #8]
 801382c:	9305      	str	r3, [sp, #20]
 801382e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013832:	9100      	str	r1, [sp, #0]
 8013834:	9104      	str	r1, [sp, #16]
 8013836:	f8ad 300e 	strh.w	r3, [sp, #14]
 801383a:	4669      	mov	r1, sp
 801383c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801383e:	f002 f89b 	bl	8015978 <_svfiprintf_r>
 8013842:	1c43      	adds	r3, r0, #1
 8013844:	bfbc      	itt	lt
 8013846:	238b      	movlt	r3, #139	; 0x8b
 8013848:	602b      	strlt	r3, [r5, #0]
 801384a:	2c00      	cmp	r4, #0
 801384c:	d0e3      	beq.n	8013816 <_vsniprintf_r+0x16>
 801384e:	9b00      	ldr	r3, [sp, #0]
 8013850:	2200      	movs	r2, #0
 8013852:	701a      	strb	r2, [r3, #0]
 8013854:	e7df      	b.n	8013816 <_vsniprintf_r+0x16>
	...

08013858 <vsniprintf>:
 8013858:	b507      	push	{r0, r1, r2, lr}
 801385a:	9300      	str	r3, [sp, #0]
 801385c:	4613      	mov	r3, r2
 801385e:	460a      	mov	r2, r1
 8013860:	4601      	mov	r1, r0
 8013862:	4803      	ldr	r0, [pc, #12]	; (8013870 <vsniprintf+0x18>)
 8013864:	6800      	ldr	r0, [r0, #0]
 8013866:	f7ff ffcb 	bl	8013800 <_vsniprintf_r>
 801386a:	b003      	add	sp, #12
 801386c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013870:	200004d0 	.word	0x200004d0

08013874 <__swbuf_r>:
 8013874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013876:	460e      	mov	r6, r1
 8013878:	4614      	mov	r4, r2
 801387a:	4605      	mov	r5, r0
 801387c:	b118      	cbz	r0, 8013886 <__swbuf_r+0x12>
 801387e:	6983      	ldr	r3, [r0, #24]
 8013880:	b90b      	cbnz	r3, 8013886 <__swbuf_r+0x12>
 8013882:	f7fd ff91 	bl	80117a8 <__sinit>
 8013886:	4b21      	ldr	r3, [pc, #132]	; (801390c <__swbuf_r+0x98>)
 8013888:	429c      	cmp	r4, r3
 801388a:	d12b      	bne.n	80138e4 <__swbuf_r+0x70>
 801388c:	686c      	ldr	r4, [r5, #4]
 801388e:	69a3      	ldr	r3, [r4, #24]
 8013890:	60a3      	str	r3, [r4, #8]
 8013892:	89a3      	ldrh	r3, [r4, #12]
 8013894:	071a      	lsls	r2, r3, #28
 8013896:	d52f      	bpl.n	80138f8 <__swbuf_r+0x84>
 8013898:	6923      	ldr	r3, [r4, #16]
 801389a:	b36b      	cbz	r3, 80138f8 <__swbuf_r+0x84>
 801389c:	6923      	ldr	r3, [r4, #16]
 801389e:	6820      	ldr	r0, [r4, #0]
 80138a0:	1ac0      	subs	r0, r0, r3
 80138a2:	6963      	ldr	r3, [r4, #20]
 80138a4:	b2f6      	uxtb	r6, r6
 80138a6:	4283      	cmp	r3, r0
 80138a8:	4637      	mov	r7, r6
 80138aa:	dc04      	bgt.n	80138b6 <__swbuf_r+0x42>
 80138ac:	4621      	mov	r1, r4
 80138ae:	4628      	mov	r0, r5
 80138b0:	f7fd fed4 	bl	801165c <_fflush_r>
 80138b4:	bb30      	cbnz	r0, 8013904 <__swbuf_r+0x90>
 80138b6:	68a3      	ldr	r3, [r4, #8]
 80138b8:	3b01      	subs	r3, #1
 80138ba:	60a3      	str	r3, [r4, #8]
 80138bc:	6823      	ldr	r3, [r4, #0]
 80138be:	1c5a      	adds	r2, r3, #1
 80138c0:	6022      	str	r2, [r4, #0]
 80138c2:	701e      	strb	r6, [r3, #0]
 80138c4:	6963      	ldr	r3, [r4, #20]
 80138c6:	3001      	adds	r0, #1
 80138c8:	4283      	cmp	r3, r0
 80138ca:	d004      	beq.n	80138d6 <__swbuf_r+0x62>
 80138cc:	89a3      	ldrh	r3, [r4, #12]
 80138ce:	07db      	lsls	r3, r3, #31
 80138d0:	d506      	bpl.n	80138e0 <__swbuf_r+0x6c>
 80138d2:	2e0a      	cmp	r6, #10
 80138d4:	d104      	bne.n	80138e0 <__swbuf_r+0x6c>
 80138d6:	4621      	mov	r1, r4
 80138d8:	4628      	mov	r0, r5
 80138da:	f7fd febf 	bl	801165c <_fflush_r>
 80138de:	b988      	cbnz	r0, 8013904 <__swbuf_r+0x90>
 80138e0:	4638      	mov	r0, r7
 80138e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138e4:	4b0a      	ldr	r3, [pc, #40]	; (8013910 <__swbuf_r+0x9c>)
 80138e6:	429c      	cmp	r4, r3
 80138e8:	d101      	bne.n	80138ee <__swbuf_r+0x7a>
 80138ea:	68ac      	ldr	r4, [r5, #8]
 80138ec:	e7cf      	b.n	801388e <__swbuf_r+0x1a>
 80138ee:	4b09      	ldr	r3, [pc, #36]	; (8013914 <__swbuf_r+0xa0>)
 80138f0:	429c      	cmp	r4, r3
 80138f2:	bf08      	it	eq
 80138f4:	68ec      	ldreq	r4, [r5, #12]
 80138f6:	e7ca      	b.n	801388e <__swbuf_r+0x1a>
 80138f8:	4621      	mov	r1, r4
 80138fa:	4628      	mov	r0, r5
 80138fc:	f000 f81e 	bl	801393c <__swsetup_r>
 8013900:	2800      	cmp	r0, #0
 8013902:	d0cb      	beq.n	801389c <__swbuf_r+0x28>
 8013904:	f04f 37ff 	mov.w	r7, #4294967295
 8013908:	e7ea      	b.n	80138e0 <__swbuf_r+0x6c>
 801390a:	bf00      	nop
 801390c:	08016ec4 	.word	0x08016ec4
 8013910:	08016ee4 	.word	0x08016ee4
 8013914:	08016ea4 	.word	0x08016ea4

08013918 <_write_r>:
 8013918:	b538      	push	{r3, r4, r5, lr}
 801391a:	4d07      	ldr	r5, [pc, #28]	; (8013938 <_write_r+0x20>)
 801391c:	4604      	mov	r4, r0
 801391e:	4608      	mov	r0, r1
 8013920:	4611      	mov	r1, r2
 8013922:	2200      	movs	r2, #0
 8013924:	602a      	str	r2, [r5, #0]
 8013926:	461a      	mov	r2, r3
 8013928:	f7f4 ffd3 	bl	80088d2 <_write>
 801392c:	1c43      	adds	r3, r0, #1
 801392e:	d102      	bne.n	8013936 <_write_r+0x1e>
 8013930:	682b      	ldr	r3, [r5, #0]
 8013932:	b103      	cbz	r3, 8013936 <_write_r+0x1e>
 8013934:	6023      	str	r3, [r4, #0]
 8013936:	bd38      	pop	{r3, r4, r5, pc}
 8013938:	2000252c 	.word	0x2000252c

0801393c <__swsetup_r>:
 801393c:	4b32      	ldr	r3, [pc, #200]	; (8013a08 <__swsetup_r+0xcc>)
 801393e:	b570      	push	{r4, r5, r6, lr}
 8013940:	681d      	ldr	r5, [r3, #0]
 8013942:	4606      	mov	r6, r0
 8013944:	460c      	mov	r4, r1
 8013946:	b125      	cbz	r5, 8013952 <__swsetup_r+0x16>
 8013948:	69ab      	ldr	r3, [r5, #24]
 801394a:	b913      	cbnz	r3, 8013952 <__swsetup_r+0x16>
 801394c:	4628      	mov	r0, r5
 801394e:	f7fd ff2b 	bl	80117a8 <__sinit>
 8013952:	4b2e      	ldr	r3, [pc, #184]	; (8013a0c <__swsetup_r+0xd0>)
 8013954:	429c      	cmp	r4, r3
 8013956:	d10f      	bne.n	8013978 <__swsetup_r+0x3c>
 8013958:	686c      	ldr	r4, [r5, #4]
 801395a:	89a3      	ldrh	r3, [r4, #12]
 801395c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013960:	0719      	lsls	r1, r3, #28
 8013962:	d42c      	bmi.n	80139be <__swsetup_r+0x82>
 8013964:	06dd      	lsls	r5, r3, #27
 8013966:	d411      	bmi.n	801398c <__swsetup_r+0x50>
 8013968:	2309      	movs	r3, #9
 801396a:	6033      	str	r3, [r6, #0]
 801396c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013970:	81a3      	strh	r3, [r4, #12]
 8013972:	f04f 30ff 	mov.w	r0, #4294967295
 8013976:	e03e      	b.n	80139f6 <__swsetup_r+0xba>
 8013978:	4b25      	ldr	r3, [pc, #148]	; (8013a10 <__swsetup_r+0xd4>)
 801397a:	429c      	cmp	r4, r3
 801397c:	d101      	bne.n	8013982 <__swsetup_r+0x46>
 801397e:	68ac      	ldr	r4, [r5, #8]
 8013980:	e7eb      	b.n	801395a <__swsetup_r+0x1e>
 8013982:	4b24      	ldr	r3, [pc, #144]	; (8013a14 <__swsetup_r+0xd8>)
 8013984:	429c      	cmp	r4, r3
 8013986:	bf08      	it	eq
 8013988:	68ec      	ldreq	r4, [r5, #12]
 801398a:	e7e6      	b.n	801395a <__swsetup_r+0x1e>
 801398c:	0758      	lsls	r0, r3, #29
 801398e:	d512      	bpl.n	80139b6 <__swsetup_r+0x7a>
 8013990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013992:	b141      	cbz	r1, 80139a6 <__swsetup_r+0x6a>
 8013994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013998:	4299      	cmp	r1, r3
 801399a:	d002      	beq.n	80139a2 <__swsetup_r+0x66>
 801399c:	4630      	mov	r0, r6
 801399e:	f7fe f81f 	bl	80119e0 <_free_r>
 80139a2:	2300      	movs	r3, #0
 80139a4:	6363      	str	r3, [r4, #52]	; 0x34
 80139a6:	89a3      	ldrh	r3, [r4, #12]
 80139a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80139ac:	81a3      	strh	r3, [r4, #12]
 80139ae:	2300      	movs	r3, #0
 80139b0:	6063      	str	r3, [r4, #4]
 80139b2:	6923      	ldr	r3, [r4, #16]
 80139b4:	6023      	str	r3, [r4, #0]
 80139b6:	89a3      	ldrh	r3, [r4, #12]
 80139b8:	f043 0308 	orr.w	r3, r3, #8
 80139bc:	81a3      	strh	r3, [r4, #12]
 80139be:	6923      	ldr	r3, [r4, #16]
 80139c0:	b94b      	cbnz	r3, 80139d6 <__swsetup_r+0x9a>
 80139c2:	89a3      	ldrh	r3, [r4, #12]
 80139c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80139c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139cc:	d003      	beq.n	80139d6 <__swsetup_r+0x9a>
 80139ce:	4621      	mov	r1, r4
 80139d0:	4630      	mov	r0, r6
 80139d2:	f001 fa57 	bl	8014e84 <__smakebuf_r>
 80139d6:	89a0      	ldrh	r0, [r4, #12]
 80139d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80139dc:	f010 0301 	ands.w	r3, r0, #1
 80139e0:	d00a      	beq.n	80139f8 <__swsetup_r+0xbc>
 80139e2:	2300      	movs	r3, #0
 80139e4:	60a3      	str	r3, [r4, #8]
 80139e6:	6963      	ldr	r3, [r4, #20]
 80139e8:	425b      	negs	r3, r3
 80139ea:	61a3      	str	r3, [r4, #24]
 80139ec:	6923      	ldr	r3, [r4, #16]
 80139ee:	b943      	cbnz	r3, 8013a02 <__swsetup_r+0xc6>
 80139f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80139f4:	d1ba      	bne.n	801396c <__swsetup_r+0x30>
 80139f6:	bd70      	pop	{r4, r5, r6, pc}
 80139f8:	0781      	lsls	r1, r0, #30
 80139fa:	bf58      	it	pl
 80139fc:	6963      	ldrpl	r3, [r4, #20]
 80139fe:	60a3      	str	r3, [r4, #8]
 8013a00:	e7f4      	b.n	80139ec <__swsetup_r+0xb0>
 8013a02:	2000      	movs	r0, #0
 8013a04:	e7f7      	b.n	80139f6 <__swsetup_r+0xba>
 8013a06:	bf00      	nop
 8013a08:	200004d0 	.word	0x200004d0
 8013a0c:	08016ec4 	.word	0x08016ec4
 8013a10:	08016ee4 	.word	0x08016ee4
 8013a14:	08016ea4 	.word	0x08016ea4

08013a18 <_close_r>:
 8013a18:	b538      	push	{r3, r4, r5, lr}
 8013a1a:	4d06      	ldr	r5, [pc, #24]	; (8013a34 <_close_r+0x1c>)
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	4604      	mov	r4, r0
 8013a20:	4608      	mov	r0, r1
 8013a22:	602b      	str	r3, [r5, #0]
 8013a24:	f7f4 ff71 	bl	800890a <_close>
 8013a28:	1c43      	adds	r3, r0, #1
 8013a2a:	d102      	bne.n	8013a32 <_close_r+0x1a>
 8013a2c:	682b      	ldr	r3, [r5, #0]
 8013a2e:	b103      	cbz	r3, 8013a32 <_close_r+0x1a>
 8013a30:	6023      	str	r3, [r4, #0]
 8013a32:	bd38      	pop	{r3, r4, r5, pc}
 8013a34:	2000252c 	.word	0x2000252c

08013a38 <quorem>:
 8013a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a3c:	6903      	ldr	r3, [r0, #16]
 8013a3e:	690c      	ldr	r4, [r1, #16]
 8013a40:	42a3      	cmp	r3, r4
 8013a42:	4607      	mov	r7, r0
 8013a44:	f2c0 8081 	blt.w	8013b4a <quorem+0x112>
 8013a48:	3c01      	subs	r4, #1
 8013a4a:	f101 0814 	add.w	r8, r1, #20
 8013a4e:	f100 0514 	add.w	r5, r0, #20
 8013a52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013a56:	9301      	str	r3, [sp, #4]
 8013a58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013a5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013a60:	3301      	adds	r3, #1
 8013a62:	429a      	cmp	r2, r3
 8013a64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013a68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013a6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013a70:	d331      	bcc.n	8013ad6 <quorem+0x9e>
 8013a72:	f04f 0e00 	mov.w	lr, #0
 8013a76:	4640      	mov	r0, r8
 8013a78:	46ac      	mov	ip, r5
 8013a7a:	46f2      	mov	sl, lr
 8013a7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013a80:	b293      	uxth	r3, r2
 8013a82:	fb06 e303 	mla	r3, r6, r3, lr
 8013a86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	ebaa 0303 	sub.w	r3, sl, r3
 8013a90:	f8dc a000 	ldr.w	sl, [ip]
 8013a94:	0c12      	lsrs	r2, r2, #16
 8013a96:	fa13 f38a 	uxtah	r3, r3, sl
 8013a9a:	fb06 e202 	mla	r2, r6, r2, lr
 8013a9e:	9300      	str	r3, [sp, #0]
 8013aa0:	9b00      	ldr	r3, [sp, #0]
 8013aa2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013aa6:	b292      	uxth	r2, r2
 8013aa8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013aac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013ab0:	f8bd 3000 	ldrh.w	r3, [sp]
 8013ab4:	4581      	cmp	r9, r0
 8013ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013aba:	f84c 3b04 	str.w	r3, [ip], #4
 8013abe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013ac2:	d2db      	bcs.n	8013a7c <quorem+0x44>
 8013ac4:	f855 300b 	ldr.w	r3, [r5, fp]
 8013ac8:	b92b      	cbnz	r3, 8013ad6 <quorem+0x9e>
 8013aca:	9b01      	ldr	r3, [sp, #4]
 8013acc:	3b04      	subs	r3, #4
 8013ace:	429d      	cmp	r5, r3
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	d32e      	bcc.n	8013b32 <quorem+0xfa>
 8013ad4:	613c      	str	r4, [r7, #16]
 8013ad6:	4638      	mov	r0, r7
 8013ad8:	f001 fcfe 	bl	80154d8 <__mcmp>
 8013adc:	2800      	cmp	r0, #0
 8013ade:	db24      	blt.n	8013b2a <quorem+0xf2>
 8013ae0:	3601      	adds	r6, #1
 8013ae2:	4628      	mov	r0, r5
 8013ae4:	f04f 0c00 	mov.w	ip, #0
 8013ae8:	f858 2b04 	ldr.w	r2, [r8], #4
 8013aec:	f8d0 e000 	ldr.w	lr, [r0]
 8013af0:	b293      	uxth	r3, r2
 8013af2:	ebac 0303 	sub.w	r3, ip, r3
 8013af6:	0c12      	lsrs	r2, r2, #16
 8013af8:	fa13 f38e 	uxtah	r3, r3, lr
 8013afc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013b0a:	45c1      	cmp	r9, r8
 8013b0c:	f840 3b04 	str.w	r3, [r0], #4
 8013b10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013b14:	d2e8      	bcs.n	8013ae8 <quorem+0xb0>
 8013b16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b1e:	b922      	cbnz	r2, 8013b2a <quorem+0xf2>
 8013b20:	3b04      	subs	r3, #4
 8013b22:	429d      	cmp	r5, r3
 8013b24:	461a      	mov	r2, r3
 8013b26:	d30a      	bcc.n	8013b3e <quorem+0x106>
 8013b28:	613c      	str	r4, [r7, #16]
 8013b2a:	4630      	mov	r0, r6
 8013b2c:	b003      	add	sp, #12
 8013b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b32:	6812      	ldr	r2, [r2, #0]
 8013b34:	3b04      	subs	r3, #4
 8013b36:	2a00      	cmp	r2, #0
 8013b38:	d1cc      	bne.n	8013ad4 <quorem+0x9c>
 8013b3a:	3c01      	subs	r4, #1
 8013b3c:	e7c7      	b.n	8013ace <quorem+0x96>
 8013b3e:	6812      	ldr	r2, [r2, #0]
 8013b40:	3b04      	subs	r3, #4
 8013b42:	2a00      	cmp	r2, #0
 8013b44:	d1f0      	bne.n	8013b28 <quorem+0xf0>
 8013b46:	3c01      	subs	r4, #1
 8013b48:	e7eb      	b.n	8013b22 <quorem+0xea>
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	e7ee      	b.n	8013b2c <quorem+0xf4>
	...

08013b50 <_dtoa_r>:
 8013b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b54:	ed2d 8b04 	vpush	{d8-d9}
 8013b58:	ec57 6b10 	vmov	r6, r7, d0
 8013b5c:	b093      	sub	sp, #76	; 0x4c
 8013b5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013b60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013b64:	9106      	str	r1, [sp, #24]
 8013b66:	ee10 aa10 	vmov	sl, s0
 8013b6a:	4604      	mov	r4, r0
 8013b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8013b6e:	930c      	str	r3, [sp, #48]	; 0x30
 8013b70:	46bb      	mov	fp, r7
 8013b72:	b975      	cbnz	r5, 8013b92 <_dtoa_r+0x42>
 8013b74:	2010      	movs	r0, #16
 8013b76:	f7fd fedd 	bl	8011934 <malloc>
 8013b7a:	4602      	mov	r2, r0
 8013b7c:	6260      	str	r0, [r4, #36]	; 0x24
 8013b7e:	b920      	cbnz	r0, 8013b8a <_dtoa_r+0x3a>
 8013b80:	4ba7      	ldr	r3, [pc, #668]	; (8013e20 <_dtoa_r+0x2d0>)
 8013b82:	21ea      	movs	r1, #234	; 0xea
 8013b84:	48a7      	ldr	r0, [pc, #668]	; (8013e24 <_dtoa_r+0x2d4>)
 8013b86:	f002 f98d 	bl	8015ea4 <__assert_func>
 8013b8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013b8e:	6005      	str	r5, [r0, #0]
 8013b90:	60c5      	str	r5, [r0, #12]
 8013b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b94:	6819      	ldr	r1, [r3, #0]
 8013b96:	b151      	cbz	r1, 8013bae <_dtoa_r+0x5e>
 8013b98:	685a      	ldr	r2, [r3, #4]
 8013b9a:	604a      	str	r2, [r1, #4]
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	4093      	lsls	r3, r2
 8013ba0:	608b      	str	r3, [r1, #8]
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	f001 fa0c 	bl	8014fc0 <_Bfree>
 8013ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013baa:	2200      	movs	r2, #0
 8013bac:	601a      	str	r2, [r3, #0]
 8013bae:	1e3b      	subs	r3, r7, #0
 8013bb0:	bfaa      	itet	ge
 8013bb2:	2300      	movge	r3, #0
 8013bb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013bb8:	f8c8 3000 	strge.w	r3, [r8]
 8013bbc:	4b9a      	ldr	r3, [pc, #616]	; (8013e28 <_dtoa_r+0x2d8>)
 8013bbe:	bfbc      	itt	lt
 8013bc0:	2201      	movlt	r2, #1
 8013bc2:	f8c8 2000 	strlt.w	r2, [r8]
 8013bc6:	ea33 030b 	bics.w	r3, r3, fp
 8013bca:	d11b      	bne.n	8013c04 <_dtoa_r+0xb4>
 8013bcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bce:	f242 730f 	movw	r3, #9999	; 0x270f
 8013bd2:	6013      	str	r3, [r2, #0]
 8013bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013bd8:	4333      	orrs	r3, r6
 8013bda:	f000 8592 	beq.w	8014702 <_dtoa_r+0xbb2>
 8013bde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013be0:	b963      	cbnz	r3, 8013bfc <_dtoa_r+0xac>
 8013be2:	4b92      	ldr	r3, [pc, #584]	; (8013e2c <_dtoa_r+0x2dc>)
 8013be4:	e022      	b.n	8013c2c <_dtoa_r+0xdc>
 8013be6:	4b92      	ldr	r3, [pc, #584]	; (8013e30 <_dtoa_r+0x2e0>)
 8013be8:	9301      	str	r3, [sp, #4]
 8013bea:	3308      	adds	r3, #8
 8013bec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013bee:	6013      	str	r3, [r2, #0]
 8013bf0:	9801      	ldr	r0, [sp, #4]
 8013bf2:	b013      	add	sp, #76	; 0x4c
 8013bf4:	ecbd 8b04 	vpop	{d8-d9}
 8013bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bfc:	4b8b      	ldr	r3, [pc, #556]	; (8013e2c <_dtoa_r+0x2dc>)
 8013bfe:	9301      	str	r3, [sp, #4]
 8013c00:	3303      	adds	r3, #3
 8013c02:	e7f3      	b.n	8013bec <_dtoa_r+0x9c>
 8013c04:	2200      	movs	r2, #0
 8013c06:	2300      	movs	r3, #0
 8013c08:	4650      	mov	r0, sl
 8013c0a:	4659      	mov	r1, fp
 8013c0c:	f7ec ff5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c10:	ec4b ab19 	vmov	d9, sl, fp
 8013c14:	4680      	mov	r8, r0
 8013c16:	b158      	cbz	r0, 8013c30 <_dtoa_r+0xe0>
 8013c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	6013      	str	r3, [r2, #0]
 8013c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	f000 856b 	beq.w	80146fc <_dtoa_r+0xbac>
 8013c26:	4883      	ldr	r0, [pc, #524]	; (8013e34 <_dtoa_r+0x2e4>)
 8013c28:	6018      	str	r0, [r3, #0]
 8013c2a:	1e43      	subs	r3, r0, #1
 8013c2c:	9301      	str	r3, [sp, #4]
 8013c2e:	e7df      	b.n	8013bf0 <_dtoa_r+0xa0>
 8013c30:	ec4b ab10 	vmov	d0, sl, fp
 8013c34:	aa10      	add	r2, sp, #64	; 0x40
 8013c36:	a911      	add	r1, sp, #68	; 0x44
 8013c38:	4620      	mov	r0, r4
 8013c3a:	f001 fd6f 	bl	801571c <__d2b>
 8013c3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8013c42:	ee08 0a10 	vmov	s16, r0
 8013c46:	2d00      	cmp	r5, #0
 8013c48:	f000 8084 	beq.w	8013d54 <_dtoa_r+0x204>
 8013c4c:	ee19 3a90 	vmov	r3, s19
 8013c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013c54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013c58:	4656      	mov	r6, sl
 8013c5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013c5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013c62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8013c66:	4b74      	ldr	r3, [pc, #464]	; (8013e38 <_dtoa_r+0x2e8>)
 8013c68:	2200      	movs	r2, #0
 8013c6a:	4630      	mov	r0, r6
 8013c6c:	4639      	mov	r1, r7
 8013c6e:	f7ec fb0b 	bl	8000288 <__aeabi_dsub>
 8013c72:	a365      	add	r3, pc, #404	; (adr r3, 8013e08 <_dtoa_r+0x2b8>)
 8013c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c78:	f7ec fcbe 	bl	80005f8 <__aeabi_dmul>
 8013c7c:	a364      	add	r3, pc, #400	; (adr r3, 8013e10 <_dtoa_r+0x2c0>)
 8013c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c82:	f7ec fb03 	bl	800028c <__adddf3>
 8013c86:	4606      	mov	r6, r0
 8013c88:	4628      	mov	r0, r5
 8013c8a:	460f      	mov	r7, r1
 8013c8c:	f7ec fc4a 	bl	8000524 <__aeabi_i2d>
 8013c90:	a361      	add	r3, pc, #388	; (adr r3, 8013e18 <_dtoa_r+0x2c8>)
 8013c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c96:	f7ec fcaf 	bl	80005f8 <__aeabi_dmul>
 8013c9a:	4602      	mov	r2, r0
 8013c9c:	460b      	mov	r3, r1
 8013c9e:	4630      	mov	r0, r6
 8013ca0:	4639      	mov	r1, r7
 8013ca2:	f7ec faf3 	bl	800028c <__adddf3>
 8013ca6:	4606      	mov	r6, r0
 8013ca8:	460f      	mov	r7, r1
 8013caa:	f7ec ff55 	bl	8000b58 <__aeabi_d2iz>
 8013cae:	2200      	movs	r2, #0
 8013cb0:	9000      	str	r0, [sp, #0]
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	4639      	mov	r1, r7
 8013cb8:	f7ec ff10 	bl	8000adc <__aeabi_dcmplt>
 8013cbc:	b150      	cbz	r0, 8013cd4 <_dtoa_r+0x184>
 8013cbe:	9800      	ldr	r0, [sp, #0]
 8013cc0:	f7ec fc30 	bl	8000524 <__aeabi_i2d>
 8013cc4:	4632      	mov	r2, r6
 8013cc6:	463b      	mov	r3, r7
 8013cc8:	f7ec fefe 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ccc:	b910      	cbnz	r0, 8013cd4 <_dtoa_r+0x184>
 8013cce:	9b00      	ldr	r3, [sp, #0]
 8013cd0:	3b01      	subs	r3, #1
 8013cd2:	9300      	str	r3, [sp, #0]
 8013cd4:	9b00      	ldr	r3, [sp, #0]
 8013cd6:	2b16      	cmp	r3, #22
 8013cd8:	d85a      	bhi.n	8013d90 <_dtoa_r+0x240>
 8013cda:	9a00      	ldr	r2, [sp, #0]
 8013cdc:	4b57      	ldr	r3, [pc, #348]	; (8013e3c <_dtoa_r+0x2ec>)
 8013cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce6:	ec51 0b19 	vmov	r0, r1, d9
 8013cea:	f7ec fef7 	bl	8000adc <__aeabi_dcmplt>
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	d050      	beq.n	8013d94 <_dtoa_r+0x244>
 8013cf2:	9b00      	ldr	r3, [sp, #0]
 8013cf4:	3b01      	subs	r3, #1
 8013cf6:	9300      	str	r3, [sp, #0]
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8013cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013cfe:	1b5d      	subs	r5, r3, r5
 8013d00:	1e6b      	subs	r3, r5, #1
 8013d02:	9305      	str	r3, [sp, #20]
 8013d04:	bf45      	ittet	mi
 8013d06:	f1c5 0301 	rsbmi	r3, r5, #1
 8013d0a:	9304      	strmi	r3, [sp, #16]
 8013d0c:	2300      	movpl	r3, #0
 8013d0e:	2300      	movmi	r3, #0
 8013d10:	bf4c      	ite	mi
 8013d12:	9305      	strmi	r3, [sp, #20]
 8013d14:	9304      	strpl	r3, [sp, #16]
 8013d16:	9b00      	ldr	r3, [sp, #0]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	db3d      	blt.n	8013d98 <_dtoa_r+0x248>
 8013d1c:	9b05      	ldr	r3, [sp, #20]
 8013d1e:	9a00      	ldr	r2, [sp, #0]
 8013d20:	920a      	str	r2, [sp, #40]	; 0x28
 8013d22:	4413      	add	r3, r2
 8013d24:	9305      	str	r3, [sp, #20]
 8013d26:	2300      	movs	r3, #0
 8013d28:	9307      	str	r3, [sp, #28]
 8013d2a:	9b06      	ldr	r3, [sp, #24]
 8013d2c:	2b09      	cmp	r3, #9
 8013d2e:	f200 8089 	bhi.w	8013e44 <_dtoa_r+0x2f4>
 8013d32:	2b05      	cmp	r3, #5
 8013d34:	bfc4      	itt	gt
 8013d36:	3b04      	subgt	r3, #4
 8013d38:	9306      	strgt	r3, [sp, #24]
 8013d3a:	9b06      	ldr	r3, [sp, #24]
 8013d3c:	f1a3 0302 	sub.w	r3, r3, #2
 8013d40:	bfcc      	ite	gt
 8013d42:	2500      	movgt	r5, #0
 8013d44:	2501      	movle	r5, #1
 8013d46:	2b03      	cmp	r3, #3
 8013d48:	f200 8087 	bhi.w	8013e5a <_dtoa_r+0x30a>
 8013d4c:	e8df f003 	tbb	[pc, r3]
 8013d50:	59383a2d 	.word	0x59383a2d
 8013d54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013d58:	441d      	add	r5, r3
 8013d5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013d5e:	2b20      	cmp	r3, #32
 8013d60:	bfc1      	itttt	gt
 8013d62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013d66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013d6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8013d6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013d72:	bfda      	itte	le
 8013d74:	f1c3 0320 	rsble	r3, r3, #32
 8013d78:	fa06 f003 	lslle.w	r0, r6, r3
 8013d7c:	4318      	orrgt	r0, r3
 8013d7e:	f7ec fbc1 	bl	8000504 <__aeabi_ui2d>
 8013d82:	2301      	movs	r3, #1
 8013d84:	4606      	mov	r6, r0
 8013d86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013d8a:	3d01      	subs	r5, #1
 8013d8c:	930e      	str	r3, [sp, #56]	; 0x38
 8013d8e:	e76a      	b.n	8013c66 <_dtoa_r+0x116>
 8013d90:	2301      	movs	r3, #1
 8013d92:	e7b2      	b.n	8013cfa <_dtoa_r+0x1aa>
 8013d94:	900b      	str	r0, [sp, #44]	; 0x2c
 8013d96:	e7b1      	b.n	8013cfc <_dtoa_r+0x1ac>
 8013d98:	9b04      	ldr	r3, [sp, #16]
 8013d9a:	9a00      	ldr	r2, [sp, #0]
 8013d9c:	1a9b      	subs	r3, r3, r2
 8013d9e:	9304      	str	r3, [sp, #16]
 8013da0:	4253      	negs	r3, r2
 8013da2:	9307      	str	r3, [sp, #28]
 8013da4:	2300      	movs	r3, #0
 8013da6:	930a      	str	r3, [sp, #40]	; 0x28
 8013da8:	e7bf      	b.n	8013d2a <_dtoa_r+0x1da>
 8013daa:	2300      	movs	r3, #0
 8013dac:	9308      	str	r3, [sp, #32]
 8013dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	dc55      	bgt.n	8013e60 <_dtoa_r+0x310>
 8013db4:	2301      	movs	r3, #1
 8013db6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013dba:	461a      	mov	r2, r3
 8013dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8013dbe:	e00c      	b.n	8013dda <_dtoa_r+0x28a>
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	e7f3      	b.n	8013dac <_dtoa_r+0x25c>
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dc8:	9308      	str	r3, [sp, #32]
 8013dca:	9b00      	ldr	r3, [sp, #0]
 8013dcc:	4413      	add	r3, r2
 8013dce:	9302      	str	r3, [sp, #8]
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	9303      	str	r3, [sp, #12]
 8013dd6:	bfb8      	it	lt
 8013dd8:	2301      	movlt	r3, #1
 8013dda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013ddc:	2200      	movs	r2, #0
 8013dde:	6042      	str	r2, [r0, #4]
 8013de0:	2204      	movs	r2, #4
 8013de2:	f102 0614 	add.w	r6, r2, #20
 8013de6:	429e      	cmp	r6, r3
 8013de8:	6841      	ldr	r1, [r0, #4]
 8013dea:	d93d      	bls.n	8013e68 <_dtoa_r+0x318>
 8013dec:	4620      	mov	r0, r4
 8013dee:	f001 f8a7 	bl	8014f40 <_Balloc>
 8013df2:	9001      	str	r0, [sp, #4]
 8013df4:	2800      	cmp	r0, #0
 8013df6:	d13b      	bne.n	8013e70 <_dtoa_r+0x320>
 8013df8:	4b11      	ldr	r3, [pc, #68]	; (8013e40 <_dtoa_r+0x2f0>)
 8013dfa:	4602      	mov	r2, r0
 8013dfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013e00:	e6c0      	b.n	8013b84 <_dtoa_r+0x34>
 8013e02:	2301      	movs	r3, #1
 8013e04:	e7df      	b.n	8013dc6 <_dtoa_r+0x276>
 8013e06:	bf00      	nop
 8013e08:	636f4361 	.word	0x636f4361
 8013e0c:	3fd287a7 	.word	0x3fd287a7
 8013e10:	8b60c8b3 	.word	0x8b60c8b3
 8013e14:	3fc68a28 	.word	0x3fc68a28
 8013e18:	509f79fb 	.word	0x509f79fb
 8013e1c:	3fd34413 	.word	0x3fd34413
 8013e20:	080170a6 	.word	0x080170a6
 8013e24:	080170bd 	.word	0x080170bd
 8013e28:	7ff00000 	.word	0x7ff00000
 8013e2c:	080170a2 	.word	0x080170a2
 8013e30:	08017099 	.word	0x08017099
 8013e34:	08016f19 	.word	0x08016f19
 8013e38:	3ff80000 	.word	0x3ff80000
 8013e3c:	08017228 	.word	0x08017228
 8013e40:	08017118 	.word	0x08017118
 8013e44:	2501      	movs	r5, #1
 8013e46:	2300      	movs	r3, #0
 8013e48:	9306      	str	r3, [sp, #24]
 8013e4a:	9508      	str	r5, [sp, #32]
 8013e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013e54:	2200      	movs	r2, #0
 8013e56:	2312      	movs	r3, #18
 8013e58:	e7b0      	b.n	8013dbc <_dtoa_r+0x26c>
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	9308      	str	r3, [sp, #32]
 8013e5e:	e7f5      	b.n	8013e4c <_dtoa_r+0x2fc>
 8013e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013e66:	e7b8      	b.n	8013dda <_dtoa_r+0x28a>
 8013e68:	3101      	adds	r1, #1
 8013e6a:	6041      	str	r1, [r0, #4]
 8013e6c:	0052      	lsls	r2, r2, #1
 8013e6e:	e7b8      	b.n	8013de2 <_dtoa_r+0x292>
 8013e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e72:	9a01      	ldr	r2, [sp, #4]
 8013e74:	601a      	str	r2, [r3, #0]
 8013e76:	9b03      	ldr	r3, [sp, #12]
 8013e78:	2b0e      	cmp	r3, #14
 8013e7a:	f200 809d 	bhi.w	8013fb8 <_dtoa_r+0x468>
 8013e7e:	2d00      	cmp	r5, #0
 8013e80:	f000 809a 	beq.w	8013fb8 <_dtoa_r+0x468>
 8013e84:	9b00      	ldr	r3, [sp, #0]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	dd32      	ble.n	8013ef0 <_dtoa_r+0x3a0>
 8013e8a:	4ab7      	ldr	r2, [pc, #732]	; (8014168 <_dtoa_r+0x618>)
 8013e8c:	f003 030f 	and.w	r3, r3, #15
 8013e90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013e94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013e98:	9b00      	ldr	r3, [sp, #0]
 8013e9a:	05d8      	lsls	r0, r3, #23
 8013e9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013ea0:	d516      	bpl.n	8013ed0 <_dtoa_r+0x380>
 8013ea2:	4bb2      	ldr	r3, [pc, #712]	; (801416c <_dtoa_r+0x61c>)
 8013ea4:	ec51 0b19 	vmov	r0, r1, d9
 8013ea8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013eac:	f7ec fcce 	bl	800084c <__aeabi_ddiv>
 8013eb0:	f007 070f 	and.w	r7, r7, #15
 8013eb4:	4682      	mov	sl, r0
 8013eb6:	468b      	mov	fp, r1
 8013eb8:	2503      	movs	r5, #3
 8013eba:	4eac      	ldr	r6, [pc, #688]	; (801416c <_dtoa_r+0x61c>)
 8013ebc:	b957      	cbnz	r7, 8013ed4 <_dtoa_r+0x384>
 8013ebe:	4642      	mov	r2, r8
 8013ec0:	464b      	mov	r3, r9
 8013ec2:	4650      	mov	r0, sl
 8013ec4:	4659      	mov	r1, fp
 8013ec6:	f7ec fcc1 	bl	800084c <__aeabi_ddiv>
 8013eca:	4682      	mov	sl, r0
 8013ecc:	468b      	mov	fp, r1
 8013ece:	e028      	b.n	8013f22 <_dtoa_r+0x3d2>
 8013ed0:	2502      	movs	r5, #2
 8013ed2:	e7f2      	b.n	8013eba <_dtoa_r+0x36a>
 8013ed4:	07f9      	lsls	r1, r7, #31
 8013ed6:	d508      	bpl.n	8013eea <_dtoa_r+0x39a>
 8013ed8:	4640      	mov	r0, r8
 8013eda:	4649      	mov	r1, r9
 8013edc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013ee0:	f7ec fb8a 	bl	80005f8 <__aeabi_dmul>
 8013ee4:	3501      	adds	r5, #1
 8013ee6:	4680      	mov	r8, r0
 8013ee8:	4689      	mov	r9, r1
 8013eea:	107f      	asrs	r7, r7, #1
 8013eec:	3608      	adds	r6, #8
 8013eee:	e7e5      	b.n	8013ebc <_dtoa_r+0x36c>
 8013ef0:	f000 809b 	beq.w	801402a <_dtoa_r+0x4da>
 8013ef4:	9b00      	ldr	r3, [sp, #0]
 8013ef6:	4f9d      	ldr	r7, [pc, #628]	; (801416c <_dtoa_r+0x61c>)
 8013ef8:	425e      	negs	r6, r3
 8013efa:	4b9b      	ldr	r3, [pc, #620]	; (8014168 <_dtoa_r+0x618>)
 8013efc:	f006 020f 	and.w	r2, r6, #15
 8013f00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f08:	ec51 0b19 	vmov	r0, r1, d9
 8013f0c:	f7ec fb74 	bl	80005f8 <__aeabi_dmul>
 8013f10:	1136      	asrs	r6, r6, #4
 8013f12:	4682      	mov	sl, r0
 8013f14:	468b      	mov	fp, r1
 8013f16:	2300      	movs	r3, #0
 8013f18:	2502      	movs	r5, #2
 8013f1a:	2e00      	cmp	r6, #0
 8013f1c:	d17a      	bne.n	8014014 <_dtoa_r+0x4c4>
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d1d3      	bne.n	8013eca <_dtoa_r+0x37a>
 8013f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	f000 8082 	beq.w	801402e <_dtoa_r+0x4de>
 8013f2a:	4b91      	ldr	r3, [pc, #580]	; (8014170 <_dtoa_r+0x620>)
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	4650      	mov	r0, sl
 8013f30:	4659      	mov	r1, fp
 8013f32:	f7ec fdd3 	bl	8000adc <__aeabi_dcmplt>
 8013f36:	2800      	cmp	r0, #0
 8013f38:	d079      	beq.n	801402e <_dtoa_r+0x4de>
 8013f3a:	9b03      	ldr	r3, [sp, #12]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d076      	beq.n	801402e <_dtoa_r+0x4de>
 8013f40:	9b02      	ldr	r3, [sp, #8]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	dd36      	ble.n	8013fb4 <_dtoa_r+0x464>
 8013f46:	9b00      	ldr	r3, [sp, #0]
 8013f48:	4650      	mov	r0, sl
 8013f4a:	4659      	mov	r1, fp
 8013f4c:	1e5f      	subs	r7, r3, #1
 8013f4e:	2200      	movs	r2, #0
 8013f50:	4b88      	ldr	r3, [pc, #544]	; (8014174 <_dtoa_r+0x624>)
 8013f52:	f7ec fb51 	bl	80005f8 <__aeabi_dmul>
 8013f56:	9e02      	ldr	r6, [sp, #8]
 8013f58:	4682      	mov	sl, r0
 8013f5a:	468b      	mov	fp, r1
 8013f5c:	3501      	adds	r5, #1
 8013f5e:	4628      	mov	r0, r5
 8013f60:	f7ec fae0 	bl	8000524 <__aeabi_i2d>
 8013f64:	4652      	mov	r2, sl
 8013f66:	465b      	mov	r3, fp
 8013f68:	f7ec fb46 	bl	80005f8 <__aeabi_dmul>
 8013f6c:	4b82      	ldr	r3, [pc, #520]	; (8014178 <_dtoa_r+0x628>)
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f7ec f98c 	bl	800028c <__adddf3>
 8013f74:	46d0      	mov	r8, sl
 8013f76:	46d9      	mov	r9, fp
 8013f78:	4682      	mov	sl, r0
 8013f7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8013f7e:	2e00      	cmp	r6, #0
 8013f80:	d158      	bne.n	8014034 <_dtoa_r+0x4e4>
 8013f82:	4b7e      	ldr	r3, [pc, #504]	; (801417c <_dtoa_r+0x62c>)
 8013f84:	2200      	movs	r2, #0
 8013f86:	4640      	mov	r0, r8
 8013f88:	4649      	mov	r1, r9
 8013f8a:	f7ec f97d 	bl	8000288 <__aeabi_dsub>
 8013f8e:	4652      	mov	r2, sl
 8013f90:	465b      	mov	r3, fp
 8013f92:	4680      	mov	r8, r0
 8013f94:	4689      	mov	r9, r1
 8013f96:	f7ec fdbf 	bl	8000b18 <__aeabi_dcmpgt>
 8013f9a:	2800      	cmp	r0, #0
 8013f9c:	f040 8295 	bne.w	80144ca <_dtoa_r+0x97a>
 8013fa0:	4652      	mov	r2, sl
 8013fa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013fa6:	4640      	mov	r0, r8
 8013fa8:	4649      	mov	r1, r9
 8013faa:	f7ec fd97 	bl	8000adc <__aeabi_dcmplt>
 8013fae:	2800      	cmp	r0, #0
 8013fb0:	f040 8289 	bne.w	80144c6 <_dtoa_r+0x976>
 8013fb4:	ec5b ab19 	vmov	sl, fp, d9
 8013fb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	f2c0 8148 	blt.w	8014250 <_dtoa_r+0x700>
 8013fc0:	9a00      	ldr	r2, [sp, #0]
 8013fc2:	2a0e      	cmp	r2, #14
 8013fc4:	f300 8144 	bgt.w	8014250 <_dtoa_r+0x700>
 8013fc8:	4b67      	ldr	r3, [pc, #412]	; (8014168 <_dtoa_r+0x618>)
 8013fca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013fce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	f280 80d5 	bge.w	8014184 <_dtoa_r+0x634>
 8013fda:	9b03      	ldr	r3, [sp, #12]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	f300 80d1 	bgt.w	8014184 <_dtoa_r+0x634>
 8013fe2:	f040 826f 	bne.w	80144c4 <_dtoa_r+0x974>
 8013fe6:	4b65      	ldr	r3, [pc, #404]	; (801417c <_dtoa_r+0x62c>)
 8013fe8:	2200      	movs	r2, #0
 8013fea:	4640      	mov	r0, r8
 8013fec:	4649      	mov	r1, r9
 8013fee:	f7ec fb03 	bl	80005f8 <__aeabi_dmul>
 8013ff2:	4652      	mov	r2, sl
 8013ff4:	465b      	mov	r3, fp
 8013ff6:	f7ec fd85 	bl	8000b04 <__aeabi_dcmpge>
 8013ffa:	9e03      	ldr	r6, [sp, #12]
 8013ffc:	4637      	mov	r7, r6
 8013ffe:	2800      	cmp	r0, #0
 8014000:	f040 8245 	bne.w	801448e <_dtoa_r+0x93e>
 8014004:	9d01      	ldr	r5, [sp, #4]
 8014006:	2331      	movs	r3, #49	; 0x31
 8014008:	f805 3b01 	strb.w	r3, [r5], #1
 801400c:	9b00      	ldr	r3, [sp, #0]
 801400e:	3301      	adds	r3, #1
 8014010:	9300      	str	r3, [sp, #0]
 8014012:	e240      	b.n	8014496 <_dtoa_r+0x946>
 8014014:	07f2      	lsls	r2, r6, #31
 8014016:	d505      	bpl.n	8014024 <_dtoa_r+0x4d4>
 8014018:	e9d7 2300 	ldrd	r2, r3, [r7]
 801401c:	f7ec faec 	bl	80005f8 <__aeabi_dmul>
 8014020:	3501      	adds	r5, #1
 8014022:	2301      	movs	r3, #1
 8014024:	1076      	asrs	r6, r6, #1
 8014026:	3708      	adds	r7, #8
 8014028:	e777      	b.n	8013f1a <_dtoa_r+0x3ca>
 801402a:	2502      	movs	r5, #2
 801402c:	e779      	b.n	8013f22 <_dtoa_r+0x3d2>
 801402e:	9f00      	ldr	r7, [sp, #0]
 8014030:	9e03      	ldr	r6, [sp, #12]
 8014032:	e794      	b.n	8013f5e <_dtoa_r+0x40e>
 8014034:	9901      	ldr	r1, [sp, #4]
 8014036:	4b4c      	ldr	r3, [pc, #304]	; (8014168 <_dtoa_r+0x618>)
 8014038:	4431      	add	r1, r6
 801403a:	910d      	str	r1, [sp, #52]	; 0x34
 801403c:	9908      	ldr	r1, [sp, #32]
 801403e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014042:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014046:	2900      	cmp	r1, #0
 8014048:	d043      	beq.n	80140d2 <_dtoa_r+0x582>
 801404a:	494d      	ldr	r1, [pc, #308]	; (8014180 <_dtoa_r+0x630>)
 801404c:	2000      	movs	r0, #0
 801404e:	f7ec fbfd 	bl	800084c <__aeabi_ddiv>
 8014052:	4652      	mov	r2, sl
 8014054:	465b      	mov	r3, fp
 8014056:	f7ec f917 	bl	8000288 <__aeabi_dsub>
 801405a:	9d01      	ldr	r5, [sp, #4]
 801405c:	4682      	mov	sl, r0
 801405e:	468b      	mov	fp, r1
 8014060:	4649      	mov	r1, r9
 8014062:	4640      	mov	r0, r8
 8014064:	f7ec fd78 	bl	8000b58 <__aeabi_d2iz>
 8014068:	4606      	mov	r6, r0
 801406a:	f7ec fa5b 	bl	8000524 <__aeabi_i2d>
 801406e:	4602      	mov	r2, r0
 8014070:	460b      	mov	r3, r1
 8014072:	4640      	mov	r0, r8
 8014074:	4649      	mov	r1, r9
 8014076:	f7ec f907 	bl	8000288 <__aeabi_dsub>
 801407a:	3630      	adds	r6, #48	; 0x30
 801407c:	f805 6b01 	strb.w	r6, [r5], #1
 8014080:	4652      	mov	r2, sl
 8014082:	465b      	mov	r3, fp
 8014084:	4680      	mov	r8, r0
 8014086:	4689      	mov	r9, r1
 8014088:	f7ec fd28 	bl	8000adc <__aeabi_dcmplt>
 801408c:	2800      	cmp	r0, #0
 801408e:	d163      	bne.n	8014158 <_dtoa_r+0x608>
 8014090:	4642      	mov	r2, r8
 8014092:	464b      	mov	r3, r9
 8014094:	4936      	ldr	r1, [pc, #216]	; (8014170 <_dtoa_r+0x620>)
 8014096:	2000      	movs	r0, #0
 8014098:	f7ec f8f6 	bl	8000288 <__aeabi_dsub>
 801409c:	4652      	mov	r2, sl
 801409e:	465b      	mov	r3, fp
 80140a0:	f7ec fd1c 	bl	8000adc <__aeabi_dcmplt>
 80140a4:	2800      	cmp	r0, #0
 80140a6:	f040 80b5 	bne.w	8014214 <_dtoa_r+0x6c4>
 80140aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140ac:	429d      	cmp	r5, r3
 80140ae:	d081      	beq.n	8013fb4 <_dtoa_r+0x464>
 80140b0:	4b30      	ldr	r3, [pc, #192]	; (8014174 <_dtoa_r+0x624>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	4650      	mov	r0, sl
 80140b6:	4659      	mov	r1, fp
 80140b8:	f7ec fa9e 	bl	80005f8 <__aeabi_dmul>
 80140bc:	4b2d      	ldr	r3, [pc, #180]	; (8014174 <_dtoa_r+0x624>)
 80140be:	4682      	mov	sl, r0
 80140c0:	468b      	mov	fp, r1
 80140c2:	4640      	mov	r0, r8
 80140c4:	4649      	mov	r1, r9
 80140c6:	2200      	movs	r2, #0
 80140c8:	f7ec fa96 	bl	80005f8 <__aeabi_dmul>
 80140cc:	4680      	mov	r8, r0
 80140ce:	4689      	mov	r9, r1
 80140d0:	e7c6      	b.n	8014060 <_dtoa_r+0x510>
 80140d2:	4650      	mov	r0, sl
 80140d4:	4659      	mov	r1, fp
 80140d6:	f7ec fa8f 	bl	80005f8 <__aeabi_dmul>
 80140da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140dc:	9d01      	ldr	r5, [sp, #4]
 80140de:	930f      	str	r3, [sp, #60]	; 0x3c
 80140e0:	4682      	mov	sl, r0
 80140e2:	468b      	mov	fp, r1
 80140e4:	4649      	mov	r1, r9
 80140e6:	4640      	mov	r0, r8
 80140e8:	f7ec fd36 	bl	8000b58 <__aeabi_d2iz>
 80140ec:	4606      	mov	r6, r0
 80140ee:	f7ec fa19 	bl	8000524 <__aeabi_i2d>
 80140f2:	3630      	adds	r6, #48	; 0x30
 80140f4:	4602      	mov	r2, r0
 80140f6:	460b      	mov	r3, r1
 80140f8:	4640      	mov	r0, r8
 80140fa:	4649      	mov	r1, r9
 80140fc:	f7ec f8c4 	bl	8000288 <__aeabi_dsub>
 8014100:	f805 6b01 	strb.w	r6, [r5], #1
 8014104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014106:	429d      	cmp	r5, r3
 8014108:	4680      	mov	r8, r0
 801410a:	4689      	mov	r9, r1
 801410c:	f04f 0200 	mov.w	r2, #0
 8014110:	d124      	bne.n	801415c <_dtoa_r+0x60c>
 8014112:	4b1b      	ldr	r3, [pc, #108]	; (8014180 <_dtoa_r+0x630>)
 8014114:	4650      	mov	r0, sl
 8014116:	4659      	mov	r1, fp
 8014118:	f7ec f8b8 	bl	800028c <__adddf3>
 801411c:	4602      	mov	r2, r0
 801411e:	460b      	mov	r3, r1
 8014120:	4640      	mov	r0, r8
 8014122:	4649      	mov	r1, r9
 8014124:	f7ec fcf8 	bl	8000b18 <__aeabi_dcmpgt>
 8014128:	2800      	cmp	r0, #0
 801412a:	d173      	bne.n	8014214 <_dtoa_r+0x6c4>
 801412c:	4652      	mov	r2, sl
 801412e:	465b      	mov	r3, fp
 8014130:	4913      	ldr	r1, [pc, #76]	; (8014180 <_dtoa_r+0x630>)
 8014132:	2000      	movs	r0, #0
 8014134:	f7ec f8a8 	bl	8000288 <__aeabi_dsub>
 8014138:	4602      	mov	r2, r0
 801413a:	460b      	mov	r3, r1
 801413c:	4640      	mov	r0, r8
 801413e:	4649      	mov	r1, r9
 8014140:	f7ec fccc 	bl	8000adc <__aeabi_dcmplt>
 8014144:	2800      	cmp	r0, #0
 8014146:	f43f af35 	beq.w	8013fb4 <_dtoa_r+0x464>
 801414a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801414c:	1e6b      	subs	r3, r5, #1
 801414e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014150:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014154:	2b30      	cmp	r3, #48	; 0x30
 8014156:	d0f8      	beq.n	801414a <_dtoa_r+0x5fa>
 8014158:	9700      	str	r7, [sp, #0]
 801415a:	e049      	b.n	80141f0 <_dtoa_r+0x6a0>
 801415c:	4b05      	ldr	r3, [pc, #20]	; (8014174 <_dtoa_r+0x624>)
 801415e:	f7ec fa4b 	bl	80005f8 <__aeabi_dmul>
 8014162:	4680      	mov	r8, r0
 8014164:	4689      	mov	r9, r1
 8014166:	e7bd      	b.n	80140e4 <_dtoa_r+0x594>
 8014168:	08017228 	.word	0x08017228
 801416c:	08017200 	.word	0x08017200
 8014170:	3ff00000 	.word	0x3ff00000
 8014174:	40240000 	.word	0x40240000
 8014178:	401c0000 	.word	0x401c0000
 801417c:	40140000 	.word	0x40140000
 8014180:	3fe00000 	.word	0x3fe00000
 8014184:	9d01      	ldr	r5, [sp, #4]
 8014186:	4656      	mov	r6, sl
 8014188:	465f      	mov	r7, fp
 801418a:	4642      	mov	r2, r8
 801418c:	464b      	mov	r3, r9
 801418e:	4630      	mov	r0, r6
 8014190:	4639      	mov	r1, r7
 8014192:	f7ec fb5b 	bl	800084c <__aeabi_ddiv>
 8014196:	f7ec fcdf 	bl	8000b58 <__aeabi_d2iz>
 801419a:	4682      	mov	sl, r0
 801419c:	f7ec f9c2 	bl	8000524 <__aeabi_i2d>
 80141a0:	4642      	mov	r2, r8
 80141a2:	464b      	mov	r3, r9
 80141a4:	f7ec fa28 	bl	80005f8 <__aeabi_dmul>
 80141a8:	4602      	mov	r2, r0
 80141aa:	460b      	mov	r3, r1
 80141ac:	4630      	mov	r0, r6
 80141ae:	4639      	mov	r1, r7
 80141b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80141b4:	f7ec f868 	bl	8000288 <__aeabi_dsub>
 80141b8:	f805 6b01 	strb.w	r6, [r5], #1
 80141bc:	9e01      	ldr	r6, [sp, #4]
 80141be:	9f03      	ldr	r7, [sp, #12]
 80141c0:	1bae      	subs	r6, r5, r6
 80141c2:	42b7      	cmp	r7, r6
 80141c4:	4602      	mov	r2, r0
 80141c6:	460b      	mov	r3, r1
 80141c8:	d135      	bne.n	8014236 <_dtoa_r+0x6e6>
 80141ca:	f7ec f85f 	bl	800028c <__adddf3>
 80141ce:	4642      	mov	r2, r8
 80141d0:	464b      	mov	r3, r9
 80141d2:	4606      	mov	r6, r0
 80141d4:	460f      	mov	r7, r1
 80141d6:	f7ec fc9f 	bl	8000b18 <__aeabi_dcmpgt>
 80141da:	b9d0      	cbnz	r0, 8014212 <_dtoa_r+0x6c2>
 80141dc:	4642      	mov	r2, r8
 80141de:	464b      	mov	r3, r9
 80141e0:	4630      	mov	r0, r6
 80141e2:	4639      	mov	r1, r7
 80141e4:	f7ec fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 80141e8:	b110      	cbz	r0, 80141f0 <_dtoa_r+0x6a0>
 80141ea:	f01a 0f01 	tst.w	sl, #1
 80141ee:	d110      	bne.n	8014212 <_dtoa_r+0x6c2>
 80141f0:	4620      	mov	r0, r4
 80141f2:	ee18 1a10 	vmov	r1, s16
 80141f6:	f000 fee3 	bl	8014fc0 <_Bfree>
 80141fa:	2300      	movs	r3, #0
 80141fc:	9800      	ldr	r0, [sp, #0]
 80141fe:	702b      	strb	r3, [r5, #0]
 8014200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014202:	3001      	adds	r0, #1
 8014204:	6018      	str	r0, [r3, #0]
 8014206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014208:	2b00      	cmp	r3, #0
 801420a:	f43f acf1 	beq.w	8013bf0 <_dtoa_r+0xa0>
 801420e:	601d      	str	r5, [r3, #0]
 8014210:	e4ee      	b.n	8013bf0 <_dtoa_r+0xa0>
 8014212:	9f00      	ldr	r7, [sp, #0]
 8014214:	462b      	mov	r3, r5
 8014216:	461d      	mov	r5, r3
 8014218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801421c:	2a39      	cmp	r2, #57	; 0x39
 801421e:	d106      	bne.n	801422e <_dtoa_r+0x6de>
 8014220:	9a01      	ldr	r2, [sp, #4]
 8014222:	429a      	cmp	r2, r3
 8014224:	d1f7      	bne.n	8014216 <_dtoa_r+0x6c6>
 8014226:	9901      	ldr	r1, [sp, #4]
 8014228:	2230      	movs	r2, #48	; 0x30
 801422a:	3701      	adds	r7, #1
 801422c:	700a      	strb	r2, [r1, #0]
 801422e:	781a      	ldrb	r2, [r3, #0]
 8014230:	3201      	adds	r2, #1
 8014232:	701a      	strb	r2, [r3, #0]
 8014234:	e790      	b.n	8014158 <_dtoa_r+0x608>
 8014236:	4ba6      	ldr	r3, [pc, #664]	; (80144d0 <_dtoa_r+0x980>)
 8014238:	2200      	movs	r2, #0
 801423a:	f7ec f9dd 	bl	80005f8 <__aeabi_dmul>
 801423e:	2200      	movs	r2, #0
 8014240:	2300      	movs	r3, #0
 8014242:	4606      	mov	r6, r0
 8014244:	460f      	mov	r7, r1
 8014246:	f7ec fc3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801424a:	2800      	cmp	r0, #0
 801424c:	d09d      	beq.n	801418a <_dtoa_r+0x63a>
 801424e:	e7cf      	b.n	80141f0 <_dtoa_r+0x6a0>
 8014250:	9a08      	ldr	r2, [sp, #32]
 8014252:	2a00      	cmp	r2, #0
 8014254:	f000 80d7 	beq.w	8014406 <_dtoa_r+0x8b6>
 8014258:	9a06      	ldr	r2, [sp, #24]
 801425a:	2a01      	cmp	r2, #1
 801425c:	f300 80ba 	bgt.w	80143d4 <_dtoa_r+0x884>
 8014260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014262:	2a00      	cmp	r2, #0
 8014264:	f000 80b2 	beq.w	80143cc <_dtoa_r+0x87c>
 8014268:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801426c:	9e07      	ldr	r6, [sp, #28]
 801426e:	9d04      	ldr	r5, [sp, #16]
 8014270:	9a04      	ldr	r2, [sp, #16]
 8014272:	441a      	add	r2, r3
 8014274:	9204      	str	r2, [sp, #16]
 8014276:	9a05      	ldr	r2, [sp, #20]
 8014278:	2101      	movs	r1, #1
 801427a:	441a      	add	r2, r3
 801427c:	4620      	mov	r0, r4
 801427e:	9205      	str	r2, [sp, #20]
 8014280:	f000 ffa0 	bl	80151c4 <__i2b>
 8014284:	4607      	mov	r7, r0
 8014286:	2d00      	cmp	r5, #0
 8014288:	dd0c      	ble.n	80142a4 <_dtoa_r+0x754>
 801428a:	9b05      	ldr	r3, [sp, #20]
 801428c:	2b00      	cmp	r3, #0
 801428e:	dd09      	ble.n	80142a4 <_dtoa_r+0x754>
 8014290:	42ab      	cmp	r3, r5
 8014292:	9a04      	ldr	r2, [sp, #16]
 8014294:	bfa8      	it	ge
 8014296:	462b      	movge	r3, r5
 8014298:	1ad2      	subs	r2, r2, r3
 801429a:	9204      	str	r2, [sp, #16]
 801429c:	9a05      	ldr	r2, [sp, #20]
 801429e:	1aed      	subs	r5, r5, r3
 80142a0:	1ad3      	subs	r3, r2, r3
 80142a2:	9305      	str	r3, [sp, #20]
 80142a4:	9b07      	ldr	r3, [sp, #28]
 80142a6:	b31b      	cbz	r3, 80142f0 <_dtoa_r+0x7a0>
 80142a8:	9b08      	ldr	r3, [sp, #32]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	f000 80af 	beq.w	801440e <_dtoa_r+0x8be>
 80142b0:	2e00      	cmp	r6, #0
 80142b2:	dd13      	ble.n	80142dc <_dtoa_r+0x78c>
 80142b4:	4639      	mov	r1, r7
 80142b6:	4632      	mov	r2, r6
 80142b8:	4620      	mov	r0, r4
 80142ba:	f001 f843 	bl	8015344 <__pow5mult>
 80142be:	ee18 2a10 	vmov	r2, s16
 80142c2:	4601      	mov	r1, r0
 80142c4:	4607      	mov	r7, r0
 80142c6:	4620      	mov	r0, r4
 80142c8:	f000 ff92 	bl	80151f0 <__multiply>
 80142cc:	ee18 1a10 	vmov	r1, s16
 80142d0:	4680      	mov	r8, r0
 80142d2:	4620      	mov	r0, r4
 80142d4:	f000 fe74 	bl	8014fc0 <_Bfree>
 80142d8:	ee08 8a10 	vmov	s16, r8
 80142dc:	9b07      	ldr	r3, [sp, #28]
 80142de:	1b9a      	subs	r2, r3, r6
 80142e0:	d006      	beq.n	80142f0 <_dtoa_r+0x7a0>
 80142e2:	ee18 1a10 	vmov	r1, s16
 80142e6:	4620      	mov	r0, r4
 80142e8:	f001 f82c 	bl	8015344 <__pow5mult>
 80142ec:	ee08 0a10 	vmov	s16, r0
 80142f0:	2101      	movs	r1, #1
 80142f2:	4620      	mov	r0, r4
 80142f4:	f000 ff66 	bl	80151c4 <__i2b>
 80142f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	4606      	mov	r6, r0
 80142fe:	f340 8088 	ble.w	8014412 <_dtoa_r+0x8c2>
 8014302:	461a      	mov	r2, r3
 8014304:	4601      	mov	r1, r0
 8014306:	4620      	mov	r0, r4
 8014308:	f001 f81c 	bl	8015344 <__pow5mult>
 801430c:	9b06      	ldr	r3, [sp, #24]
 801430e:	2b01      	cmp	r3, #1
 8014310:	4606      	mov	r6, r0
 8014312:	f340 8081 	ble.w	8014418 <_dtoa_r+0x8c8>
 8014316:	f04f 0800 	mov.w	r8, #0
 801431a:	6933      	ldr	r3, [r6, #16]
 801431c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014320:	6918      	ldr	r0, [r3, #16]
 8014322:	f000 feff 	bl	8015124 <__hi0bits>
 8014326:	f1c0 0020 	rsb	r0, r0, #32
 801432a:	9b05      	ldr	r3, [sp, #20]
 801432c:	4418      	add	r0, r3
 801432e:	f010 001f 	ands.w	r0, r0, #31
 8014332:	f000 8092 	beq.w	801445a <_dtoa_r+0x90a>
 8014336:	f1c0 0320 	rsb	r3, r0, #32
 801433a:	2b04      	cmp	r3, #4
 801433c:	f340 808a 	ble.w	8014454 <_dtoa_r+0x904>
 8014340:	f1c0 001c 	rsb	r0, r0, #28
 8014344:	9b04      	ldr	r3, [sp, #16]
 8014346:	4403      	add	r3, r0
 8014348:	9304      	str	r3, [sp, #16]
 801434a:	9b05      	ldr	r3, [sp, #20]
 801434c:	4403      	add	r3, r0
 801434e:	4405      	add	r5, r0
 8014350:	9305      	str	r3, [sp, #20]
 8014352:	9b04      	ldr	r3, [sp, #16]
 8014354:	2b00      	cmp	r3, #0
 8014356:	dd07      	ble.n	8014368 <_dtoa_r+0x818>
 8014358:	ee18 1a10 	vmov	r1, s16
 801435c:	461a      	mov	r2, r3
 801435e:	4620      	mov	r0, r4
 8014360:	f001 f84a 	bl	80153f8 <__lshift>
 8014364:	ee08 0a10 	vmov	s16, r0
 8014368:	9b05      	ldr	r3, [sp, #20]
 801436a:	2b00      	cmp	r3, #0
 801436c:	dd05      	ble.n	801437a <_dtoa_r+0x82a>
 801436e:	4631      	mov	r1, r6
 8014370:	461a      	mov	r2, r3
 8014372:	4620      	mov	r0, r4
 8014374:	f001 f840 	bl	80153f8 <__lshift>
 8014378:	4606      	mov	r6, r0
 801437a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801437c:	2b00      	cmp	r3, #0
 801437e:	d06e      	beq.n	801445e <_dtoa_r+0x90e>
 8014380:	ee18 0a10 	vmov	r0, s16
 8014384:	4631      	mov	r1, r6
 8014386:	f001 f8a7 	bl	80154d8 <__mcmp>
 801438a:	2800      	cmp	r0, #0
 801438c:	da67      	bge.n	801445e <_dtoa_r+0x90e>
 801438e:	9b00      	ldr	r3, [sp, #0]
 8014390:	3b01      	subs	r3, #1
 8014392:	ee18 1a10 	vmov	r1, s16
 8014396:	9300      	str	r3, [sp, #0]
 8014398:	220a      	movs	r2, #10
 801439a:	2300      	movs	r3, #0
 801439c:	4620      	mov	r0, r4
 801439e:	f000 fe31 	bl	8015004 <__multadd>
 80143a2:	9b08      	ldr	r3, [sp, #32]
 80143a4:	ee08 0a10 	vmov	s16, r0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	f000 81b1 	beq.w	8014710 <_dtoa_r+0xbc0>
 80143ae:	2300      	movs	r3, #0
 80143b0:	4639      	mov	r1, r7
 80143b2:	220a      	movs	r2, #10
 80143b4:	4620      	mov	r0, r4
 80143b6:	f000 fe25 	bl	8015004 <__multadd>
 80143ba:	9b02      	ldr	r3, [sp, #8]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	4607      	mov	r7, r0
 80143c0:	f300 808e 	bgt.w	80144e0 <_dtoa_r+0x990>
 80143c4:	9b06      	ldr	r3, [sp, #24]
 80143c6:	2b02      	cmp	r3, #2
 80143c8:	dc51      	bgt.n	801446e <_dtoa_r+0x91e>
 80143ca:	e089      	b.n	80144e0 <_dtoa_r+0x990>
 80143cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80143ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80143d2:	e74b      	b.n	801426c <_dtoa_r+0x71c>
 80143d4:	9b03      	ldr	r3, [sp, #12]
 80143d6:	1e5e      	subs	r6, r3, #1
 80143d8:	9b07      	ldr	r3, [sp, #28]
 80143da:	42b3      	cmp	r3, r6
 80143dc:	bfbf      	itttt	lt
 80143de:	9b07      	ldrlt	r3, [sp, #28]
 80143e0:	9607      	strlt	r6, [sp, #28]
 80143e2:	1af2      	sublt	r2, r6, r3
 80143e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80143e6:	bfb6      	itet	lt
 80143e8:	189b      	addlt	r3, r3, r2
 80143ea:	1b9e      	subge	r6, r3, r6
 80143ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80143ee:	9b03      	ldr	r3, [sp, #12]
 80143f0:	bfb8      	it	lt
 80143f2:	2600      	movlt	r6, #0
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	bfb7      	itett	lt
 80143f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80143fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014400:	1a9d      	sublt	r5, r3, r2
 8014402:	2300      	movlt	r3, #0
 8014404:	e734      	b.n	8014270 <_dtoa_r+0x720>
 8014406:	9e07      	ldr	r6, [sp, #28]
 8014408:	9d04      	ldr	r5, [sp, #16]
 801440a:	9f08      	ldr	r7, [sp, #32]
 801440c:	e73b      	b.n	8014286 <_dtoa_r+0x736>
 801440e:	9a07      	ldr	r2, [sp, #28]
 8014410:	e767      	b.n	80142e2 <_dtoa_r+0x792>
 8014412:	9b06      	ldr	r3, [sp, #24]
 8014414:	2b01      	cmp	r3, #1
 8014416:	dc18      	bgt.n	801444a <_dtoa_r+0x8fa>
 8014418:	f1ba 0f00 	cmp.w	sl, #0
 801441c:	d115      	bne.n	801444a <_dtoa_r+0x8fa>
 801441e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014422:	b993      	cbnz	r3, 801444a <_dtoa_r+0x8fa>
 8014424:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014428:	0d1b      	lsrs	r3, r3, #20
 801442a:	051b      	lsls	r3, r3, #20
 801442c:	b183      	cbz	r3, 8014450 <_dtoa_r+0x900>
 801442e:	9b04      	ldr	r3, [sp, #16]
 8014430:	3301      	adds	r3, #1
 8014432:	9304      	str	r3, [sp, #16]
 8014434:	9b05      	ldr	r3, [sp, #20]
 8014436:	3301      	adds	r3, #1
 8014438:	9305      	str	r3, [sp, #20]
 801443a:	f04f 0801 	mov.w	r8, #1
 801443e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014440:	2b00      	cmp	r3, #0
 8014442:	f47f af6a 	bne.w	801431a <_dtoa_r+0x7ca>
 8014446:	2001      	movs	r0, #1
 8014448:	e76f      	b.n	801432a <_dtoa_r+0x7da>
 801444a:	f04f 0800 	mov.w	r8, #0
 801444e:	e7f6      	b.n	801443e <_dtoa_r+0x8ee>
 8014450:	4698      	mov	r8, r3
 8014452:	e7f4      	b.n	801443e <_dtoa_r+0x8ee>
 8014454:	f43f af7d 	beq.w	8014352 <_dtoa_r+0x802>
 8014458:	4618      	mov	r0, r3
 801445a:	301c      	adds	r0, #28
 801445c:	e772      	b.n	8014344 <_dtoa_r+0x7f4>
 801445e:	9b03      	ldr	r3, [sp, #12]
 8014460:	2b00      	cmp	r3, #0
 8014462:	dc37      	bgt.n	80144d4 <_dtoa_r+0x984>
 8014464:	9b06      	ldr	r3, [sp, #24]
 8014466:	2b02      	cmp	r3, #2
 8014468:	dd34      	ble.n	80144d4 <_dtoa_r+0x984>
 801446a:	9b03      	ldr	r3, [sp, #12]
 801446c:	9302      	str	r3, [sp, #8]
 801446e:	9b02      	ldr	r3, [sp, #8]
 8014470:	b96b      	cbnz	r3, 801448e <_dtoa_r+0x93e>
 8014472:	4631      	mov	r1, r6
 8014474:	2205      	movs	r2, #5
 8014476:	4620      	mov	r0, r4
 8014478:	f000 fdc4 	bl	8015004 <__multadd>
 801447c:	4601      	mov	r1, r0
 801447e:	4606      	mov	r6, r0
 8014480:	ee18 0a10 	vmov	r0, s16
 8014484:	f001 f828 	bl	80154d8 <__mcmp>
 8014488:	2800      	cmp	r0, #0
 801448a:	f73f adbb 	bgt.w	8014004 <_dtoa_r+0x4b4>
 801448e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014490:	9d01      	ldr	r5, [sp, #4]
 8014492:	43db      	mvns	r3, r3
 8014494:	9300      	str	r3, [sp, #0]
 8014496:	f04f 0800 	mov.w	r8, #0
 801449a:	4631      	mov	r1, r6
 801449c:	4620      	mov	r0, r4
 801449e:	f000 fd8f 	bl	8014fc0 <_Bfree>
 80144a2:	2f00      	cmp	r7, #0
 80144a4:	f43f aea4 	beq.w	80141f0 <_dtoa_r+0x6a0>
 80144a8:	f1b8 0f00 	cmp.w	r8, #0
 80144ac:	d005      	beq.n	80144ba <_dtoa_r+0x96a>
 80144ae:	45b8      	cmp	r8, r7
 80144b0:	d003      	beq.n	80144ba <_dtoa_r+0x96a>
 80144b2:	4641      	mov	r1, r8
 80144b4:	4620      	mov	r0, r4
 80144b6:	f000 fd83 	bl	8014fc0 <_Bfree>
 80144ba:	4639      	mov	r1, r7
 80144bc:	4620      	mov	r0, r4
 80144be:	f000 fd7f 	bl	8014fc0 <_Bfree>
 80144c2:	e695      	b.n	80141f0 <_dtoa_r+0x6a0>
 80144c4:	2600      	movs	r6, #0
 80144c6:	4637      	mov	r7, r6
 80144c8:	e7e1      	b.n	801448e <_dtoa_r+0x93e>
 80144ca:	9700      	str	r7, [sp, #0]
 80144cc:	4637      	mov	r7, r6
 80144ce:	e599      	b.n	8014004 <_dtoa_r+0x4b4>
 80144d0:	40240000 	.word	0x40240000
 80144d4:	9b08      	ldr	r3, [sp, #32]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	f000 80ca 	beq.w	8014670 <_dtoa_r+0xb20>
 80144dc:	9b03      	ldr	r3, [sp, #12]
 80144de:	9302      	str	r3, [sp, #8]
 80144e0:	2d00      	cmp	r5, #0
 80144e2:	dd05      	ble.n	80144f0 <_dtoa_r+0x9a0>
 80144e4:	4639      	mov	r1, r7
 80144e6:	462a      	mov	r2, r5
 80144e8:	4620      	mov	r0, r4
 80144ea:	f000 ff85 	bl	80153f8 <__lshift>
 80144ee:	4607      	mov	r7, r0
 80144f0:	f1b8 0f00 	cmp.w	r8, #0
 80144f4:	d05b      	beq.n	80145ae <_dtoa_r+0xa5e>
 80144f6:	6879      	ldr	r1, [r7, #4]
 80144f8:	4620      	mov	r0, r4
 80144fa:	f000 fd21 	bl	8014f40 <_Balloc>
 80144fe:	4605      	mov	r5, r0
 8014500:	b928      	cbnz	r0, 801450e <_dtoa_r+0x9be>
 8014502:	4b87      	ldr	r3, [pc, #540]	; (8014720 <_dtoa_r+0xbd0>)
 8014504:	4602      	mov	r2, r0
 8014506:	f240 21ea 	movw	r1, #746	; 0x2ea
 801450a:	f7ff bb3b 	b.w	8013b84 <_dtoa_r+0x34>
 801450e:	693a      	ldr	r2, [r7, #16]
 8014510:	3202      	adds	r2, #2
 8014512:	0092      	lsls	r2, r2, #2
 8014514:	f107 010c 	add.w	r1, r7, #12
 8014518:	300c      	adds	r0, #12
 801451a:	f7fd fa1b 	bl	8011954 <memcpy>
 801451e:	2201      	movs	r2, #1
 8014520:	4629      	mov	r1, r5
 8014522:	4620      	mov	r0, r4
 8014524:	f000 ff68 	bl	80153f8 <__lshift>
 8014528:	9b01      	ldr	r3, [sp, #4]
 801452a:	f103 0901 	add.w	r9, r3, #1
 801452e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014532:	4413      	add	r3, r2
 8014534:	9305      	str	r3, [sp, #20]
 8014536:	f00a 0301 	and.w	r3, sl, #1
 801453a:	46b8      	mov	r8, r7
 801453c:	9304      	str	r3, [sp, #16]
 801453e:	4607      	mov	r7, r0
 8014540:	4631      	mov	r1, r6
 8014542:	ee18 0a10 	vmov	r0, s16
 8014546:	f7ff fa77 	bl	8013a38 <quorem>
 801454a:	4641      	mov	r1, r8
 801454c:	9002      	str	r0, [sp, #8]
 801454e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014552:	ee18 0a10 	vmov	r0, s16
 8014556:	f000 ffbf 	bl	80154d8 <__mcmp>
 801455a:	463a      	mov	r2, r7
 801455c:	9003      	str	r0, [sp, #12]
 801455e:	4631      	mov	r1, r6
 8014560:	4620      	mov	r0, r4
 8014562:	f000 ffd5 	bl	8015510 <__mdiff>
 8014566:	68c2      	ldr	r2, [r0, #12]
 8014568:	f109 3bff 	add.w	fp, r9, #4294967295
 801456c:	4605      	mov	r5, r0
 801456e:	bb02      	cbnz	r2, 80145b2 <_dtoa_r+0xa62>
 8014570:	4601      	mov	r1, r0
 8014572:	ee18 0a10 	vmov	r0, s16
 8014576:	f000 ffaf 	bl	80154d8 <__mcmp>
 801457a:	4602      	mov	r2, r0
 801457c:	4629      	mov	r1, r5
 801457e:	4620      	mov	r0, r4
 8014580:	9207      	str	r2, [sp, #28]
 8014582:	f000 fd1d 	bl	8014fc0 <_Bfree>
 8014586:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801458a:	ea43 0102 	orr.w	r1, r3, r2
 801458e:	9b04      	ldr	r3, [sp, #16]
 8014590:	430b      	orrs	r3, r1
 8014592:	464d      	mov	r5, r9
 8014594:	d10f      	bne.n	80145b6 <_dtoa_r+0xa66>
 8014596:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801459a:	d02a      	beq.n	80145f2 <_dtoa_r+0xaa2>
 801459c:	9b03      	ldr	r3, [sp, #12]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	dd02      	ble.n	80145a8 <_dtoa_r+0xa58>
 80145a2:	9b02      	ldr	r3, [sp, #8]
 80145a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80145a8:	f88b a000 	strb.w	sl, [fp]
 80145ac:	e775      	b.n	801449a <_dtoa_r+0x94a>
 80145ae:	4638      	mov	r0, r7
 80145b0:	e7ba      	b.n	8014528 <_dtoa_r+0x9d8>
 80145b2:	2201      	movs	r2, #1
 80145b4:	e7e2      	b.n	801457c <_dtoa_r+0xa2c>
 80145b6:	9b03      	ldr	r3, [sp, #12]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	db04      	blt.n	80145c6 <_dtoa_r+0xa76>
 80145bc:	9906      	ldr	r1, [sp, #24]
 80145be:	430b      	orrs	r3, r1
 80145c0:	9904      	ldr	r1, [sp, #16]
 80145c2:	430b      	orrs	r3, r1
 80145c4:	d122      	bne.n	801460c <_dtoa_r+0xabc>
 80145c6:	2a00      	cmp	r2, #0
 80145c8:	ddee      	ble.n	80145a8 <_dtoa_r+0xa58>
 80145ca:	ee18 1a10 	vmov	r1, s16
 80145ce:	2201      	movs	r2, #1
 80145d0:	4620      	mov	r0, r4
 80145d2:	f000 ff11 	bl	80153f8 <__lshift>
 80145d6:	4631      	mov	r1, r6
 80145d8:	ee08 0a10 	vmov	s16, r0
 80145dc:	f000 ff7c 	bl	80154d8 <__mcmp>
 80145e0:	2800      	cmp	r0, #0
 80145e2:	dc03      	bgt.n	80145ec <_dtoa_r+0xa9c>
 80145e4:	d1e0      	bne.n	80145a8 <_dtoa_r+0xa58>
 80145e6:	f01a 0f01 	tst.w	sl, #1
 80145ea:	d0dd      	beq.n	80145a8 <_dtoa_r+0xa58>
 80145ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80145f0:	d1d7      	bne.n	80145a2 <_dtoa_r+0xa52>
 80145f2:	2339      	movs	r3, #57	; 0x39
 80145f4:	f88b 3000 	strb.w	r3, [fp]
 80145f8:	462b      	mov	r3, r5
 80145fa:	461d      	mov	r5, r3
 80145fc:	3b01      	subs	r3, #1
 80145fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014602:	2a39      	cmp	r2, #57	; 0x39
 8014604:	d071      	beq.n	80146ea <_dtoa_r+0xb9a>
 8014606:	3201      	adds	r2, #1
 8014608:	701a      	strb	r2, [r3, #0]
 801460a:	e746      	b.n	801449a <_dtoa_r+0x94a>
 801460c:	2a00      	cmp	r2, #0
 801460e:	dd07      	ble.n	8014620 <_dtoa_r+0xad0>
 8014610:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014614:	d0ed      	beq.n	80145f2 <_dtoa_r+0xaa2>
 8014616:	f10a 0301 	add.w	r3, sl, #1
 801461a:	f88b 3000 	strb.w	r3, [fp]
 801461e:	e73c      	b.n	801449a <_dtoa_r+0x94a>
 8014620:	9b05      	ldr	r3, [sp, #20]
 8014622:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014626:	4599      	cmp	r9, r3
 8014628:	d047      	beq.n	80146ba <_dtoa_r+0xb6a>
 801462a:	ee18 1a10 	vmov	r1, s16
 801462e:	2300      	movs	r3, #0
 8014630:	220a      	movs	r2, #10
 8014632:	4620      	mov	r0, r4
 8014634:	f000 fce6 	bl	8015004 <__multadd>
 8014638:	45b8      	cmp	r8, r7
 801463a:	ee08 0a10 	vmov	s16, r0
 801463e:	f04f 0300 	mov.w	r3, #0
 8014642:	f04f 020a 	mov.w	r2, #10
 8014646:	4641      	mov	r1, r8
 8014648:	4620      	mov	r0, r4
 801464a:	d106      	bne.n	801465a <_dtoa_r+0xb0a>
 801464c:	f000 fcda 	bl	8015004 <__multadd>
 8014650:	4680      	mov	r8, r0
 8014652:	4607      	mov	r7, r0
 8014654:	f109 0901 	add.w	r9, r9, #1
 8014658:	e772      	b.n	8014540 <_dtoa_r+0x9f0>
 801465a:	f000 fcd3 	bl	8015004 <__multadd>
 801465e:	4639      	mov	r1, r7
 8014660:	4680      	mov	r8, r0
 8014662:	2300      	movs	r3, #0
 8014664:	220a      	movs	r2, #10
 8014666:	4620      	mov	r0, r4
 8014668:	f000 fccc 	bl	8015004 <__multadd>
 801466c:	4607      	mov	r7, r0
 801466e:	e7f1      	b.n	8014654 <_dtoa_r+0xb04>
 8014670:	9b03      	ldr	r3, [sp, #12]
 8014672:	9302      	str	r3, [sp, #8]
 8014674:	9d01      	ldr	r5, [sp, #4]
 8014676:	ee18 0a10 	vmov	r0, s16
 801467a:	4631      	mov	r1, r6
 801467c:	f7ff f9dc 	bl	8013a38 <quorem>
 8014680:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014684:	9b01      	ldr	r3, [sp, #4]
 8014686:	f805 ab01 	strb.w	sl, [r5], #1
 801468a:	1aea      	subs	r2, r5, r3
 801468c:	9b02      	ldr	r3, [sp, #8]
 801468e:	4293      	cmp	r3, r2
 8014690:	dd09      	ble.n	80146a6 <_dtoa_r+0xb56>
 8014692:	ee18 1a10 	vmov	r1, s16
 8014696:	2300      	movs	r3, #0
 8014698:	220a      	movs	r2, #10
 801469a:	4620      	mov	r0, r4
 801469c:	f000 fcb2 	bl	8015004 <__multadd>
 80146a0:	ee08 0a10 	vmov	s16, r0
 80146a4:	e7e7      	b.n	8014676 <_dtoa_r+0xb26>
 80146a6:	9b02      	ldr	r3, [sp, #8]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	bfc8      	it	gt
 80146ac:	461d      	movgt	r5, r3
 80146ae:	9b01      	ldr	r3, [sp, #4]
 80146b0:	bfd8      	it	le
 80146b2:	2501      	movle	r5, #1
 80146b4:	441d      	add	r5, r3
 80146b6:	f04f 0800 	mov.w	r8, #0
 80146ba:	ee18 1a10 	vmov	r1, s16
 80146be:	2201      	movs	r2, #1
 80146c0:	4620      	mov	r0, r4
 80146c2:	f000 fe99 	bl	80153f8 <__lshift>
 80146c6:	4631      	mov	r1, r6
 80146c8:	ee08 0a10 	vmov	s16, r0
 80146cc:	f000 ff04 	bl	80154d8 <__mcmp>
 80146d0:	2800      	cmp	r0, #0
 80146d2:	dc91      	bgt.n	80145f8 <_dtoa_r+0xaa8>
 80146d4:	d102      	bne.n	80146dc <_dtoa_r+0xb8c>
 80146d6:	f01a 0f01 	tst.w	sl, #1
 80146da:	d18d      	bne.n	80145f8 <_dtoa_r+0xaa8>
 80146dc:	462b      	mov	r3, r5
 80146de:	461d      	mov	r5, r3
 80146e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80146e4:	2a30      	cmp	r2, #48	; 0x30
 80146e6:	d0fa      	beq.n	80146de <_dtoa_r+0xb8e>
 80146e8:	e6d7      	b.n	801449a <_dtoa_r+0x94a>
 80146ea:	9a01      	ldr	r2, [sp, #4]
 80146ec:	429a      	cmp	r2, r3
 80146ee:	d184      	bne.n	80145fa <_dtoa_r+0xaaa>
 80146f0:	9b00      	ldr	r3, [sp, #0]
 80146f2:	3301      	adds	r3, #1
 80146f4:	9300      	str	r3, [sp, #0]
 80146f6:	2331      	movs	r3, #49	; 0x31
 80146f8:	7013      	strb	r3, [r2, #0]
 80146fa:	e6ce      	b.n	801449a <_dtoa_r+0x94a>
 80146fc:	4b09      	ldr	r3, [pc, #36]	; (8014724 <_dtoa_r+0xbd4>)
 80146fe:	f7ff ba95 	b.w	8013c2c <_dtoa_r+0xdc>
 8014702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014704:	2b00      	cmp	r3, #0
 8014706:	f47f aa6e 	bne.w	8013be6 <_dtoa_r+0x96>
 801470a:	4b07      	ldr	r3, [pc, #28]	; (8014728 <_dtoa_r+0xbd8>)
 801470c:	f7ff ba8e 	b.w	8013c2c <_dtoa_r+0xdc>
 8014710:	9b02      	ldr	r3, [sp, #8]
 8014712:	2b00      	cmp	r3, #0
 8014714:	dcae      	bgt.n	8014674 <_dtoa_r+0xb24>
 8014716:	9b06      	ldr	r3, [sp, #24]
 8014718:	2b02      	cmp	r3, #2
 801471a:	f73f aea8 	bgt.w	801446e <_dtoa_r+0x91e>
 801471e:	e7a9      	b.n	8014674 <_dtoa_r+0xb24>
 8014720:	08017118 	.word	0x08017118
 8014724:	08016f18 	.word	0x08016f18
 8014728:	08017099 	.word	0x08017099

0801472c <rshift>:
 801472c:	6903      	ldr	r3, [r0, #16]
 801472e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014732:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014736:	ea4f 1261 	mov.w	r2, r1, asr #5
 801473a:	f100 0414 	add.w	r4, r0, #20
 801473e:	dd45      	ble.n	80147cc <rshift+0xa0>
 8014740:	f011 011f 	ands.w	r1, r1, #31
 8014744:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014748:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801474c:	d10c      	bne.n	8014768 <rshift+0x3c>
 801474e:	f100 0710 	add.w	r7, r0, #16
 8014752:	4629      	mov	r1, r5
 8014754:	42b1      	cmp	r1, r6
 8014756:	d334      	bcc.n	80147c2 <rshift+0x96>
 8014758:	1a9b      	subs	r3, r3, r2
 801475a:	009b      	lsls	r3, r3, #2
 801475c:	1eea      	subs	r2, r5, #3
 801475e:	4296      	cmp	r6, r2
 8014760:	bf38      	it	cc
 8014762:	2300      	movcc	r3, #0
 8014764:	4423      	add	r3, r4
 8014766:	e015      	b.n	8014794 <rshift+0x68>
 8014768:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801476c:	f1c1 0820 	rsb	r8, r1, #32
 8014770:	40cf      	lsrs	r7, r1
 8014772:	f105 0e04 	add.w	lr, r5, #4
 8014776:	46a1      	mov	r9, r4
 8014778:	4576      	cmp	r6, lr
 801477a:	46f4      	mov	ip, lr
 801477c:	d815      	bhi.n	80147aa <rshift+0x7e>
 801477e:	1a9a      	subs	r2, r3, r2
 8014780:	0092      	lsls	r2, r2, #2
 8014782:	3a04      	subs	r2, #4
 8014784:	3501      	adds	r5, #1
 8014786:	42ae      	cmp	r6, r5
 8014788:	bf38      	it	cc
 801478a:	2200      	movcc	r2, #0
 801478c:	18a3      	adds	r3, r4, r2
 801478e:	50a7      	str	r7, [r4, r2]
 8014790:	b107      	cbz	r7, 8014794 <rshift+0x68>
 8014792:	3304      	adds	r3, #4
 8014794:	1b1a      	subs	r2, r3, r4
 8014796:	42a3      	cmp	r3, r4
 8014798:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801479c:	bf08      	it	eq
 801479e:	2300      	moveq	r3, #0
 80147a0:	6102      	str	r2, [r0, #16]
 80147a2:	bf08      	it	eq
 80147a4:	6143      	streq	r3, [r0, #20]
 80147a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147aa:	f8dc c000 	ldr.w	ip, [ip]
 80147ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80147b2:	ea4c 0707 	orr.w	r7, ip, r7
 80147b6:	f849 7b04 	str.w	r7, [r9], #4
 80147ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80147be:	40cf      	lsrs	r7, r1
 80147c0:	e7da      	b.n	8014778 <rshift+0x4c>
 80147c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80147c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80147ca:	e7c3      	b.n	8014754 <rshift+0x28>
 80147cc:	4623      	mov	r3, r4
 80147ce:	e7e1      	b.n	8014794 <rshift+0x68>

080147d0 <__hexdig_fun>:
 80147d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80147d4:	2b09      	cmp	r3, #9
 80147d6:	d802      	bhi.n	80147de <__hexdig_fun+0xe>
 80147d8:	3820      	subs	r0, #32
 80147da:	b2c0      	uxtb	r0, r0
 80147dc:	4770      	bx	lr
 80147de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80147e2:	2b05      	cmp	r3, #5
 80147e4:	d801      	bhi.n	80147ea <__hexdig_fun+0x1a>
 80147e6:	3847      	subs	r0, #71	; 0x47
 80147e8:	e7f7      	b.n	80147da <__hexdig_fun+0xa>
 80147ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80147ee:	2b05      	cmp	r3, #5
 80147f0:	d801      	bhi.n	80147f6 <__hexdig_fun+0x26>
 80147f2:	3827      	subs	r0, #39	; 0x27
 80147f4:	e7f1      	b.n	80147da <__hexdig_fun+0xa>
 80147f6:	2000      	movs	r0, #0
 80147f8:	4770      	bx	lr
	...

080147fc <__gethex>:
 80147fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014800:	ed2d 8b02 	vpush	{d8}
 8014804:	b089      	sub	sp, #36	; 0x24
 8014806:	ee08 0a10 	vmov	s16, r0
 801480a:	9304      	str	r3, [sp, #16]
 801480c:	4bb4      	ldr	r3, [pc, #720]	; (8014ae0 <__gethex+0x2e4>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	9301      	str	r3, [sp, #4]
 8014812:	4618      	mov	r0, r3
 8014814:	468b      	mov	fp, r1
 8014816:	4690      	mov	r8, r2
 8014818:	f7eb fcda 	bl	80001d0 <strlen>
 801481c:	9b01      	ldr	r3, [sp, #4]
 801481e:	f8db 2000 	ldr.w	r2, [fp]
 8014822:	4403      	add	r3, r0
 8014824:	4682      	mov	sl, r0
 8014826:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801482a:	9305      	str	r3, [sp, #20]
 801482c:	1c93      	adds	r3, r2, #2
 801482e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014832:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014836:	32fe      	adds	r2, #254	; 0xfe
 8014838:	18d1      	adds	r1, r2, r3
 801483a:	461f      	mov	r7, r3
 801483c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014840:	9100      	str	r1, [sp, #0]
 8014842:	2830      	cmp	r0, #48	; 0x30
 8014844:	d0f8      	beq.n	8014838 <__gethex+0x3c>
 8014846:	f7ff ffc3 	bl	80147d0 <__hexdig_fun>
 801484a:	4604      	mov	r4, r0
 801484c:	2800      	cmp	r0, #0
 801484e:	d13a      	bne.n	80148c6 <__gethex+0xca>
 8014850:	9901      	ldr	r1, [sp, #4]
 8014852:	4652      	mov	r2, sl
 8014854:	4638      	mov	r0, r7
 8014856:	f001 fb03 	bl	8015e60 <strncmp>
 801485a:	4605      	mov	r5, r0
 801485c:	2800      	cmp	r0, #0
 801485e:	d168      	bne.n	8014932 <__gethex+0x136>
 8014860:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014864:	eb07 060a 	add.w	r6, r7, sl
 8014868:	f7ff ffb2 	bl	80147d0 <__hexdig_fun>
 801486c:	2800      	cmp	r0, #0
 801486e:	d062      	beq.n	8014936 <__gethex+0x13a>
 8014870:	4633      	mov	r3, r6
 8014872:	7818      	ldrb	r0, [r3, #0]
 8014874:	2830      	cmp	r0, #48	; 0x30
 8014876:	461f      	mov	r7, r3
 8014878:	f103 0301 	add.w	r3, r3, #1
 801487c:	d0f9      	beq.n	8014872 <__gethex+0x76>
 801487e:	f7ff ffa7 	bl	80147d0 <__hexdig_fun>
 8014882:	2301      	movs	r3, #1
 8014884:	fab0 f480 	clz	r4, r0
 8014888:	0964      	lsrs	r4, r4, #5
 801488a:	4635      	mov	r5, r6
 801488c:	9300      	str	r3, [sp, #0]
 801488e:	463a      	mov	r2, r7
 8014890:	4616      	mov	r6, r2
 8014892:	3201      	adds	r2, #1
 8014894:	7830      	ldrb	r0, [r6, #0]
 8014896:	f7ff ff9b 	bl	80147d0 <__hexdig_fun>
 801489a:	2800      	cmp	r0, #0
 801489c:	d1f8      	bne.n	8014890 <__gethex+0x94>
 801489e:	9901      	ldr	r1, [sp, #4]
 80148a0:	4652      	mov	r2, sl
 80148a2:	4630      	mov	r0, r6
 80148a4:	f001 fadc 	bl	8015e60 <strncmp>
 80148a8:	b980      	cbnz	r0, 80148cc <__gethex+0xd0>
 80148aa:	b94d      	cbnz	r5, 80148c0 <__gethex+0xc4>
 80148ac:	eb06 050a 	add.w	r5, r6, sl
 80148b0:	462a      	mov	r2, r5
 80148b2:	4616      	mov	r6, r2
 80148b4:	3201      	adds	r2, #1
 80148b6:	7830      	ldrb	r0, [r6, #0]
 80148b8:	f7ff ff8a 	bl	80147d0 <__hexdig_fun>
 80148bc:	2800      	cmp	r0, #0
 80148be:	d1f8      	bne.n	80148b2 <__gethex+0xb6>
 80148c0:	1bad      	subs	r5, r5, r6
 80148c2:	00ad      	lsls	r5, r5, #2
 80148c4:	e004      	b.n	80148d0 <__gethex+0xd4>
 80148c6:	2400      	movs	r4, #0
 80148c8:	4625      	mov	r5, r4
 80148ca:	e7e0      	b.n	801488e <__gethex+0x92>
 80148cc:	2d00      	cmp	r5, #0
 80148ce:	d1f7      	bne.n	80148c0 <__gethex+0xc4>
 80148d0:	7833      	ldrb	r3, [r6, #0]
 80148d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80148d6:	2b50      	cmp	r3, #80	; 0x50
 80148d8:	d13b      	bne.n	8014952 <__gethex+0x156>
 80148da:	7873      	ldrb	r3, [r6, #1]
 80148dc:	2b2b      	cmp	r3, #43	; 0x2b
 80148de:	d02c      	beq.n	801493a <__gethex+0x13e>
 80148e0:	2b2d      	cmp	r3, #45	; 0x2d
 80148e2:	d02e      	beq.n	8014942 <__gethex+0x146>
 80148e4:	1c71      	adds	r1, r6, #1
 80148e6:	f04f 0900 	mov.w	r9, #0
 80148ea:	7808      	ldrb	r0, [r1, #0]
 80148ec:	f7ff ff70 	bl	80147d0 <__hexdig_fun>
 80148f0:	1e43      	subs	r3, r0, #1
 80148f2:	b2db      	uxtb	r3, r3
 80148f4:	2b18      	cmp	r3, #24
 80148f6:	d82c      	bhi.n	8014952 <__gethex+0x156>
 80148f8:	f1a0 0210 	sub.w	r2, r0, #16
 80148fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014900:	f7ff ff66 	bl	80147d0 <__hexdig_fun>
 8014904:	1e43      	subs	r3, r0, #1
 8014906:	b2db      	uxtb	r3, r3
 8014908:	2b18      	cmp	r3, #24
 801490a:	d91d      	bls.n	8014948 <__gethex+0x14c>
 801490c:	f1b9 0f00 	cmp.w	r9, #0
 8014910:	d000      	beq.n	8014914 <__gethex+0x118>
 8014912:	4252      	negs	r2, r2
 8014914:	4415      	add	r5, r2
 8014916:	f8cb 1000 	str.w	r1, [fp]
 801491a:	b1e4      	cbz	r4, 8014956 <__gethex+0x15a>
 801491c:	9b00      	ldr	r3, [sp, #0]
 801491e:	2b00      	cmp	r3, #0
 8014920:	bf14      	ite	ne
 8014922:	2700      	movne	r7, #0
 8014924:	2706      	moveq	r7, #6
 8014926:	4638      	mov	r0, r7
 8014928:	b009      	add	sp, #36	; 0x24
 801492a:	ecbd 8b02 	vpop	{d8}
 801492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014932:	463e      	mov	r6, r7
 8014934:	4625      	mov	r5, r4
 8014936:	2401      	movs	r4, #1
 8014938:	e7ca      	b.n	80148d0 <__gethex+0xd4>
 801493a:	f04f 0900 	mov.w	r9, #0
 801493e:	1cb1      	adds	r1, r6, #2
 8014940:	e7d3      	b.n	80148ea <__gethex+0xee>
 8014942:	f04f 0901 	mov.w	r9, #1
 8014946:	e7fa      	b.n	801493e <__gethex+0x142>
 8014948:	230a      	movs	r3, #10
 801494a:	fb03 0202 	mla	r2, r3, r2, r0
 801494e:	3a10      	subs	r2, #16
 8014950:	e7d4      	b.n	80148fc <__gethex+0x100>
 8014952:	4631      	mov	r1, r6
 8014954:	e7df      	b.n	8014916 <__gethex+0x11a>
 8014956:	1bf3      	subs	r3, r6, r7
 8014958:	3b01      	subs	r3, #1
 801495a:	4621      	mov	r1, r4
 801495c:	2b07      	cmp	r3, #7
 801495e:	dc0b      	bgt.n	8014978 <__gethex+0x17c>
 8014960:	ee18 0a10 	vmov	r0, s16
 8014964:	f000 faec 	bl	8014f40 <_Balloc>
 8014968:	4604      	mov	r4, r0
 801496a:	b940      	cbnz	r0, 801497e <__gethex+0x182>
 801496c:	4b5d      	ldr	r3, [pc, #372]	; (8014ae4 <__gethex+0x2e8>)
 801496e:	4602      	mov	r2, r0
 8014970:	21de      	movs	r1, #222	; 0xde
 8014972:	485d      	ldr	r0, [pc, #372]	; (8014ae8 <__gethex+0x2ec>)
 8014974:	f001 fa96 	bl	8015ea4 <__assert_func>
 8014978:	3101      	adds	r1, #1
 801497a:	105b      	asrs	r3, r3, #1
 801497c:	e7ee      	b.n	801495c <__gethex+0x160>
 801497e:	f100 0914 	add.w	r9, r0, #20
 8014982:	f04f 0b00 	mov.w	fp, #0
 8014986:	f1ca 0301 	rsb	r3, sl, #1
 801498a:	f8cd 9008 	str.w	r9, [sp, #8]
 801498e:	f8cd b000 	str.w	fp, [sp]
 8014992:	9306      	str	r3, [sp, #24]
 8014994:	42b7      	cmp	r7, r6
 8014996:	d340      	bcc.n	8014a1a <__gethex+0x21e>
 8014998:	9802      	ldr	r0, [sp, #8]
 801499a:	9b00      	ldr	r3, [sp, #0]
 801499c:	f840 3b04 	str.w	r3, [r0], #4
 80149a0:	eba0 0009 	sub.w	r0, r0, r9
 80149a4:	1080      	asrs	r0, r0, #2
 80149a6:	0146      	lsls	r6, r0, #5
 80149a8:	6120      	str	r0, [r4, #16]
 80149aa:	4618      	mov	r0, r3
 80149ac:	f000 fbba 	bl	8015124 <__hi0bits>
 80149b0:	1a30      	subs	r0, r6, r0
 80149b2:	f8d8 6000 	ldr.w	r6, [r8]
 80149b6:	42b0      	cmp	r0, r6
 80149b8:	dd63      	ble.n	8014a82 <__gethex+0x286>
 80149ba:	1b87      	subs	r7, r0, r6
 80149bc:	4639      	mov	r1, r7
 80149be:	4620      	mov	r0, r4
 80149c0:	f000 ff5e 	bl	8015880 <__any_on>
 80149c4:	4682      	mov	sl, r0
 80149c6:	b1a8      	cbz	r0, 80149f4 <__gethex+0x1f8>
 80149c8:	1e7b      	subs	r3, r7, #1
 80149ca:	1159      	asrs	r1, r3, #5
 80149cc:	f003 021f 	and.w	r2, r3, #31
 80149d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80149d4:	f04f 0a01 	mov.w	sl, #1
 80149d8:	fa0a f202 	lsl.w	r2, sl, r2
 80149dc:	420a      	tst	r2, r1
 80149de:	d009      	beq.n	80149f4 <__gethex+0x1f8>
 80149e0:	4553      	cmp	r3, sl
 80149e2:	dd05      	ble.n	80149f0 <__gethex+0x1f4>
 80149e4:	1eb9      	subs	r1, r7, #2
 80149e6:	4620      	mov	r0, r4
 80149e8:	f000 ff4a 	bl	8015880 <__any_on>
 80149ec:	2800      	cmp	r0, #0
 80149ee:	d145      	bne.n	8014a7c <__gethex+0x280>
 80149f0:	f04f 0a02 	mov.w	sl, #2
 80149f4:	4639      	mov	r1, r7
 80149f6:	4620      	mov	r0, r4
 80149f8:	f7ff fe98 	bl	801472c <rshift>
 80149fc:	443d      	add	r5, r7
 80149fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014a02:	42ab      	cmp	r3, r5
 8014a04:	da4c      	bge.n	8014aa0 <__gethex+0x2a4>
 8014a06:	ee18 0a10 	vmov	r0, s16
 8014a0a:	4621      	mov	r1, r4
 8014a0c:	f000 fad8 	bl	8014fc0 <_Bfree>
 8014a10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a12:	2300      	movs	r3, #0
 8014a14:	6013      	str	r3, [r2, #0]
 8014a16:	27a3      	movs	r7, #163	; 0xa3
 8014a18:	e785      	b.n	8014926 <__gethex+0x12a>
 8014a1a:	1e73      	subs	r3, r6, #1
 8014a1c:	9a05      	ldr	r2, [sp, #20]
 8014a1e:	9303      	str	r3, [sp, #12]
 8014a20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014a24:	4293      	cmp	r3, r2
 8014a26:	d019      	beq.n	8014a5c <__gethex+0x260>
 8014a28:	f1bb 0f20 	cmp.w	fp, #32
 8014a2c:	d107      	bne.n	8014a3e <__gethex+0x242>
 8014a2e:	9b02      	ldr	r3, [sp, #8]
 8014a30:	9a00      	ldr	r2, [sp, #0]
 8014a32:	f843 2b04 	str.w	r2, [r3], #4
 8014a36:	9302      	str	r3, [sp, #8]
 8014a38:	2300      	movs	r3, #0
 8014a3a:	9300      	str	r3, [sp, #0]
 8014a3c:	469b      	mov	fp, r3
 8014a3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014a42:	f7ff fec5 	bl	80147d0 <__hexdig_fun>
 8014a46:	9b00      	ldr	r3, [sp, #0]
 8014a48:	f000 000f 	and.w	r0, r0, #15
 8014a4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8014a50:	4303      	orrs	r3, r0
 8014a52:	9300      	str	r3, [sp, #0]
 8014a54:	f10b 0b04 	add.w	fp, fp, #4
 8014a58:	9b03      	ldr	r3, [sp, #12]
 8014a5a:	e00d      	b.n	8014a78 <__gethex+0x27c>
 8014a5c:	9b03      	ldr	r3, [sp, #12]
 8014a5e:	9a06      	ldr	r2, [sp, #24]
 8014a60:	4413      	add	r3, r2
 8014a62:	42bb      	cmp	r3, r7
 8014a64:	d3e0      	bcc.n	8014a28 <__gethex+0x22c>
 8014a66:	4618      	mov	r0, r3
 8014a68:	9901      	ldr	r1, [sp, #4]
 8014a6a:	9307      	str	r3, [sp, #28]
 8014a6c:	4652      	mov	r2, sl
 8014a6e:	f001 f9f7 	bl	8015e60 <strncmp>
 8014a72:	9b07      	ldr	r3, [sp, #28]
 8014a74:	2800      	cmp	r0, #0
 8014a76:	d1d7      	bne.n	8014a28 <__gethex+0x22c>
 8014a78:	461e      	mov	r6, r3
 8014a7a:	e78b      	b.n	8014994 <__gethex+0x198>
 8014a7c:	f04f 0a03 	mov.w	sl, #3
 8014a80:	e7b8      	b.n	80149f4 <__gethex+0x1f8>
 8014a82:	da0a      	bge.n	8014a9a <__gethex+0x29e>
 8014a84:	1a37      	subs	r7, r6, r0
 8014a86:	4621      	mov	r1, r4
 8014a88:	ee18 0a10 	vmov	r0, s16
 8014a8c:	463a      	mov	r2, r7
 8014a8e:	f000 fcb3 	bl	80153f8 <__lshift>
 8014a92:	1bed      	subs	r5, r5, r7
 8014a94:	4604      	mov	r4, r0
 8014a96:	f100 0914 	add.w	r9, r0, #20
 8014a9a:	f04f 0a00 	mov.w	sl, #0
 8014a9e:	e7ae      	b.n	80149fe <__gethex+0x202>
 8014aa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014aa4:	42a8      	cmp	r0, r5
 8014aa6:	dd72      	ble.n	8014b8e <__gethex+0x392>
 8014aa8:	1b45      	subs	r5, r0, r5
 8014aaa:	42ae      	cmp	r6, r5
 8014aac:	dc36      	bgt.n	8014b1c <__gethex+0x320>
 8014aae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014ab2:	2b02      	cmp	r3, #2
 8014ab4:	d02a      	beq.n	8014b0c <__gethex+0x310>
 8014ab6:	2b03      	cmp	r3, #3
 8014ab8:	d02c      	beq.n	8014b14 <__gethex+0x318>
 8014aba:	2b01      	cmp	r3, #1
 8014abc:	d11c      	bne.n	8014af8 <__gethex+0x2fc>
 8014abe:	42ae      	cmp	r6, r5
 8014ac0:	d11a      	bne.n	8014af8 <__gethex+0x2fc>
 8014ac2:	2e01      	cmp	r6, #1
 8014ac4:	d112      	bne.n	8014aec <__gethex+0x2f0>
 8014ac6:	9a04      	ldr	r2, [sp, #16]
 8014ac8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014acc:	6013      	str	r3, [r2, #0]
 8014ace:	2301      	movs	r3, #1
 8014ad0:	6123      	str	r3, [r4, #16]
 8014ad2:	f8c9 3000 	str.w	r3, [r9]
 8014ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ad8:	2762      	movs	r7, #98	; 0x62
 8014ada:	601c      	str	r4, [r3, #0]
 8014adc:	e723      	b.n	8014926 <__gethex+0x12a>
 8014ade:	bf00      	nop
 8014ae0:	08017190 	.word	0x08017190
 8014ae4:	08017118 	.word	0x08017118
 8014ae8:	08017129 	.word	0x08017129
 8014aec:	1e71      	subs	r1, r6, #1
 8014aee:	4620      	mov	r0, r4
 8014af0:	f000 fec6 	bl	8015880 <__any_on>
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d1e6      	bne.n	8014ac6 <__gethex+0x2ca>
 8014af8:	ee18 0a10 	vmov	r0, s16
 8014afc:	4621      	mov	r1, r4
 8014afe:	f000 fa5f 	bl	8014fc0 <_Bfree>
 8014b02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b04:	2300      	movs	r3, #0
 8014b06:	6013      	str	r3, [r2, #0]
 8014b08:	2750      	movs	r7, #80	; 0x50
 8014b0a:	e70c      	b.n	8014926 <__gethex+0x12a>
 8014b0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d1f2      	bne.n	8014af8 <__gethex+0x2fc>
 8014b12:	e7d8      	b.n	8014ac6 <__gethex+0x2ca>
 8014b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d1d5      	bne.n	8014ac6 <__gethex+0x2ca>
 8014b1a:	e7ed      	b.n	8014af8 <__gethex+0x2fc>
 8014b1c:	1e6f      	subs	r7, r5, #1
 8014b1e:	f1ba 0f00 	cmp.w	sl, #0
 8014b22:	d131      	bne.n	8014b88 <__gethex+0x38c>
 8014b24:	b127      	cbz	r7, 8014b30 <__gethex+0x334>
 8014b26:	4639      	mov	r1, r7
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f000 fea9 	bl	8015880 <__any_on>
 8014b2e:	4682      	mov	sl, r0
 8014b30:	117b      	asrs	r3, r7, #5
 8014b32:	2101      	movs	r1, #1
 8014b34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014b38:	f007 071f 	and.w	r7, r7, #31
 8014b3c:	fa01 f707 	lsl.w	r7, r1, r7
 8014b40:	421f      	tst	r7, r3
 8014b42:	4629      	mov	r1, r5
 8014b44:	4620      	mov	r0, r4
 8014b46:	bf18      	it	ne
 8014b48:	f04a 0a02 	orrne.w	sl, sl, #2
 8014b4c:	1b76      	subs	r6, r6, r5
 8014b4e:	f7ff fded 	bl	801472c <rshift>
 8014b52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014b56:	2702      	movs	r7, #2
 8014b58:	f1ba 0f00 	cmp.w	sl, #0
 8014b5c:	d048      	beq.n	8014bf0 <__gethex+0x3f4>
 8014b5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014b62:	2b02      	cmp	r3, #2
 8014b64:	d015      	beq.n	8014b92 <__gethex+0x396>
 8014b66:	2b03      	cmp	r3, #3
 8014b68:	d017      	beq.n	8014b9a <__gethex+0x39e>
 8014b6a:	2b01      	cmp	r3, #1
 8014b6c:	d109      	bne.n	8014b82 <__gethex+0x386>
 8014b6e:	f01a 0f02 	tst.w	sl, #2
 8014b72:	d006      	beq.n	8014b82 <__gethex+0x386>
 8014b74:	f8d9 0000 	ldr.w	r0, [r9]
 8014b78:	ea4a 0a00 	orr.w	sl, sl, r0
 8014b7c:	f01a 0f01 	tst.w	sl, #1
 8014b80:	d10e      	bne.n	8014ba0 <__gethex+0x3a4>
 8014b82:	f047 0710 	orr.w	r7, r7, #16
 8014b86:	e033      	b.n	8014bf0 <__gethex+0x3f4>
 8014b88:	f04f 0a01 	mov.w	sl, #1
 8014b8c:	e7d0      	b.n	8014b30 <__gethex+0x334>
 8014b8e:	2701      	movs	r7, #1
 8014b90:	e7e2      	b.n	8014b58 <__gethex+0x35c>
 8014b92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b94:	f1c3 0301 	rsb	r3, r3, #1
 8014b98:	9315      	str	r3, [sp, #84]	; 0x54
 8014b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d0f0      	beq.n	8014b82 <__gethex+0x386>
 8014ba0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014ba4:	f104 0314 	add.w	r3, r4, #20
 8014ba8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014bac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014bb0:	f04f 0c00 	mov.w	ip, #0
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014bbe:	d01c      	beq.n	8014bfa <__gethex+0x3fe>
 8014bc0:	3201      	adds	r2, #1
 8014bc2:	6002      	str	r2, [r0, #0]
 8014bc4:	2f02      	cmp	r7, #2
 8014bc6:	f104 0314 	add.w	r3, r4, #20
 8014bca:	d13f      	bne.n	8014c4c <__gethex+0x450>
 8014bcc:	f8d8 2000 	ldr.w	r2, [r8]
 8014bd0:	3a01      	subs	r2, #1
 8014bd2:	42b2      	cmp	r2, r6
 8014bd4:	d10a      	bne.n	8014bec <__gethex+0x3f0>
 8014bd6:	1171      	asrs	r1, r6, #5
 8014bd8:	2201      	movs	r2, #1
 8014bda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014bde:	f006 061f 	and.w	r6, r6, #31
 8014be2:	fa02 f606 	lsl.w	r6, r2, r6
 8014be6:	421e      	tst	r6, r3
 8014be8:	bf18      	it	ne
 8014bea:	4617      	movne	r7, r2
 8014bec:	f047 0720 	orr.w	r7, r7, #32
 8014bf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014bf2:	601c      	str	r4, [r3, #0]
 8014bf4:	9b04      	ldr	r3, [sp, #16]
 8014bf6:	601d      	str	r5, [r3, #0]
 8014bf8:	e695      	b.n	8014926 <__gethex+0x12a>
 8014bfa:	4299      	cmp	r1, r3
 8014bfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8014c00:	d8d8      	bhi.n	8014bb4 <__gethex+0x3b8>
 8014c02:	68a3      	ldr	r3, [r4, #8]
 8014c04:	459b      	cmp	fp, r3
 8014c06:	db19      	blt.n	8014c3c <__gethex+0x440>
 8014c08:	6861      	ldr	r1, [r4, #4]
 8014c0a:	ee18 0a10 	vmov	r0, s16
 8014c0e:	3101      	adds	r1, #1
 8014c10:	f000 f996 	bl	8014f40 <_Balloc>
 8014c14:	4681      	mov	r9, r0
 8014c16:	b918      	cbnz	r0, 8014c20 <__gethex+0x424>
 8014c18:	4b1a      	ldr	r3, [pc, #104]	; (8014c84 <__gethex+0x488>)
 8014c1a:	4602      	mov	r2, r0
 8014c1c:	2184      	movs	r1, #132	; 0x84
 8014c1e:	e6a8      	b.n	8014972 <__gethex+0x176>
 8014c20:	6922      	ldr	r2, [r4, #16]
 8014c22:	3202      	adds	r2, #2
 8014c24:	f104 010c 	add.w	r1, r4, #12
 8014c28:	0092      	lsls	r2, r2, #2
 8014c2a:	300c      	adds	r0, #12
 8014c2c:	f7fc fe92 	bl	8011954 <memcpy>
 8014c30:	4621      	mov	r1, r4
 8014c32:	ee18 0a10 	vmov	r0, s16
 8014c36:	f000 f9c3 	bl	8014fc0 <_Bfree>
 8014c3a:	464c      	mov	r4, r9
 8014c3c:	6923      	ldr	r3, [r4, #16]
 8014c3e:	1c5a      	adds	r2, r3, #1
 8014c40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014c44:	6122      	str	r2, [r4, #16]
 8014c46:	2201      	movs	r2, #1
 8014c48:	615a      	str	r2, [r3, #20]
 8014c4a:	e7bb      	b.n	8014bc4 <__gethex+0x3c8>
 8014c4c:	6922      	ldr	r2, [r4, #16]
 8014c4e:	455a      	cmp	r2, fp
 8014c50:	dd0b      	ble.n	8014c6a <__gethex+0x46e>
 8014c52:	2101      	movs	r1, #1
 8014c54:	4620      	mov	r0, r4
 8014c56:	f7ff fd69 	bl	801472c <rshift>
 8014c5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014c5e:	3501      	adds	r5, #1
 8014c60:	42ab      	cmp	r3, r5
 8014c62:	f6ff aed0 	blt.w	8014a06 <__gethex+0x20a>
 8014c66:	2701      	movs	r7, #1
 8014c68:	e7c0      	b.n	8014bec <__gethex+0x3f0>
 8014c6a:	f016 061f 	ands.w	r6, r6, #31
 8014c6e:	d0fa      	beq.n	8014c66 <__gethex+0x46a>
 8014c70:	4453      	add	r3, sl
 8014c72:	f1c6 0620 	rsb	r6, r6, #32
 8014c76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014c7a:	f000 fa53 	bl	8015124 <__hi0bits>
 8014c7e:	42b0      	cmp	r0, r6
 8014c80:	dbe7      	blt.n	8014c52 <__gethex+0x456>
 8014c82:	e7f0      	b.n	8014c66 <__gethex+0x46a>
 8014c84:	08017118 	.word	0x08017118

08014c88 <L_shift>:
 8014c88:	f1c2 0208 	rsb	r2, r2, #8
 8014c8c:	0092      	lsls	r2, r2, #2
 8014c8e:	b570      	push	{r4, r5, r6, lr}
 8014c90:	f1c2 0620 	rsb	r6, r2, #32
 8014c94:	6843      	ldr	r3, [r0, #4]
 8014c96:	6804      	ldr	r4, [r0, #0]
 8014c98:	fa03 f506 	lsl.w	r5, r3, r6
 8014c9c:	432c      	orrs	r4, r5
 8014c9e:	40d3      	lsrs	r3, r2
 8014ca0:	6004      	str	r4, [r0, #0]
 8014ca2:	f840 3f04 	str.w	r3, [r0, #4]!
 8014ca6:	4288      	cmp	r0, r1
 8014ca8:	d3f4      	bcc.n	8014c94 <L_shift+0xc>
 8014caa:	bd70      	pop	{r4, r5, r6, pc}

08014cac <__match>:
 8014cac:	b530      	push	{r4, r5, lr}
 8014cae:	6803      	ldr	r3, [r0, #0]
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014cb6:	b914      	cbnz	r4, 8014cbe <__match+0x12>
 8014cb8:	6003      	str	r3, [r0, #0]
 8014cba:	2001      	movs	r0, #1
 8014cbc:	bd30      	pop	{r4, r5, pc}
 8014cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014cc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014cc6:	2d19      	cmp	r5, #25
 8014cc8:	bf98      	it	ls
 8014cca:	3220      	addls	r2, #32
 8014ccc:	42a2      	cmp	r2, r4
 8014cce:	d0f0      	beq.n	8014cb2 <__match+0x6>
 8014cd0:	2000      	movs	r0, #0
 8014cd2:	e7f3      	b.n	8014cbc <__match+0x10>

08014cd4 <__hexnan>:
 8014cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cd8:	680b      	ldr	r3, [r1, #0]
 8014cda:	115e      	asrs	r6, r3, #5
 8014cdc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014ce0:	f013 031f 	ands.w	r3, r3, #31
 8014ce4:	b087      	sub	sp, #28
 8014ce6:	bf18      	it	ne
 8014ce8:	3604      	addne	r6, #4
 8014cea:	2500      	movs	r5, #0
 8014cec:	1f37      	subs	r7, r6, #4
 8014cee:	4690      	mov	r8, r2
 8014cf0:	6802      	ldr	r2, [r0, #0]
 8014cf2:	9301      	str	r3, [sp, #4]
 8014cf4:	4682      	mov	sl, r0
 8014cf6:	f846 5c04 	str.w	r5, [r6, #-4]
 8014cfa:	46b9      	mov	r9, r7
 8014cfc:	463c      	mov	r4, r7
 8014cfe:	9502      	str	r5, [sp, #8]
 8014d00:	46ab      	mov	fp, r5
 8014d02:	7851      	ldrb	r1, [r2, #1]
 8014d04:	1c53      	adds	r3, r2, #1
 8014d06:	9303      	str	r3, [sp, #12]
 8014d08:	b341      	cbz	r1, 8014d5c <__hexnan+0x88>
 8014d0a:	4608      	mov	r0, r1
 8014d0c:	9205      	str	r2, [sp, #20]
 8014d0e:	9104      	str	r1, [sp, #16]
 8014d10:	f7ff fd5e 	bl	80147d0 <__hexdig_fun>
 8014d14:	2800      	cmp	r0, #0
 8014d16:	d14f      	bne.n	8014db8 <__hexnan+0xe4>
 8014d18:	9904      	ldr	r1, [sp, #16]
 8014d1a:	9a05      	ldr	r2, [sp, #20]
 8014d1c:	2920      	cmp	r1, #32
 8014d1e:	d818      	bhi.n	8014d52 <__hexnan+0x7e>
 8014d20:	9b02      	ldr	r3, [sp, #8]
 8014d22:	459b      	cmp	fp, r3
 8014d24:	dd13      	ble.n	8014d4e <__hexnan+0x7a>
 8014d26:	454c      	cmp	r4, r9
 8014d28:	d206      	bcs.n	8014d38 <__hexnan+0x64>
 8014d2a:	2d07      	cmp	r5, #7
 8014d2c:	dc04      	bgt.n	8014d38 <__hexnan+0x64>
 8014d2e:	462a      	mov	r2, r5
 8014d30:	4649      	mov	r1, r9
 8014d32:	4620      	mov	r0, r4
 8014d34:	f7ff ffa8 	bl	8014c88 <L_shift>
 8014d38:	4544      	cmp	r4, r8
 8014d3a:	d950      	bls.n	8014dde <__hexnan+0x10a>
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	f1a4 0904 	sub.w	r9, r4, #4
 8014d42:	f844 3c04 	str.w	r3, [r4, #-4]
 8014d46:	f8cd b008 	str.w	fp, [sp, #8]
 8014d4a:	464c      	mov	r4, r9
 8014d4c:	461d      	mov	r5, r3
 8014d4e:	9a03      	ldr	r2, [sp, #12]
 8014d50:	e7d7      	b.n	8014d02 <__hexnan+0x2e>
 8014d52:	2929      	cmp	r1, #41	; 0x29
 8014d54:	d156      	bne.n	8014e04 <__hexnan+0x130>
 8014d56:	3202      	adds	r2, #2
 8014d58:	f8ca 2000 	str.w	r2, [sl]
 8014d5c:	f1bb 0f00 	cmp.w	fp, #0
 8014d60:	d050      	beq.n	8014e04 <__hexnan+0x130>
 8014d62:	454c      	cmp	r4, r9
 8014d64:	d206      	bcs.n	8014d74 <__hexnan+0xa0>
 8014d66:	2d07      	cmp	r5, #7
 8014d68:	dc04      	bgt.n	8014d74 <__hexnan+0xa0>
 8014d6a:	462a      	mov	r2, r5
 8014d6c:	4649      	mov	r1, r9
 8014d6e:	4620      	mov	r0, r4
 8014d70:	f7ff ff8a 	bl	8014c88 <L_shift>
 8014d74:	4544      	cmp	r4, r8
 8014d76:	d934      	bls.n	8014de2 <__hexnan+0x10e>
 8014d78:	f1a8 0204 	sub.w	r2, r8, #4
 8014d7c:	4623      	mov	r3, r4
 8014d7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8014d82:	f842 1f04 	str.w	r1, [r2, #4]!
 8014d86:	429f      	cmp	r7, r3
 8014d88:	d2f9      	bcs.n	8014d7e <__hexnan+0xaa>
 8014d8a:	1b3b      	subs	r3, r7, r4
 8014d8c:	f023 0303 	bic.w	r3, r3, #3
 8014d90:	3304      	adds	r3, #4
 8014d92:	3401      	adds	r4, #1
 8014d94:	3e03      	subs	r6, #3
 8014d96:	42b4      	cmp	r4, r6
 8014d98:	bf88      	it	hi
 8014d9a:	2304      	movhi	r3, #4
 8014d9c:	4443      	add	r3, r8
 8014d9e:	2200      	movs	r2, #0
 8014da0:	f843 2b04 	str.w	r2, [r3], #4
 8014da4:	429f      	cmp	r7, r3
 8014da6:	d2fb      	bcs.n	8014da0 <__hexnan+0xcc>
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	b91b      	cbnz	r3, 8014db4 <__hexnan+0xe0>
 8014dac:	4547      	cmp	r7, r8
 8014dae:	d127      	bne.n	8014e00 <__hexnan+0x12c>
 8014db0:	2301      	movs	r3, #1
 8014db2:	603b      	str	r3, [r7, #0]
 8014db4:	2005      	movs	r0, #5
 8014db6:	e026      	b.n	8014e06 <__hexnan+0x132>
 8014db8:	3501      	adds	r5, #1
 8014dba:	2d08      	cmp	r5, #8
 8014dbc:	f10b 0b01 	add.w	fp, fp, #1
 8014dc0:	dd06      	ble.n	8014dd0 <__hexnan+0xfc>
 8014dc2:	4544      	cmp	r4, r8
 8014dc4:	d9c3      	bls.n	8014d4e <__hexnan+0x7a>
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8014dcc:	2501      	movs	r5, #1
 8014dce:	3c04      	subs	r4, #4
 8014dd0:	6822      	ldr	r2, [r4, #0]
 8014dd2:	f000 000f 	and.w	r0, r0, #15
 8014dd6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014dda:	6022      	str	r2, [r4, #0]
 8014ddc:	e7b7      	b.n	8014d4e <__hexnan+0x7a>
 8014dde:	2508      	movs	r5, #8
 8014de0:	e7b5      	b.n	8014d4e <__hexnan+0x7a>
 8014de2:	9b01      	ldr	r3, [sp, #4]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d0df      	beq.n	8014da8 <__hexnan+0xd4>
 8014de8:	f04f 32ff 	mov.w	r2, #4294967295
 8014dec:	f1c3 0320 	rsb	r3, r3, #32
 8014df0:	fa22 f303 	lsr.w	r3, r2, r3
 8014df4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014df8:	401a      	ands	r2, r3
 8014dfa:	f846 2c04 	str.w	r2, [r6, #-4]
 8014dfe:	e7d3      	b.n	8014da8 <__hexnan+0xd4>
 8014e00:	3f04      	subs	r7, #4
 8014e02:	e7d1      	b.n	8014da8 <__hexnan+0xd4>
 8014e04:	2004      	movs	r0, #4
 8014e06:	b007      	add	sp, #28
 8014e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e0c <_localeconv_r>:
 8014e0c:	4800      	ldr	r0, [pc, #0]	; (8014e10 <_localeconv_r+0x4>)
 8014e0e:	4770      	bx	lr
 8014e10:	20000628 	.word	0x20000628

08014e14 <_lseek_r>:
 8014e14:	b538      	push	{r3, r4, r5, lr}
 8014e16:	4d07      	ldr	r5, [pc, #28]	; (8014e34 <_lseek_r+0x20>)
 8014e18:	4604      	mov	r4, r0
 8014e1a:	4608      	mov	r0, r1
 8014e1c:	4611      	mov	r1, r2
 8014e1e:	2200      	movs	r2, #0
 8014e20:	602a      	str	r2, [r5, #0]
 8014e22:	461a      	mov	r2, r3
 8014e24:	f7f3 fd98 	bl	8008958 <_lseek>
 8014e28:	1c43      	adds	r3, r0, #1
 8014e2a:	d102      	bne.n	8014e32 <_lseek_r+0x1e>
 8014e2c:	682b      	ldr	r3, [r5, #0]
 8014e2e:	b103      	cbz	r3, 8014e32 <_lseek_r+0x1e>
 8014e30:	6023      	str	r3, [r4, #0]
 8014e32:	bd38      	pop	{r3, r4, r5, pc}
 8014e34:	2000252c 	.word	0x2000252c

08014e38 <__swhatbuf_r>:
 8014e38:	b570      	push	{r4, r5, r6, lr}
 8014e3a:	460e      	mov	r6, r1
 8014e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e40:	2900      	cmp	r1, #0
 8014e42:	b096      	sub	sp, #88	; 0x58
 8014e44:	4614      	mov	r4, r2
 8014e46:	461d      	mov	r5, r3
 8014e48:	da08      	bge.n	8014e5c <__swhatbuf_r+0x24>
 8014e4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	602a      	str	r2, [r5, #0]
 8014e52:	061a      	lsls	r2, r3, #24
 8014e54:	d410      	bmi.n	8014e78 <__swhatbuf_r+0x40>
 8014e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e5a:	e00e      	b.n	8014e7a <__swhatbuf_r+0x42>
 8014e5c:	466a      	mov	r2, sp
 8014e5e:	f001 f851 	bl	8015f04 <_fstat_r>
 8014e62:	2800      	cmp	r0, #0
 8014e64:	dbf1      	blt.n	8014e4a <__swhatbuf_r+0x12>
 8014e66:	9a01      	ldr	r2, [sp, #4]
 8014e68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014e6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014e70:	425a      	negs	r2, r3
 8014e72:	415a      	adcs	r2, r3
 8014e74:	602a      	str	r2, [r5, #0]
 8014e76:	e7ee      	b.n	8014e56 <__swhatbuf_r+0x1e>
 8014e78:	2340      	movs	r3, #64	; 0x40
 8014e7a:	2000      	movs	r0, #0
 8014e7c:	6023      	str	r3, [r4, #0]
 8014e7e:	b016      	add	sp, #88	; 0x58
 8014e80:	bd70      	pop	{r4, r5, r6, pc}
	...

08014e84 <__smakebuf_r>:
 8014e84:	898b      	ldrh	r3, [r1, #12]
 8014e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014e88:	079d      	lsls	r5, r3, #30
 8014e8a:	4606      	mov	r6, r0
 8014e8c:	460c      	mov	r4, r1
 8014e8e:	d507      	bpl.n	8014ea0 <__smakebuf_r+0x1c>
 8014e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014e94:	6023      	str	r3, [r4, #0]
 8014e96:	6123      	str	r3, [r4, #16]
 8014e98:	2301      	movs	r3, #1
 8014e9a:	6163      	str	r3, [r4, #20]
 8014e9c:	b002      	add	sp, #8
 8014e9e:	bd70      	pop	{r4, r5, r6, pc}
 8014ea0:	ab01      	add	r3, sp, #4
 8014ea2:	466a      	mov	r2, sp
 8014ea4:	f7ff ffc8 	bl	8014e38 <__swhatbuf_r>
 8014ea8:	9900      	ldr	r1, [sp, #0]
 8014eaa:	4605      	mov	r5, r0
 8014eac:	4630      	mov	r0, r6
 8014eae:	f7fc fe03 	bl	8011ab8 <_malloc_r>
 8014eb2:	b948      	cbnz	r0, 8014ec8 <__smakebuf_r+0x44>
 8014eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eb8:	059a      	lsls	r2, r3, #22
 8014eba:	d4ef      	bmi.n	8014e9c <__smakebuf_r+0x18>
 8014ebc:	f023 0303 	bic.w	r3, r3, #3
 8014ec0:	f043 0302 	orr.w	r3, r3, #2
 8014ec4:	81a3      	strh	r3, [r4, #12]
 8014ec6:	e7e3      	b.n	8014e90 <__smakebuf_r+0xc>
 8014ec8:	4b0d      	ldr	r3, [pc, #52]	; (8014f00 <__smakebuf_r+0x7c>)
 8014eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8014ecc:	89a3      	ldrh	r3, [r4, #12]
 8014ece:	6020      	str	r0, [r4, #0]
 8014ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ed4:	81a3      	strh	r3, [r4, #12]
 8014ed6:	9b00      	ldr	r3, [sp, #0]
 8014ed8:	6163      	str	r3, [r4, #20]
 8014eda:	9b01      	ldr	r3, [sp, #4]
 8014edc:	6120      	str	r0, [r4, #16]
 8014ede:	b15b      	cbz	r3, 8014ef8 <__smakebuf_r+0x74>
 8014ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	f001 f81f 	bl	8015f28 <_isatty_r>
 8014eea:	b128      	cbz	r0, 8014ef8 <__smakebuf_r+0x74>
 8014eec:	89a3      	ldrh	r3, [r4, #12]
 8014eee:	f023 0303 	bic.w	r3, r3, #3
 8014ef2:	f043 0301 	orr.w	r3, r3, #1
 8014ef6:	81a3      	strh	r3, [r4, #12]
 8014ef8:	89a0      	ldrh	r0, [r4, #12]
 8014efa:	4305      	orrs	r5, r0
 8014efc:	81a5      	strh	r5, [r4, #12]
 8014efe:	e7cd      	b.n	8014e9c <__smakebuf_r+0x18>
 8014f00:	08011741 	.word	0x08011741

08014f04 <__ascii_mbtowc>:
 8014f04:	b082      	sub	sp, #8
 8014f06:	b901      	cbnz	r1, 8014f0a <__ascii_mbtowc+0x6>
 8014f08:	a901      	add	r1, sp, #4
 8014f0a:	b142      	cbz	r2, 8014f1e <__ascii_mbtowc+0x1a>
 8014f0c:	b14b      	cbz	r3, 8014f22 <__ascii_mbtowc+0x1e>
 8014f0e:	7813      	ldrb	r3, [r2, #0]
 8014f10:	600b      	str	r3, [r1, #0]
 8014f12:	7812      	ldrb	r2, [r2, #0]
 8014f14:	1e10      	subs	r0, r2, #0
 8014f16:	bf18      	it	ne
 8014f18:	2001      	movne	r0, #1
 8014f1a:	b002      	add	sp, #8
 8014f1c:	4770      	bx	lr
 8014f1e:	4610      	mov	r0, r2
 8014f20:	e7fb      	b.n	8014f1a <__ascii_mbtowc+0x16>
 8014f22:	f06f 0001 	mvn.w	r0, #1
 8014f26:	e7f8      	b.n	8014f1a <__ascii_mbtowc+0x16>

08014f28 <__malloc_lock>:
 8014f28:	4801      	ldr	r0, [pc, #4]	; (8014f30 <__malloc_lock+0x8>)
 8014f2a:	f7fc bd00 	b.w	801192e <__retarget_lock_acquire_recursive>
 8014f2e:	bf00      	nop
 8014f30:	20002520 	.word	0x20002520

08014f34 <__malloc_unlock>:
 8014f34:	4801      	ldr	r0, [pc, #4]	; (8014f3c <__malloc_unlock+0x8>)
 8014f36:	f7fc bcfb 	b.w	8011930 <__retarget_lock_release_recursive>
 8014f3a:	bf00      	nop
 8014f3c:	20002520 	.word	0x20002520

08014f40 <_Balloc>:
 8014f40:	b570      	push	{r4, r5, r6, lr}
 8014f42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014f44:	4604      	mov	r4, r0
 8014f46:	460d      	mov	r5, r1
 8014f48:	b976      	cbnz	r6, 8014f68 <_Balloc+0x28>
 8014f4a:	2010      	movs	r0, #16
 8014f4c:	f7fc fcf2 	bl	8011934 <malloc>
 8014f50:	4602      	mov	r2, r0
 8014f52:	6260      	str	r0, [r4, #36]	; 0x24
 8014f54:	b920      	cbnz	r0, 8014f60 <_Balloc+0x20>
 8014f56:	4b18      	ldr	r3, [pc, #96]	; (8014fb8 <_Balloc+0x78>)
 8014f58:	4818      	ldr	r0, [pc, #96]	; (8014fbc <_Balloc+0x7c>)
 8014f5a:	2166      	movs	r1, #102	; 0x66
 8014f5c:	f000 ffa2 	bl	8015ea4 <__assert_func>
 8014f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f64:	6006      	str	r6, [r0, #0]
 8014f66:	60c6      	str	r6, [r0, #12]
 8014f68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014f6a:	68f3      	ldr	r3, [r6, #12]
 8014f6c:	b183      	cbz	r3, 8014f90 <_Balloc+0x50>
 8014f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f70:	68db      	ldr	r3, [r3, #12]
 8014f72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014f76:	b9b8      	cbnz	r0, 8014fa8 <_Balloc+0x68>
 8014f78:	2101      	movs	r1, #1
 8014f7a:	fa01 f605 	lsl.w	r6, r1, r5
 8014f7e:	1d72      	adds	r2, r6, #5
 8014f80:	0092      	lsls	r2, r2, #2
 8014f82:	4620      	mov	r0, r4
 8014f84:	f7fc fd16 	bl	80119b4 <_calloc_r>
 8014f88:	b160      	cbz	r0, 8014fa4 <_Balloc+0x64>
 8014f8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014f8e:	e00e      	b.n	8014fae <_Balloc+0x6e>
 8014f90:	2221      	movs	r2, #33	; 0x21
 8014f92:	2104      	movs	r1, #4
 8014f94:	4620      	mov	r0, r4
 8014f96:	f7fc fd0d 	bl	80119b4 <_calloc_r>
 8014f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f9c:	60f0      	str	r0, [r6, #12]
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d1e4      	bne.n	8014f6e <_Balloc+0x2e>
 8014fa4:	2000      	movs	r0, #0
 8014fa6:	bd70      	pop	{r4, r5, r6, pc}
 8014fa8:	6802      	ldr	r2, [r0, #0]
 8014faa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014fae:	2300      	movs	r3, #0
 8014fb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014fb4:	e7f7      	b.n	8014fa6 <_Balloc+0x66>
 8014fb6:	bf00      	nop
 8014fb8:	080170a6 	.word	0x080170a6
 8014fbc:	080171a4 	.word	0x080171a4

08014fc0 <_Bfree>:
 8014fc0:	b570      	push	{r4, r5, r6, lr}
 8014fc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014fc4:	4605      	mov	r5, r0
 8014fc6:	460c      	mov	r4, r1
 8014fc8:	b976      	cbnz	r6, 8014fe8 <_Bfree+0x28>
 8014fca:	2010      	movs	r0, #16
 8014fcc:	f7fc fcb2 	bl	8011934 <malloc>
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	6268      	str	r0, [r5, #36]	; 0x24
 8014fd4:	b920      	cbnz	r0, 8014fe0 <_Bfree+0x20>
 8014fd6:	4b09      	ldr	r3, [pc, #36]	; (8014ffc <_Bfree+0x3c>)
 8014fd8:	4809      	ldr	r0, [pc, #36]	; (8015000 <_Bfree+0x40>)
 8014fda:	218a      	movs	r1, #138	; 0x8a
 8014fdc:	f000 ff62 	bl	8015ea4 <__assert_func>
 8014fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014fe4:	6006      	str	r6, [r0, #0]
 8014fe6:	60c6      	str	r6, [r0, #12]
 8014fe8:	b13c      	cbz	r4, 8014ffa <_Bfree+0x3a>
 8014fea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014fec:	6862      	ldr	r2, [r4, #4]
 8014fee:	68db      	ldr	r3, [r3, #12]
 8014ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014ff4:	6021      	str	r1, [r4, #0]
 8014ff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014ffa:	bd70      	pop	{r4, r5, r6, pc}
 8014ffc:	080170a6 	.word	0x080170a6
 8015000:	080171a4 	.word	0x080171a4

08015004 <__multadd>:
 8015004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015008:	690d      	ldr	r5, [r1, #16]
 801500a:	4607      	mov	r7, r0
 801500c:	460c      	mov	r4, r1
 801500e:	461e      	mov	r6, r3
 8015010:	f101 0c14 	add.w	ip, r1, #20
 8015014:	2000      	movs	r0, #0
 8015016:	f8dc 3000 	ldr.w	r3, [ip]
 801501a:	b299      	uxth	r1, r3
 801501c:	fb02 6101 	mla	r1, r2, r1, r6
 8015020:	0c1e      	lsrs	r6, r3, #16
 8015022:	0c0b      	lsrs	r3, r1, #16
 8015024:	fb02 3306 	mla	r3, r2, r6, r3
 8015028:	b289      	uxth	r1, r1
 801502a:	3001      	adds	r0, #1
 801502c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015030:	4285      	cmp	r5, r0
 8015032:	f84c 1b04 	str.w	r1, [ip], #4
 8015036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801503a:	dcec      	bgt.n	8015016 <__multadd+0x12>
 801503c:	b30e      	cbz	r6, 8015082 <__multadd+0x7e>
 801503e:	68a3      	ldr	r3, [r4, #8]
 8015040:	42ab      	cmp	r3, r5
 8015042:	dc19      	bgt.n	8015078 <__multadd+0x74>
 8015044:	6861      	ldr	r1, [r4, #4]
 8015046:	4638      	mov	r0, r7
 8015048:	3101      	adds	r1, #1
 801504a:	f7ff ff79 	bl	8014f40 <_Balloc>
 801504e:	4680      	mov	r8, r0
 8015050:	b928      	cbnz	r0, 801505e <__multadd+0x5a>
 8015052:	4602      	mov	r2, r0
 8015054:	4b0c      	ldr	r3, [pc, #48]	; (8015088 <__multadd+0x84>)
 8015056:	480d      	ldr	r0, [pc, #52]	; (801508c <__multadd+0x88>)
 8015058:	21b5      	movs	r1, #181	; 0xb5
 801505a:	f000 ff23 	bl	8015ea4 <__assert_func>
 801505e:	6922      	ldr	r2, [r4, #16]
 8015060:	3202      	adds	r2, #2
 8015062:	f104 010c 	add.w	r1, r4, #12
 8015066:	0092      	lsls	r2, r2, #2
 8015068:	300c      	adds	r0, #12
 801506a:	f7fc fc73 	bl	8011954 <memcpy>
 801506e:	4621      	mov	r1, r4
 8015070:	4638      	mov	r0, r7
 8015072:	f7ff ffa5 	bl	8014fc0 <_Bfree>
 8015076:	4644      	mov	r4, r8
 8015078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801507c:	3501      	adds	r5, #1
 801507e:	615e      	str	r6, [r3, #20]
 8015080:	6125      	str	r5, [r4, #16]
 8015082:	4620      	mov	r0, r4
 8015084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015088:	08017118 	.word	0x08017118
 801508c:	080171a4 	.word	0x080171a4

08015090 <__s2b>:
 8015090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015094:	460c      	mov	r4, r1
 8015096:	4615      	mov	r5, r2
 8015098:	461f      	mov	r7, r3
 801509a:	2209      	movs	r2, #9
 801509c:	3308      	adds	r3, #8
 801509e:	4606      	mov	r6, r0
 80150a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80150a4:	2100      	movs	r1, #0
 80150a6:	2201      	movs	r2, #1
 80150a8:	429a      	cmp	r2, r3
 80150aa:	db09      	blt.n	80150c0 <__s2b+0x30>
 80150ac:	4630      	mov	r0, r6
 80150ae:	f7ff ff47 	bl	8014f40 <_Balloc>
 80150b2:	b940      	cbnz	r0, 80150c6 <__s2b+0x36>
 80150b4:	4602      	mov	r2, r0
 80150b6:	4b19      	ldr	r3, [pc, #100]	; (801511c <__s2b+0x8c>)
 80150b8:	4819      	ldr	r0, [pc, #100]	; (8015120 <__s2b+0x90>)
 80150ba:	21ce      	movs	r1, #206	; 0xce
 80150bc:	f000 fef2 	bl	8015ea4 <__assert_func>
 80150c0:	0052      	lsls	r2, r2, #1
 80150c2:	3101      	adds	r1, #1
 80150c4:	e7f0      	b.n	80150a8 <__s2b+0x18>
 80150c6:	9b08      	ldr	r3, [sp, #32]
 80150c8:	6143      	str	r3, [r0, #20]
 80150ca:	2d09      	cmp	r5, #9
 80150cc:	f04f 0301 	mov.w	r3, #1
 80150d0:	6103      	str	r3, [r0, #16]
 80150d2:	dd16      	ble.n	8015102 <__s2b+0x72>
 80150d4:	f104 0909 	add.w	r9, r4, #9
 80150d8:	46c8      	mov	r8, r9
 80150da:	442c      	add	r4, r5
 80150dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80150e0:	4601      	mov	r1, r0
 80150e2:	3b30      	subs	r3, #48	; 0x30
 80150e4:	220a      	movs	r2, #10
 80150e6:	4630      	mov	r0, r6
 80150e8:	f7ff ff8c 	bl	8015004 <__multadd>
 80150ec:	45a0      	cmp	r8, r4
 80150ee:	d1f5      	bne.n	80150dc <__s2b+0x4c>
 80150f0:	f1a5 0408 	sub.w	r4, r5, #8
 80150f4:	444c      	add	r4, r9
 80150f6:	1b2d      	subs	r5, r5, r4
 80150f8:	1963      	adds	r3, r4, r5
 80150fa:	42bb      	cmp	r3, r7
 80150fc:	db04      	blt.n	8015108 <__s2b+0x78>
 80150fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015102:	340a      	adds	r4, #10
 8015104:	2509      	movs	r5, #9
 8015106:	e7f6      	b.n	80150f6 <__s2b+0x66>
 8015108:	f814 3b01 	ldrb.w	r3, [r4], #1
 801510c:	4601      	mov	r1, r0
 801510e:	3b30      	subs	r3, #48	; 0x30
 8015110:	220a      	movs	r2, #10
 8015112:	4630      	mov	r0, r6
 8015114:	f7ff ff76 	bl	8015004 <__multadd>
 8015118:	e7ee      	b.n	80150f8 <__s2b+0x68>
 801511a:	bf00      	nop
 801511c:	08017118 	.word	0x08017118
 8015120:	080171a4 	.word	0x080171a4

08015124 <__hi0bits>:
 8015124:	0c03      	lsrs	r3, r0, #16
 8015126:	041b      	lsls	r3, r3, #16
 8015128:	b9d3      	cbnz	r3, 8015160 <__hi0bits+0x3c>
 801512a:	0400      	lsls	r0, r0, #16
 801512c:	2310      	movs	r3, #16
 801512e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015132:	bf04      	itt	eq
 8015134:	0200      	lsleq	r0, r0, #8
 8015136:	3308      	addeq	r3, #8
 8015138:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801513c:	bf04      	itt	eq
 801513e:	0100      	lsleq	r0, r0, #4
 8015140:	3304      	addeq	r3, #4
 8015142:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015146:	bf04      	itt	eq
 8015148:	0080      	lsleq	r0, r0, #2
 801514a:	3302      	addeq	r3, #2
 801514c:	2800      	cmp	r0, #0
 801514e:	db05      	blt.n	801515c <__hi0bits+0x38>
 8015150:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015154:	f103 0301 	add.w	r3, r3, #1
 8015158:	bf08      	it	eq
 801515a:	2320      	moveq	r3, #32
 801515c:	4618      	mov	r0, r3
 801515e:	4770      	bx	lr
 8015160:	2300      	movs	r3, #0
 8015162:	e7e4      	b.n	801512e <__hi0bits+0xa>

08015164 <__lo0bits>:
 8015164:	6803      	ldr	r3, [r0, #0]
 8015166:	f013 0207 	ands.w	r2, r3, #7
 801516a:	4601      	mov	r1, r0
 801516c:	d00b      	beq.n	8015186 <__lo0bits+0x22>
 801516e:	07da      	lsls	r2, r3, #31
 8015170:	d423      	bmi.n	80151ba <__lo0bits+0x56>
 8015172:	0798      	lsls	r0, r3, #30
 8015174:	bf49      	itett	mi
 8015176:	085b      	lsrmi	r3, r3, #1
 8015178:	089b      	lsrpl	r3, r3, #2
 801517a:	2001      	movmi	r0, #1
 801517c:	600b      	strmi	r3, [r1, #0]
 801517e:	bf5c      	itt	pl
 8015180:	600b      	strpl	r3, [r1, #0]
 8015182:	2002      	movpl	r0, #2
 8015184:	4770      	bx	lr
 8015186:	b298      	uxth	r0, r3
 8015188:	b9a8      	cbnz	r0, 80151b6 <__lo0bits+0x52>
 801518a:	0c1b      	lsrs	r3, r3, #16
 801518c:	2010      	movs	r0, #16
 801518e:	b2da      	uxtb	r2, r3
 8015190:	b90a      	cbnz	r2, 8015196 <__lo0bits+0x32>
 8015192:	3008      	adds	r0, #8
 8015194:	0a1b      	lsrs	r3, r3, #8
 8015196:	071a      	lsls	r2, r3, #28
 8015198:	bf04      	itt	eq
 801519a:	091b      	lsreq	r3, r3, #4
 801519c:	3004      	addeq	r0, #4
 801519e:	079a      	lsls	r2, r3, #30
 80151a0:	bf04      	itt	eq
 80151a2:	089b      	lsreq	r3, r3, #2
 80151a4:	3002      	addeq	r0, #2
 80151a6:	07da      	lsls	r2, r3, #31
 80151a8:	d403      	bmi.n	80151b2 <__lo0bits+0x4e>
 80151aa:	085b      	lsrs	r3, r3, #1
 80151ac:	f100 0001 	add.w	r0, r0, #1
 80151b0:	d005      	beq.n	80151be <__lo0bits+0x5a>
 80151b2:	600b      	str	r3, [r1, #0]
 80151b4:	4770      	bx	lr
 80151b6:	4610      	mov	r0, r2
 80151b8:	e7e9      	b.n	801518e <__lo0bits+0x2a>
 80151ba:	2000      	movs	r0, #0
 80151bc:	4770      	bx	lr
 80151be:	2020      	movs	r0, #32
 80151c0:	4770      	bx	lr
	...

080151c4 <__i2b>:
 80151c4:	b510      	push	{r4, lr}
 80151c6:	460c      	mov	r4, r1
 80151c8:	2101      	movs	r1, #1
 80151ca:	f7ff feb9 	bl	8014f40 <_Balloc>
 80151ce:	4602      	mov	r2, r0
 80151d0:	b928      	cbnz	r0, 80151de <__i2b+0x1a>
 80151d2:	4b05      	ldr	r3, [pc, #20]	; (80151e8 <__i2b+0x24>)
 80151d4:	4805      	ldr	r0, [pc, #20]	; (80151ec <__i2b+0x28>)
 80151d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80151da:	f000 fe63 	bl	8015ea4 <__assert_func>
 80151de:	2301      	movs	r3, #1
 80151e0:	6144      	str	r4, [r0, #20]
 80151e2:	6103      	str	r3, [r0, #16]
 80151e4:	bd10      	pop	{r4, pc}
 80151e6:	bf00      	nop
 80151e8:	08017118 	.word	0x08017118
 80151ec:	080171a4 	.word	0x080171a4

080151f0 <__multiply>:
 80151f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151f4:	4691      	mov	r9, r2
 80151f6:	690a      	ldr	r2, [r1, #16]
 80151f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80151fc:	429a      	cmp	r2, r3
 80151fe:	bfb8      	it	lt
 8015200:	460b      	movlt	r3, r1
 8015202:	460c      	mov	r4, r1
 8015204:	bfbc      	itt	lt
 8015206:	464c      	movlt	r4, r9
 8015208:	4699      	movlt	r9, r3
 801520a:	6927      	ldr	r7, [r4, #16]
 801520c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015210:	68a3      	ldr	r3, [r4, #8]
 8015212:	6861      	ldr	r1, [r4, #4]
 8015214:	eb07 060a 	add.w	r6, r7, sl
 8015218:	42b3      	cmp	r3, r6
 801521a:	b085      	sub	sp, #20
 801521c:	bfb8      	it	lt
 801521e:	3101      	addlt	r1, #1
 8015220:	f7ff fe8e 	bl	8014f40 <_Balloc>
 8015224:	b930      	cbnz	r0, 8015234 <__multiply+0x44>
 8015226:	4602      	mov	r2, r0
 8015228:	4b44      	ldr	r3, [pc, #272]	; (801533c <__multiply+0x14c>)
 801522a:	4845      	ldr	r0, [pc, #276]	; (8015340 <__multiply+0x150>)
 801522c:	f240 115d 	movw	r1, #349	; 0x15d
 8015230:	f000 fe38 	bl	8015ea4 <__assert_func>
 8015234:	f100 0514 	add.w	r5, r0, #20
 8015238:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801523c:	462b      	mov	r3, r5
 801523e:	2200      	movs	r2, #0
 8015240:	4543      	cmp	r3, r8
 8015242:	d321      	bcc.n	8015288 <__multiply+0x98>
 8015244:	f104 0314 	add.w	r3, r4, #20
 8015248:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801524c:	f109 0314 	add.w	r3, r9, #20
 8015250:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015254:	9202      	str	r2, [sp, #8]
 8015256:	1b3a      	subs	r2, r7, r4
 8015258:	3a15      	subs	r2, #21
 801525a:	f022 0203 	bic.w	r2, r2, #3
 801525e:	3204      	adds	r2, #4
 8015260:	f104 0115 	add.w	r1, r4, #21
 8015264:	428f      	cmp	r7, r1
 8015266:	bf38      	it	cc
 8015268:	2204      	movcc	r2, #4
 801526a:	9201      	str	r2, [sp, #4]
 801526c:	9a02      	ldr	r2, [sp, #8]
 801526e:	9303      	str	r3, [sp, #12]
 8015270:	429a      	cmp	r2, r3
 8015272:	d80c      	bhi.n	801528e <__multiply+0x9e>
 8015274:	2e00      	cmp	r6, #0
 8015276:	dd03      	ble.n	8015280 <__multiply+0x90>
 8015278:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801527c:	2b00      	cmp	r3, #0
 801527e:	d05a      	beq.n	8015336 <__multiply+0x146>
 8015280:	6106      	str	r6, [r0, #16]
 8015282:	b005      	add	sp, #20
 8015284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015288:	f843 2b04 	str.w	r2, [r3], #4
 801528c:	e7d8      	b.n	8015240 <__multiply+0x50>
 801528e:	f8b3 a000 	ldrh.w	sl, [r3]
 8015292:	f1ba 0f00 	cmp.w	sl, #0
 8015296:	d024      	beq.n	80152e2 <__multiply+0xf2>
 8015298:	f104 0e14 	add.w	lr, r4, #20
 801529c:	46a9      	mov	r9, r5
 801529e:	f04f 0c00 	mov.w	ip, #0
 80152a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80152a6:	f8d9 1000 	ldr.w	r1, [r9]
 80152aa:	fa1f fb82 	uxth.w	fp, r2
 80152ae:	b289      	uxth	r1, r1
 80152b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80152b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80152b8:	f8d9 2000 	ldr.w	r2, [r9]
 80152bc:	4461      	add	r1, ip
 80152be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80152c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80152c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80152ca:	b289      	uxth	r1, r1
 80152cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80152d0:	4577      	cmp	r7, lr
 80152d2:	f849 1b04 	str.w	r1, [r9], #4
 80152d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80152da:	d8e2      	bhi.n	80152a2 <__multiply+0xb2>
 80152dc:	9a01      	ldr	r2, [sp, #4]
 80152de:	f845 c002 	str.w	ip, [r5, r2]
 80152e2:	9a03      	ldr	r2, [sp, #12]
 80152e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80152e8:	3304      	adds	r3, #4
 80152ea:	f1b9 0f00 	cmp.w	r9, #0
 80152ee:	d020      	beq.n	8015332 <__multiply+0x142>
 80152f0:	6829      	ldr	r1, [r5, #0]
 80152f2:	f104 0c14 	add.w	ip, r4, #20
 80152f6:	46ae      	mov	lr, r5
 80152f8:	f04f 0a00 	mov.w	sl, #0
 80152fc:	f8bc b000 	ldrh.w	fp, [ip]
 8015300:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015304:	fb09 220b 	mla	r2, r9, fp, r2
 8015308:	4492      	add	sl, r2
 801530a:	b289      	uxth	r1, r1
 801530c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015310:	f84e 1b04 	str.w	r1, [lr], #4
 8015314:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015318:	f8be 1000 	ldrh.w	r1, [lr]
 801531c:	0c12      	lsrs	r2, r2, #16
 801531e:	fb09 1102 	mla	r1, r9, r2, r1
 8015322:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015326:	4567      	cmp	r7, ip
 8015328:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801532c:	d8e6      	bhi.n	80152fc <__multiply+0x10c>
 801532e:	9a01      	ldr	r2, [sp, #4]
 8015330:	50a9      	str	r1, [r5, r2]
 8015332:	3504      	adds	r5, #4
 8015334:	e79a      	b.n	801526c <__multiply+0x7c>
 8015336:	3e01      	subs	r6, #1
 8015338:	e79c      	b.n	8015274 <__multiply+0x84>
 801533a:	bf00      	nop
 801533c:	08017118 	.word	0x08017118
 8015340:	080171a4 	.word	0x080171a4

08015344 <__pow5mult>:
 8015344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015348:	4615      	mov	r5, r2
 801534a:	f012 0203 	ands.w	r2, r2, #3
 801534e:	4606      	mov	r6, r0
 8015350:	460f      	mov	r7, r1
 8015352:	d007      	beq.n	8015364 <__pow5mult+0x20>
 8015354:	4c25      	ldr	r4, [pc, #148]	; (80153ec <__pow5mult+0xa8>)
 8015356:	3a01      	subs	r2, #1
 8015358:	2300      	movs	r3, #0
 801535a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801535e:	f7ff fe51 	bl	8015004 <__multadd>
 8015362:	4607      	mov	r7, r0
 8015364:	10ad      	asrs	r5, r5, #2
 8015366:	d03d      	beq.n	80153e4 <__pow5mult+0xa0>
 8015368:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801536a:	b97c      	cbnz	r4, 801538c <__pow5mult+0x48>
 801536c:	2010      	movs	r0, #16
 801536e:	f7fc fae1 	bl	8011934 <malloc>
 8015372:	4602      	mov	r2, r0
 8015374:	6270      	str	r0, [r6, #36]	; 0x24
 8015376:	b928      	cbnz	r0, 8015384 <__pow5mult+0x40>
 8015378:	4b1d      	ldr	r3, [pc, #116]	; (80153f0 <__pow5mult+0xac>)
 801537a:	481e      	ldr	r0, [pc, #120]	; (80153f4 <__pow5mult+0xb0>)
 801537c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015380:	f000 fd90 	bl	8015ea4 <__assert_func>
 8015384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015388:	6004      	str	r4, [r0, #0]
 801538a:	60c4      	str	r4, [r0, #12]
 801538c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015394:	b94c      	cbnz	r4, 80153aa <__pow5mult+0x66>
 8015396:	f240 2171 	movw	r1, #625	; 0x271
 801539a:	4630      	mov	r0, r6
 801539c:	f7ff ff12 	bl	80151c4 <__i2b>
 80153a0:	2300      	movs	r3, #0
 80153a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80153a6:	4604      	mov	r4, r0
 80153a8:	6003      	str	r3, [r0, #0]
 80153aa:	f04f 0900 	mov.w	r9, #0
 80153ae:	07eb      	lsls	r3, r5, #31
 80153b0:	d50a      	bpl.n	80153c8 <__pow5mult+0x84>
 80153b2:	4639      	mov	r1, r7
 80153b4:	4622      	mov	r2, r4
 80153b6:	4630      	mov	r0, r6
 80153b8:	f7ff ff1a 	bl	80151f0 <__multiply>
 80153bc:	4639      	mov	r1, r7
 80153be:	4680      	mov	r8, r0
 80153c0:	4630      	mov	r0, r6
 80153c2:	f7ff fdfd 	bl	8014fc0 <_Bfree>
 80153c6:	4647      	mov	r7, r8
 80153c8:	106d      	asrs	r5, r5, #1
 80153ca:	d00b      	beq.n	80153e4 <__pow5mult+0xa0>
 80153cc:	6820      	ldr	r0, [r4, #0]
 80153ce:	b938      	cbnz	r0, 80153e0 <__pow5mult+0x9c>
 80153d0:	4622      	mov	r2, r4
 80153d2:	4621      	mov	r1, r4
 80153d4:	4630      	mov	r0, r6
 80153d6:	f7ff ff0b 	bl	80151f0 <__multiply>
 80153da:	6020      	str	r0, [r4, #0]
 80153dc:	f8c0 9000 	str.w	r9, [r0]
 80153e0:	4604      	mov	r4, r0
 80153e2:	e7e4      	b.n	80153ae <__pow5mult+0x6a>
 80153e4:	4638      	mov	r0, r7
 80153e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153ea:	bf00      	nop
 80153ec:	080172f0 	.word	0x080172f0
 80153f0:	080170a6 	.word	0x080170a6
 80153f4:	080171a4 	.word	0x080171a4

080153f8 <__lshift>:
 80153f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153fc:	460c      	mov	r4, r1
 80153fe:	6849      	ldr	r1, [r1, #4]
 8015400:	6923      	ldr	r3, [r4, #16]
 8015402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015406:	68a3      	ldr	r3, [r4, #8]
 8015408:	4607      	mov	r7, r0
 801540a:	4691      	mov	r9, r2
 801540c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015410:	f108 0601 	add.w	r6, r8, #1
 8015414:	42b3      	cmp	r3, r6
 8015416:	db0b      	blt.n	8015430 <__lshift+0x38>
 8015418:	4638      	mov	r0, r7
 801541a:	f7ff fd91 	bl	8014f40 <_Balloc>
 801541e:	4605      	mov	r5, r0
 8015420:	b948      	cbnz	r0, 8015436 <__lshift+0x3e>
 8015422:	4602      	mov	r2, r0
 8015424:	4b2a      	ldr	r3, [pc, #168]	; (80154d0 <__lshift+0xd8>)
 8015426:	482b      	ldr	r0, [pc, #172]	; (80154d4 <__lshift+0xdc>)
 8015428:	f240 11d9 	movw	r1, #473	; 0x1d9
 801542c:	f000 fd3a 	bl	8015ea4 <__assert_func>
 8015430:	3101      	adds	r1, #1
 8015432:	005b      	lsls	r3, r3, #1
 8015434:	e7ee      	b.n	8015414 <__lshift+0x1c>
 8015436:	2300      	movs	r3, #0
 8015438:	f100 0114 	add.w	r1, r0, #20
 801543c:	f100 0210 	add.w	r2, r0, #16
 8015440:	4618      	mov	r0, r3
 8015442:	4553      	cmp	r3, sl
 8015444:	db37      	blt.n	80154b6 <__lshift+0xbe>
 8015446:	6920      	ldr	r0, [r4, #16]
 8015448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801544c:	f104 0314 	add.w	r3, r4, #20
 8015450:	f019 091f 	ands.w	r9, r9, #31
 8015454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015458:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801545c:	d02f      	beq.n	80154be <__lshift+0xc6>
 801545e:	f1c9 0e20 	rsb	lr, r9, #32
 8015462:	468a      	mov	sl, r1
 8015464:	f04f 0c00 	mov.w	ip, #0
 8015468:	681a      	ldr	r2, [r3, #0]
 801546a:	fa02 f209 	lsl.w	r2, r2, r9
 801546e:	ea42 020c 	orr.w	r2, r2, ip
 8015472:	f84a 2b04 	str.w	r2, [sl], #4
 8015476:	f853 2b04 	ldr.w	r2, [r3], #4
 801547a:	4298      	cmp	r0, r3
 801547c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015480:	d8f2      	bhi.n	8015468 <__lshift+0x70>
 8015482:	1b03      	subs	r3, r0, r4
 8015484:	3b15      	subs	r3, #21
 8015486:	f023 0303 	bic.w	r3, r3, #3
 801548a:	3304      	adds	r3, #4
 801548c:	f104 0215 	add.w	r2, r4, #21
 8015490:	4290      	cmp	r0, r2
 8015492:	bf38      	it	cc
 8015494:	2304      	movcc	r3, #4
 8015496:	f841 c003 	str.w	ip, [r1, r3]
 801549a:	f1bc 0f00 	cmp.w	ip, #0
 801549e:	d001      	beq.n	80154a4 <__lshift+0xac>
 80154a0:	f108 0602 	add.w	r6, r8, #2
 80154a4:	3e01      	subs	r6, #1
 80154a6:	4638      	mov	r0, r7
 80154a8:	612e      	str	r6, [r5, #16]
 80154aa:	4621      	mov	r1, r4
 80154ac:	f7ff fd88 	bl	8014fc0 <_Bfree>
 80154b0:	4628      	mov	r0, r5
 80154b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80154ba:	3301      	adds	r3, #1
 80154bc:	e7c1      	b.n	8015442 <__lshift+0x4a>
 80154be:	3904      	subs	r1, #4
 80154c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80154c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80154c8:	4298      	cmp	r0, r3
 80154ca:	d8f9      	bhi.n	80154c0 <__lshift+0xc8>
 80154cc:	e7ea      	b.n	80154a4 <__lshift+0xac>
 80154ce:	bf00      	nop
 80154d0:	08017118 	.word	0x08017118
 80154d4:	080171a4 	.word	0x080171a4

080154d8 <__mcmp>:
 80154d8:	b530      	push	{r4, r5, lr}
 80154da:	6902      	ldr	r2, [r0, #16]
 80154dc:	690c      	ldr	r4, [r1, #16]
 80154de:	1b12      	subs	r2, r2, r4
 80154e0:	d10e      	bne.n	8015500 <__mcmp+0x28>
 80154e2:	f100 0314 	add.w	r3, r0, #20
 80154e6:	3114      	adds	r1, #20
 80154e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80154ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80154f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80154f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80154f8:	42a5      	cmp	r5, r4
 80154fa:	d003      	beq.n	8015504 <__mcmp+0x2c>
 80154fc:	d305      	bcc.n	801550a <__mcmp+0x32>
 80154fe:	2201      	movs	r2, #1
 8015500:	4610      	mov	r0, r2
 8015502:	bd30      	pop	{r4, r5, pc}
 8015504:	4283      	cmp	r3, r0
 8015506:	d3f3      	bcc.n	80154f0 <__mcmp+0x18>
 8015508:	e7fa      	b.n	8015500 <__mcmp+0x28>
 801550a:	f04f 32ff 	mov.w	r2, #4294967295
 801550e:	e7f7      	b.n	8015500 <__mcmp+0x28>

08015510 <__mdiff>:
 8015510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015514:	460c      	mov	r4, r1
 8015516:	4606      	mov	r6, r0
 8015518:	4611      	mov	r1, r2
 801551a:	4620      	mov	r0, r4
 801551c:	4690      	mov	r8, r2
 801551e:	f7ff ffdb 	bl	80154d8 <__mcmp>
 8015522:	1e05      	subs	r5, r0, #0
 8015524:	d110      	bne.n	8015548 <__mdiff+0x38>
 8015526:	4629      	mov	r1, r5
 8015528:	4630      	mov	r0, r6
 801552a:	f7ff fd09 	bl	8014f40 <_Balloc>
 801552e:	b930      	cbnz	r0, 801553e <__mdiff+0x2e>
 8015530:	4b3a      	ldr	r3, [pc, #232]	; (801561c <__mdiff+0x10c>)
 8015532:	4602      	mov	r2, r0
 8015534:	f240 2132 	movw	r1, #562	; 0x232
 8015538:	4839      	ldr	r0, [pc, #228]	; (8015620 <__mdiff+0x110>)
 801553a:	f000 fcb3 	bl	8015ea4 <__assert_func>
 801553e:	2301      	movs	r3, #1
 8015540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015548:	bfa4      	itt	ge
 801554a:	4643      	movge	r3, r8
 801554c:	46a0      	movge	r8, r4
 801554e:	4630      	mov	r0, r6
 8015550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015554:	bfa6      	itte	ge
 8015556:	461c      	movge	r4, r3
 8015558:	2500      	movge	r5, #0
 801555a:	2501      	movlt	r5, #1
 801555c:	f7ff fcf0 	bl	8014f40 <_Balloc>
 8015560:	b920      	cbnz	r0, 801556c <__mdiff+0x5c>
 8015562:	4b2e      	ldr	r3, [pc, #184]	; (801561c <__mdiff+0x10c>)
 8015564:	4602      	mov	r2, r0
 8015566:	f44f 7110 	mov.w	r1, #576	; 0x240
 801556a:	e7e5      	b.n	8015538 <__mdiff+0x28>
 801556c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015570:	6926      	ldr	r6, [r4, #16]
 8015572:	60c5      	str	r5, [r0, #12]
 8015574:	f104 0914 	add.w	r9, r4, #20
 8015578:	f108 0514 	add.w	r5, r8, #20
 801557c:	f100 0e14 	add.w	lr, r0, #20
 8015580:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015584:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015588:	f108 0210 	add.w	r2, r8, #16
 801558c:	46f2      	mov	sl, lr
 801558e:	2100      	movs	r1, #0
 8015590:	f859 3b04 	ldr.w	r3, [r9], #4
 8015594:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015598:	fa1f f883 	uxth.w	r8, r3
 801559c:	fa11 f18b 	uxtah	r1, r1, fp
 80155a0:	0c1b      	lsrs	r3, r3, #16
 80155a2:	eba1 0808 	sub.w	r8, r1, r8
 80155a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80155aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80155ae:	fa1f f888 	uxth.w	r8, r8
 80155b2:	1419      	asrs	r1, r3, #16
 80155b4:	454e      	cmp	r6, r9
 80155b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80155ba:	f84a 3b04 	str.w	r3, [sl], #4
 80155be:	d8e7      	bhi.n	8015590 <__mdiff+0x80>
 80155c0:	1b33      	subs	r3, r6, r4
 80155c2:	3b15      	subs	r3, #21
 80155c4:	f023 0303 	bic.w	r3, r3, #3
 80155c8:	3304      	adds	r3, #4
 80155ca:	3415      	adds	r4, #21
 80155cc:	42a6      	cmp	r6, r4
 80155ce:	bf38      	it	cc
 80155d0:	2304      	movcc	r3, #4
 80155d2:	441d      	add	r5, r3
 80155d4:	4473      	add	r3, lr
 80155d6:	469e      	mov	lr, r3
 80155d8:	462e      	mov	r6, r5
 80155da:	4566      	cmp	r6, ip
 80155dc:	d30e      	bcc.n	80155fc <__mdiff+0xec>
 80155de:	f10c 0203 	add.w	r2, ip, #3
 80155e2:	1b52      	subs	r2, r2, r5
 80155e4:	f022 0203 	bic.w	r2, r2, #3
 80155e8:	3d03      	subs	r5, #3
 80155ea:	45ac      	cmp	ip, r5
 80155ec:	bf38      	it	cc
 80155ee:	2200      	movcc	r2, #0
 80155f0:	441a      	add	r2, r3
 80155f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80155f6:	b17b      	cbz	r3, 8015618 <__mdiff+0x108>
 80155f8:	6107      	str	r7, [r0, #16]
 80155fa:	e7a3      	b.n	8015544 <__mdiff+0x34>
 80155fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8015600:	fa11 f288 	uxtah	r2, r1, r8
 8015604:	1414      	asrs	r4, r2, #16
 8015606:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801560a:	b292      	uxth	r2, r2
 801560c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015610:	f84e 2b04 	str.w	r2, [lr], #4
 8015614:	1421      	asrs	r1, r4, #16
 8015616:	e7e0      	b.n	80155da <__mdiff+0xca>
 8015618:	3f01      	subs	r7, #1
 801561a:	e7ea      	b.n	80155f2 <__mdiff+0xe2>
 801561c:	08017118 	.word	0x08017118
 8015620:	080171a4 	.word	0x080171a4

08015624 <__ulp>:
 8015624:	b082      	sub	sp, #8
 8015626:	ed8d 0b00 	vstr	d0, [sp]
 801562a:	9b01      	ldr	r3, [sp, #4]
 801562c:	4912      	ldr	r1, [pc, #72]	; (8015678 <__ulp+0x54>)
 801562e:	4019      	ands	r1, r3
 8015630:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015634:	2900      	cmp	r1, #0
 8015636:	dd05      	ble.n	8015644 <__ulp+0x20>
 8015638:	2200      	movs	r2, #0
 801563a:	460b      	mov	r3, r1
 801563c:	ec43 2b10 	vmov	d0, r2, r3
 8015640:	b002      	add	sp, #8
 8015642:	4770      	bx	lr
 8015644:	4249      	negs	r1, r1
 8015646:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801564a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801564e:	f04f 0200 	mov.w	r2, #0
 8015652:	f04f 0300 	mov.w	r3, #0
 8015656:	da04      	bge.n	8015662 <__ulp+0x3e>
 8015658:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801565c:	fa41 f300 	asr.w	r3, r1, r0
 8015660:	e7ec      	b.n	801563c <__ulp+0x18>
 8015662:	f1a0 0114 	sub.w	r1, r0, #20
 8015666:	291e      	cmp	r1, #30
 8015668:	bfda      	itte	le
 801566a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801566e:	fa20 f101 	lsrle.w	r1, r0, r1
 8015672:	2101      	movgt	r1, #1
 8015674:	460a      	mov	r2, r1
 8015676:	e7e1      	b.n	801563c <__ulp+0x18>
 8015678:	7ff00000 	.word	0x7ff00000

0801567c <__b2d>:
 801567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801567e:	6905      	ldr	r5, [r0, #16]
 8015680:	f100 0714 	add.w	r7, r0, #20
 8015684:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015688:	1f2e      	subs	r6, r5, #4
 801568a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801568e:	4620      	mov	r0, r4
 8015690:	f7ff fd48 	bl	8015124 <__hi0bits>
 8015694:	f1c0 0320 	rsb	r3, r0, #32
 8015698:	280a      	cmp	r0, #10
 801569a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015718 <__b2d+0x9c>
 801569e:	600b      	str	r3, [r1, #0]
 80156a0:	dc14      	bgt.n	80156cc <__b2d+0x50>
 80156a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80156a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80156aa:	42b7      	cmp	r7, r6
 80156ac:	ea41 030c 	orr.w	r3, r1, ip
 80156b0:	bf34      	ite	cc
 80156b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80156b6:	2100      	movcs	r1, #0
 80156b8:	3015      	adds	r0, #21
 80156ba:	fa04 f000 	lsl.w	r0, r4, r0
 80156be:	fa21 f10e 	lsr.w	r1, r1, lr
 80156c2:	ea40 0201 	orr.w	r2, r0, r1
 80156c6:	ec43 2b10 	vmov	d0, r2, r3
 80156ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156cc:	42b7      	cmp	r7, r6
 80156ce:	bf3a      	itte	cc
 80156d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80156d4:	f1a5 0608 	subcc.w	r6, r5, #8
 80156d8:	2100      	movcs	r1, #0
 80156da:	380b      	subs	r0, #11
 80156dc:	d017      	beq.n	801570e <__b2d+0x92>
 80156de:	f1c0 0c20 	rsb	ip, r0, #32
 80156e2:	fa04 f500 	lsl.w	r5, r4, r0
 80156e6:	42be      	cmp	r6, r7
 80156e8:	fa21 f40c 	lsr.w	r4, r1, ip
 80156ec:	ea45 0504 	orr.w	r5, r5, r4
 80156f0:	bf8c      	ite	hi
 80156f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80156f6:	2400      	movls	r4, #0
 80156f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80156fc:	fa01 f000 	lsl.w	r0, r1, r0
 8015700:	fa24 f40c 	lsr.w	r4, r4, ip
 8015704:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015708:	ea40 0204 	orr.w	r2, r0, r4
 801570c:	e7db      	b.n	80156c6 <__b2d+0x4a>
 801570e:	ea44 030c 	orr.w	r3, r4, ip
 8015712:	460a      	mov	r2, r1
 8015714:	e7d7      	b.n	80156c6 <__b2d+0x4a>
 8015716:	bf00      	nop
 8015718:	3ff00000 	.word	0x3ff00000

0801571c <__d2b>:
 801571c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015720:	4689      	mov	r9, r1
 8015722:	2101      	movs	r1, #1
 8015724:	ec57 6b10 	vmov	r6, r7, d0
 8015728:	4690      	mov	r8, r2
 801572a:	f7ff fc09 	bl	8014f40 <_Balloc>
 801572e:	4604      	mov	r4, r0
 8015730:	b930      	cbnz	r0, 8015740 <__d2b+0x24>
 8015732:	4602      	mov	r2, r0
 8015734:	4b25      	ldr	r3, [pc, #148]	; (80157cc <__d2b+0xb0>)
 8015736:	4826      	ldr	r0, [pc, #152]	; (80157d0 <__d2b+0xb4>)
 8015738:	f240 310a 	movw	r1, #778	; 0x30a
 801573c:	f000 fbb2 	bl	8015ea4 <__assert_func>
 8015740:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015744:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015748:	bb35      	cbnz	r5, 8015798 <__d2b+0x7c>
 801574a:	2e00      	cmp	r6, #0
 801574c:	9301      	str	r3, [sp, #4]
 801574e:	d028      	beq.n	80157a2 <__d2b+0x86>
 8015750:	4668      	mov	r0, sp
 8015752:	9600      	str	r6, [sp, #0]
 8015754:	f7ff fd06 	bl	8015164 <__lo0bits>
 8015758:	9900      	ldr	r1, [sp, #0]
 801575a:	b300      	cbz	r0, 801579e <__d2b+0x82>
 801575c:	9a01      	ldr	r2, [sp, #4]
 801575e:	f1c0 0320 	rsb	r3, r0, #32
 8015762:	fa02 f303 	lsl.w	r3, r2, r3
 8015766:	430b      	orrs	r3, r1
 8015768:	40c2      	lsrs	r2, r0
 801576a:	6163      	str	r3, [r4, #20]
 801576c:	9201      	str	r2, [sp, #4]
 801576e:	9b01      	ldr	r3, [sp, #4]
 8015770:	61a3      	str	r3, [r4, #24]
 8015772:	2b00      	cmp	r3, #0
 8015774:	bf14      	ite	ne
 8015776:	2202      	movne	r2, #2
 8015778:	2201      	moveq	r2, #1
 801577a:	6122      	str	r2, [r4, #16]
 801577c:	b1d5      	cbz	r5, 80157b4 <__d2b+0x98>
 801577e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015782:	4405      	add	r5, r0
 8015784:	f8c9 5000 	str.w	r5, [r9]
 8015788:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801578c:	f8c8 0000 	str.w	r0, [r8]
 8015790:	4620      	mov	r0, r4
 8015792:	b003      	add	sp, #12
 8015794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801579c:	e7d5      	b.n	801574a <__d2b+0x2e>
 801579e:	6161      	str	r1, [r4, #20]
 80157a0:	e7e5      	b.n	801576e <__d2b+0x52>
 80157a2:	a801      	add	r0, sp, #4
 80157a4:	f7ff fcde 	bl	8015164 <__lo0bits>
 80157a8:	9b01      	ldr	r3, [sp, #4]
 80157aa:	6163      	str	r3, [r4, #20]
 80157ac:	2201      	movs	r2, #1
 80157ae:	6122      	str	r2, [r4, #16]
 80157b0:	3020      	adds	r0, #32
 80157b2:	e7e3      	b.n	801577c <__d2b+0x60>
 80157b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80157b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80157bc:	f8c9 0000 	str.w	r0, [r9]
 80157c0:	6918      	ldr	r0, [r3, #16]
 80157c2:	f7ff fcaf 	bl	8015124 <__hi0bits>
 80157c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80157ca:	e7df      	b.n	801578c <__d2b+0x70>
 80157cc:	08017118 	.word	0x08017118
 80157d0:	080171a4 	.word	0x080171a4

080157d4 <__ratio>:
 80157d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157d8:	4688      	mov	r8, r1
 80157da:	4669      	mov	r1, sp
 80157dc:	4681      	mov	r9, r0
 80157de:	f7ff ff4d 	bl	801567c <__b2d>
 80157e2:	a901      	add	r1, sp, #4
 80157e4:	4640      	mov	r0, r8
 80157e6:	ec55 4b10 	vmov	r4, r5, d0
 80157ea:	f7ff ff47 	bl	801567c <__b2d>
 80157ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80157f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80157f6:	eba3 0c02 	sub.w	ip, r3, r2
 80157fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80157fe:	1a9b      	subs	r3, r3, r2
 8015800:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015804:	ec51 0b10 	vmov	r0, r1, d0
 8015808:	2b00      	cmp	r3, #0
 801580a:	bfd6      	itet	le
 801580c:	460a      	movle	r2, r1
 801580e:	462a      	movgt	r2, r5
 8015810:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015814:	468b      	mov	fp, r1
 8015816:	462f      	mov	r7, r5
 8015818:	bfd4      	ite	le
 801581a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801581e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015822:	4620      	mov	r0, r4
 8015824:	ee10 2a10 	vmov	r2, s0
 8015828:	465b      	mov	r3, fp
 801582a:	4639      	mov	r1, r7
 801582c:	f7eb f80e 	bl	800084c <__aeabi_ddiv>
 8015830:	ec41 0b10 	vmov	d0, r0, r1
 8015834:	b003      	add	sp, #12
 8015836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801583a <__copybits>:
 801583a:	3901      	subs	r1, #1
 801583c:	b570      	push	{r4, r5, r6, lr}
 801583e:	1149      	asrs	r1, r1, #5
 8015840:	6914      	ldr	r4, [r2, #16]
 8015842:	3101      	adds	r1, #1
 8015844:	f102 0314 	add.w	r3, r2, #20
 8015848:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801584c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015850:	1f05      	subs	r5, r0, #4
 8015852:	42a3      	cmp	r3, r4
 8015854:	d30c      	bcc.n	8015870 <__copybits+0x36>
 8015856:	1aa3      	subs	r3, r4, r2
 8015858:	3b11      	subs	r3, #17
 801585a:	f023 0303 	bic.w	r3, r3, #3
 801585e:	3211      	adds	r2, #17
 8015860:	42a2      	cmp	r2, r4
 8015862:	bf88      	it	hi
 8015864:	2300      	movhi	r3, #0
 8015866:	4418      	add	r0, r3
 8015868:	2300      	movs	r3, #0
 801586a:	4288      	cmp	r0, r1
 801586c:	d305      	bcc.n	801587a <__copybits+0x40>
 801586e:	bd70      	pop	{r4, r5, r6, pc}
 8015870:	f853 6b04 	ldr.w	r6, [r3], #4
 8015874:	f845 6f04 	str.w	r6, [r5, #4]!
 8015878:	e7eb      	b.n	8015852 <__copybits+0x18>
 801587a:	f840 3b04 	str.w	r3, [r0], #4
 801587e:	e7f4      	b.n	801586a <__copybits+0x30>

08015880 <__any_on>:
 8015880:	f100 0214 	add.w	r2, r0, #20
 8015884:	6900      	ldr	r0, [r0, #16]
 8015886:	114b      	asrs	r3, r1, #5
 8015888:	4298      	cmp	r0, r3
 801588a:	b510      	push	{r4, lr}
 801588c:	db11      	blt.n	80158b2 <__any_on+0x32>
 801588e:	dd0a      	ble.n	80158a6 <__any_on+0x26>
 8015890:	f011 011f 	ands.w	r1, r1, #31
 8015894:	d007      	beq.n	80158a6 <__any_on+0x26>
 8015896:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801589a:	fa24 f001 	lsr.w	r0, r4, r1
 801589e:	fa00 f101 	lsl.w	r1, r0, r1
 80158a2:	428c      	cmp	r4, r1
 80158a4:	d10b      	bne.n	80158be <__any_on+0x3e>
 80158a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80158aa:	4293      	cmp	r3, r2
 80158ac:	d803      	bhi.n	80158b6 <__any_on+0x36>
 80158ae:	2000      	movs	r0, #0
 80158b0:	bd10      	pop	{r4, pc}
 80158b2:	4603      	mov	r3, r0
 80158b4:	e7f7      	b.n	80158a6 <__any_on+0x26>
 80158b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80158ba:	2900      	cmp	r1, #0
 80158bc:	d0f5      	beq.n	80158aa <__any_on+0x2a>
 80158be:	2001      	movs	r0, #1
 80158c0:	e7f6      	b.n	80158b0 <__any_on+0x30>

080158c2 <__ssputs_r>:
 80158c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158c6:	688e      	ldr	r6, [r1, #8]
 80158c8:	429e      	cmp	r6, r3
 80158ca:	4682      	mov	sl, r0
 80158cc:	460c      	mov	r4, r1
 80158ce:	4690      	mov	r8, r2
 80158d0:	461f      	mov	r7, r3
 80158d2:	d838      	bhi.n	8015946 <__ssputs_r+0x84>
 80158d4:	898a      	ldrh	r2, [r1, #12]
 80158d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80158da:	d032      	beq.n	8015942 <__ssputs_r+0x80>
 80158dc:	6825      	ldr	r5, [r4, #0]
 80158de:	6909      	ldr	r1, [r1, #16]
 80158e0:	eba5 0901 	sub.w	r9, r5, r1
 80158e4:	6965      	ldr	r5, [r4, #20]
 80158e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80158ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80158ee:	3301      	adds	r3, #1
 80158f0:	444b      	add	r3, r9
 80158f2:	106d      	asrs	r5, r5, #1
 80158f4:	429d      	cmp	r5, r3
 80158f6:	bf38      	it	cc
 80158f8:	461d      	movcc	r5, r3
 80158fa:	0553      	lsls	r3, r2, #21
 80158fc:	d531      	bpl.n	8015962 <__ssputs_r+0xa0>
 80158fe:	4629      	mov	r1, r5
 8015900:	f7fc f8da 	bl	8011ab8 <_malloc_r>
 8015904:	4606      	mov	r6, r0
 8015906:	b950      	cbnz	r0, 801591e <__ssputs_r+0x5c>
 8015908:	230c      	movs	r3, #12
 801590a:	f8ca 3000 	str.w	r3, [sl]
 801590e:	89a3      	ldrh	r3, [r4, #12]
 8015910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015914:	81a3      	strh	r3, [r4, #12]
 8015916:	f04f 30ff 	mov.w	r0, #4294967295
 801591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801591e:	6921      	ldr	r1, [r4, #16]
 8015920:	464a      	mov	r2, r9
 8015922:	f7fc f817 	bl	8011954 <memcpy>
 8015926:	89a3      	ldrh	r3, [r4, #12]
 8015928:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801592c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015930:	81a3      	strh	r3, [r4, #12]
 8015932:	6126      	str	r6, [r4, #16]
 8015934:	6165      	str	r5, [r4, #20]
 8015936:	444e      	add	r6, r9
 8015938:	eba5 0509 	sub.w	r5, r5, r9
 801593c:	6026      	str	r6, [r4, #0]
 801593e:	60a5      	str	r5, [r4, #8]
 8015940:	463e      	mov	r6, r7
 8015942:	42be      	cmp	r6, r7
 8015944:	d900      	bls.n	8015948 <__ssputs_r+0x86>
 8015946:	463e      	mov	r6, r7
 8015948:	6820      	ldr	r0, [r4, #0]
 801594a:	4632      	mov	r2, r6
 801594c:	4641      	mov	r1, r8
 801594e:	f7fc f80f 	bl	8011970 <memmove>
 8015952:	68a3      	ldr	r3, [r4, #8]
 8015954:	1b9b      	subs	r3, r3, r6
 8015956:	60a3      	str	r3, [r4, #8]
 8015958:	6823      	ldr	r3, [r4, #0]
 801595a:	4433      	add	r3, r6
 801595c:	6023      	str	r3, [r4, #0]
 801595e:	2000      	movs	r0, #0
 8015960:	e7db      	b.n	801591a <__ssputs_r+0x58>
 8015962:	462a      	mov	r2, r5
 8015964:	f000 faf0 	bl	8015f48 <_realloc_r>
 8015968:	4606      	mov	r6, r0
 801596a:	2800      	cmp	r0, #0
 801596c:	d1e1      	bne.n	8015932 <__ssputs_r+0x70>
 801596e:	6921      	ldr	r1, [r4, #16]
 8015970:	4650      	mov	r0, sl
 8015972:	f7fc f835 	bl	80119e0 <_free_r>
 8015976:	e7c7      	b.n	8015908 <__ssputs_r+0x46>

08015978 <_svfiprintf_r>:
 8015978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801597c:	4698      	mov	r8, r3
 801597e:	898b      	ldrh	r3, [r1, #12]
 8015980:	061b      	lsls	r3, r3, #24
 8015982:	b09d      	sub	sp, #116	; 0x74
 8015984:	4607      	mov	r7, r0
 8015986:	460d      	mov	r5, r1
 8015988:	4614      	mov	r4, r2
 801598a:	d50e      	bpl.n	80159aa <_svfiprintf_r+0x32>
 801598c:	690b      	ldr	r3, [r1, #16]
 801598e:	b963      	cbnz	r3, 80159aa <_svfiprintf_r+0x32>
 8015990:	2140      	movs	r1, #64	; 0x40
 8015992:	f7fc f891 	bl	8011ab8 <_malloc_r>
 8015996:	6028      	str	r0, [r5, #0]
 8015998:	6128      	str	r0, [r5, #16]
 801599a:	b920      	cbnz	r0, 80159a6 <_svfiprintf_r+0x2e>
 801599c:	230c      	movs	r3, #12
 801599e:	603b      	str	r3, [r7, #0]
 80159a0:	f04f 30ff 	mov.w	r0, #4294967295
 80159a4:	e0d1      	b.n	8015b4a <_svfiprintf_r+0x1d2>
 80159a6:	2340      	movs	r3, #64	; 0x40
 80159a8:	616b      	str	r3, [r5, #20]
 80159aa:	2300      	movs	r3, #0
 80159ac:	9309      	str	r3, [sp, #36]	; 0x24
 80159ae:	2320      	movs	r3, #32
 80159b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80159b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80159b8:	2330      	movs	r3, #48	; 0x30
 80159ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015b64 <_svfiprintf_r+0x1ec>
 80159be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80159c2:	f04f 0901 	mov.w	r9, #1
 80159c6:	4623      	mov	r3, r4
 80159c8:	469a      	mov	sl, r3
 80159ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159ce:	b10a      	cbz	r2, 80159d4 <_svfiprintf_r+0x5c>
 80159d0:	2a25      	cmp	r2, #37	; 0x25
 80159d2:	d1f9      	bne.n	80159c8 <_svfiprintf_r+0x50>
 80159d4:	ebba 0b04 	subs.w	fp, sl, r4
 80159d8:	d00b      	beq.n	80159f2 <_svfiprintf_r+0x7a>
 80159da:	465b      	mov	r3, fp
 80159dc:	4622      	mov	r2, r4
 80159de:	4629      	mov	r1, r5
 80159e0:	4638      	mov	r0, r7
 80159e2:	f7ff ff6e 	bl	80158c2 <__ssputs_r>
 80159e6:	3001      	adds	r0, #1
 80159e8:	f000 80aa 	beq.w	8015b40 <_svfiprintf_r+0x1c8>
 80159ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159ee:	445a      	add	r2, fp
 80159f0:	9209      	str	r2, [sp, #36]	; 0x24
 80159f2:	f89a 3000 	ldrb.w	r3, [sl]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	f000 80a2 	beq.w	8015b40 <_svfiprintf_r+0x1c8>
 80159fc:	2300      	movs	r3, #0
 80159fe:	f04f 32ff 	mov.w	r2, #4294967295
 8015a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015a06:	f10a 0a01 	add.w	sl, sl, #1
 8015a0a:	9304      	str	r3, [sp, #16]
 8015a0c:	9307      	str	r3, [sp, #28]
 8015a0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015a12:	931a      	str	r3, [sp, #104]	; 0x68
 8015a14:	4654      	mov	r4, sl
 8015a16:	2205      	movs	r2, #5
 8015a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a1c:	4851      	ldr	r0, [pc, #324]	; (8015b64 <_svfiprintf_r+0x1ec>)
 8015a1e:	f7ea fbdf 	bl	80001e0 <memchr>
 8015a22:	9a04      	ldr	r2, [sp, #16]
 8015a24:	b9d8      	cbnz	r0, 8015a5e <_svfiprintf_r+0xe6>
 8015a26:	06d0      	lsls	r0, r2, #27
 8015a28:	bf44      	itt	mi
 8015a2a:	2320      	movmi	r3, #32
 8015a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a30:	0711      	lsls	r1, r2, #28
 8015a32:	bf44      	itt	mi
 8015a34:	232b      	movmi	r3, #43	; 0x2b
 8015a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8015a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8015a40:	d015      	beq.n	8015a6e <_svfiprintf_r+0xf6>
 8015a42:	9a07      	ldr	r2, [sp, #28]
 8015a44:	4654      	mov	r4, sl
 8015a46:	2000      	movs	r0, #0
 8015a48:	f04f 0c0a 	mov.w	ip, #10
 8015a4c:	4621      	mov	r1, r4
 8015a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a52:	3b30      	subs	r3, #48	; 0x30
 8015a54:	2b09      	cmp	r3, #9
 8015a56:	d94e      	bls.n	8015af6 <_svfiprintf_r+0x17e>
 8015a58:	b1b0      	cbz	r0, 8015a88 <_svfiprintf_r+0x110>
 8015a5a:	9207      	str	r2, [sp, #28]
 8015a5c:	e014      	b.n	8015a88 <_svfiprintf_r+0x110>
 8015a5e:	eba0 0308 	sub.w	r3, r0, r8
 8015a62:	fa09 f303 	lsl.w	r3, r9, r3
 8015a66:	4313      	orrs	r3, r2
 8015a68:	9304      	str	r3, [sp, #16]
 8015a6a:	46a2      	mov	sl, r4
 8015a6c:	e7d2      	b.n	8015a14 <_svfiprintf_r+0x9c>
 8015a6e:	9b03      	ldr	r3, [sp, #12]
 8015a70:	1d19      	adds	r1, r3, #4
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	9103      	str	r1, [sp, #12]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	bfbb      	ittet	lt
 8015a7a:	425b      	neglt	r3, r3
 8015a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8015a80:	9307      	strge	r3, [sp, #28]
 8015a82:	9307      	strlt	r3, [sp, #28]
 8015a84:	bfb8      	it	lt
 8015a86:	9204      	strlt	r2, [sp, #16]
 8015a88:	7823      	ldrb	r3, [r4, #0]
 8015a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8015a8c:	d10c      	bne.n	8015aa8 <_svfiprintf_r+0x130>
 8015a8e:	7863      	ldrb	r3, [r4, #1]
 8015a90:	2b2a      	cmp	r3, #42	; 0x2a
 8015a92:	d135      	bne.n	8015b00 <_svfiprintf_r+0x188>
 8015a94:	9b03      	ldr	r3, [sp, #12]
 8015a96:	1d1a      	adds	r2, r3, #4
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	9203      	str	r2, [sp, #12]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	bfb8      	it	lt
 8015aa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8015aa4:	3402      	adds	r4, #2
 8015aa6:	9305      	str	r3, [sp, #20]
 8015aa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015b74 <_svfiprintf_r+0x1fc>
 8015aac:	7821      	ldrb	r1, [r4, #0]
 8015aae:	2203      	movs	r2, #3
 8015ab0:	4650      	mov	r0, sl
 8015ab2:	f7ea fb95 	bl	80001e0 <memchr>
 8015ab6:	b140      	cbz	r0, 8015aca <_svfiprintf_r+0x152>
 8015ab8:	2340      	movs	r3, #64	; 0x40
 8015aba:	eba0 000a 	sub.w	r0, r0, sl
 8015abe:	fa03 f000 	lsl.w	r0, r3, r0
 8015ac2:	9b04      	ldr	r3, [sp, #16]
 8015ac4:	4303      	orrs	r3, r0
 8015ac6:	3401      	adds	r4, #1
 8015ac8:	9304      	str	r3, [sp, #16]
 8015aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ace:	4826      	ldr	r0, [pc, #152]	; (8015b68 <_svfiprintf_r+0x1f0>)
 8015ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ad4:	2206      	movs	r2, #6
 8015ad6:	f7ea fb83 	bl	80001e0 <memchr>
 8015ada:	2800      	cmp	r0, #0
 8015adc:	d038      	beq.n	8015b50 <_svfiprintf_r+0x1d8>
 8015ade:	4b23      	ldr	r3, [pc, #140]	; (8015b6c <_svfiprintf_r+0x1f4>)
 8015ae0:	bb1b      	cbnz	r3, 8015b2a <_svfiprintf_r+0x1b2>
 8015ae2:	9b03      	ldr	r3, [sp, #12]
 8015ae4:	3307      	adds	r3, #7
 8015ae6:	f023 0307 	bic.w	r3, r3, #7
 8015aea:	3308      	adds	r3, #8
 8015aec:	9303      	str	r3, [sp, #12]
 8015aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015af0:	4433      	add	r3, r6
 8015af2:	9309      	str	r3, [sp, #36]	; 0x24
 8015af4:	e767      	b.n	80159c6 <_svfiprintf_r+0x4e>
 8015af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8015afa:	460c      	mov	r4, r1
 8015afc:	2001      	movs	r0, #1
 8015afe:	e7a5      	b.n	8015a4c <_svfiprintf_r+0xd4>
 8015b00:	2300      	movs	r3, #0
 8015b02:	3401      	adds	r4, #1
 8015b04:	9305      	str	r3, [sp, #20]
 8015b06:	4619      	mov	r1, r3
 8015b08:	f04f 0c0a 	mov.w	ip, #10
 8015b0c:	4620      	mov	r0, r4
 8015b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b12:	3a30      	subs	r2, #48	; 0x30
 8015b14:	2a09      	cmp	r2, #9
 8015b16:	d903      	bls.n	8015b20 <_svfiprintf_r+0x1a8>
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d0c5      	beq.n	8015aa8 <_svfiprintf_r+0x130>
 8015b1c:	9105      	str	r1, [sp, #20]
 8015b1e:	e7c3      	b.n	8015aa8 <_svfiprintf_r+0x130>
 8015b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8015b24:	4604      	mov	r4, r0
 8015b26:	2301      	movs	r3, #1
 8015b28:	e7f0      	b.n	8015b0c <_svfiprintf_r+0x194>
 8015b2a:	ab03      	add	r3, sp, #12
 8015b2c:	9300      	str	r3, [sp, #0]
 8015b2e:	462a      	mov	r2, r5
 8015b30:	4b0f      	ldr	r3, [pc, #60]	; (8015b70 <_svfiprintf_r+0x1f8>)
 8015b32:	a904      	add	r1, sp, #16
 8015b34:	4638      	mov	r0, r7
 8015b36:	f7fc f8d3 	bl	8011ce0 <_printf_float>
 8015b3a:	1c42      	adds	r2, r0, #1
 8015b3c:	4606      	mov	r6, r0
 8015b3e:	d1d6      	bne.n	8015aee <_svfiprintf_r+0x176>
 8015b40:	89ab      	ldrh	r3, [r5, #12]
 8015b42:	065b      	lsls	r3, r3, #25
 8015b44:	f53f af2c 	bmi.w	80159a0 <_svfiprintf_r+0x28>
 8015b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b4a:	b01d      	add	sp, #116	; 0x74
 8015b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b50:	ab03      	add	r3, sp, #12
 8015b52:	9300      	str	r3, [sp, #0]
 8015b54:	462a      	mov	r2, r5
 8015b56:	4b06      	ldr	r3, [pc, #24]	; (8015b70 <_svfiprintf_r+0x1f8>)
 8015b58:	a904      	add	r1, sp, #16
 8015b5a:	4638      	mov	r0, r7
 8015b5c:	f7fc fb64 	bl	8012228 <_printf_i>
 8015b60:	e7eb      	b.n	8015b3a <_svfiprintf_r+0x1c2>
 8015b62:	bf00      	nop
 8015b64:	080172fc 	.word	0x080172fc
 8015b68:	08017306 	.word	0x08017306
 8015b6c:	08011ce1 	.word	0x08011ce1
 8015b70:	080158c3 	.word	0x080158c3
 8015b74:	08017302 	.word	0x08017302

08015b78 <__sfputc_r>:
 8015b78:	6893      	ldr	r3, [r2, #8]
 8015b7a:	3b01      	subs	r3, #1
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	b410      	push	{r4}
 8015b80:	6093      	str	r3, [r2, #8]
 8015b82:	da08      	bge.n	8015b96 <__sfputc_r+0x1e>
 8015b84:	6994      	ldr	r4, [r2, #24]
 8015b86:	42a3      	cmp	r3, r4
 8015b88:	db01      	blt.n	8015b8e <__sfputc_r+0x16>
 8015b8a:	290a      	cmp	r1, #10
 8015b8c:	d103      	bne.n	8015b96 <__sfputc_r+0x1e>
 8015b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b92:	f7fd be6f 	b.w	8013874 <__swbuf_r>
 8015b96:	6813      	ldr	r3, [r2, #0]
 8015b98:	1c58      	adds	r0, r3, #1
 8015b9a:	6010      	str	r0, [r2, #0]
 8015b9c:	7019      	strb	r1, [r3, #0]
 8015b9e:	4608      	mov	r0, r1
 8015ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ba4:	4770      	bx	lr

08015ba6 <__sfputs_r>:
 8015ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ba8:	4606      	mov	r6, r0
 8015baa:	460f      	mov	r7, r1
 8015bac:	4614      	mov	r4, r2
 8015bae:	18d5      	adds	r5, r2, r3
 8015bb0:	42ac      	cmp	r4, r5
 8015bb2:	d101      	bne.n	8015bb8 <__sfputs_r+0x12>
 8015bb4:	2000      	movs	r0, #0
 8015bb6:	e007      	b.n	8015bc8 <__sfputs_r+0x22>
 8015bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bbc:	463a      	mov	r2, r7
 8015bbe:	4630      	mov	r0, r6
 8015bc0:	f7ff ffda 	bl	8015b78 <__sfputc_r>
 8015bc4:	1c43      	adds	r3, r0, #1
 8015bc6:	d1f3      	bne.n	8015bb0 <__sfputs_r+0xa>
 8015bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015bcc <_vfiprintf_r>:
 8015bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bd0:	460d      	mov	r5, r1
 8015bd2:	b09d      	sub	sp, #116	; 0x74
 8015bd4:	4614      	mov	r4, r2
 8015bd6:	4698      	mov	r8, r3
 8015bd8:	4606      	mov	r6, r0
 8015bda:	b118      	cbz	r0, 8015be4 <_vfiprintf_r+0x18>
 8015bdc:	6983      	ldr	r3, [r0, #24]
 8015bde:	b90b      	cbnz	r3, 8015be4 <_vfiprintf_r+0x18>
 8015be0:	f7fb fde2 	bl	80117a8 <__sinit>
 8015be4:	4b89      	ldr	r3, [pc, #548]	; (8015e0c <_vfiprintf_r+0x240>)
 8015be6:	429d      	cmp	r5, r3
 8015be8:	d11b      	bne.n	8015c22 <_vfiprintf_r+0x56>
 8015bea:	6875      	ldr	r5, [r6, #4]
 8015bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015bee:	07d9      	lsls	r1, r3, #31
 8015bf0:	d405      	bmi.n	8015bfe <_vfiprintf_r+0x32>
 8015bf2:	89ab      	ldrh	r3, [r5, #12]
 8015bf4:	059a      	lsls	r2, r3, #22
 8015bf6:	d402      	bmi.n	8015bfe <_vfiprintf_r+0x32>
 8015bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015bfa:	f7fb fe98 	bl	801192e <__retarget_lock_acquire_recursive>
 8015bfe:	89ab      	ldrh	r3, [r5, #12]
 8015c00:	071b      	lsls	r3, r3, #28
 8015c02:	d501      	bpl.n	8015c08 <_vfiprintf_r+0x3c>
 8015c04:	692b      	ldr	r3, [r5, #16]
 8015c06:	b9eb      	cbnz	r3, 8015c44 <_vfiprintf_r+0x78>
 8015c08:	4629      	mov	r1, r5
 8015c0a:	4630      	mov	r0, r6
 8015c0c:	f7fd fe96 	bl	801393c <__swsetup_r>
 8015c10:	b1c0      	cbz	r0, 8015c44 <_vfiprintf_r+0x78>
 8015c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c14:	07dc      	lsls	r4, r3, #31
 8015c16:	d50e      	bpl.n	8015c36 <_vfiprintf_r+0x6a>
 8015c18:	f04f 30ff 	mov.w	r0, #4294967295
 8015c1c:	b01d      	add	sp, #116	; 0x74
 8015c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c22:	4b7b      	ldr	r3, [pc, #492]	; (8015e10 <_vfiprintf_r+0x244>)
 8015c24:	429d      	cmp	r5, r3
 8015c26:	d101      	bne.n	8015c2c <_vfiprintf_r+0x60>
 8015c28:	68b5      	ldr	r5, [r6, #8]
 8015c2a:	e7df      	b.n	8015bec <_vfiprintf_r+0x20>
 8015c2c:	4b79      	ldr	r3, [pc, #484]	; (8015e14 <_vfiprintf_r+0x248>)
 8015c2e:	429d      	cmp	r5, r3
 8015c30:	bf08      	it	eq
 8015c32:	68f5      	ldreq	r5, [r6, #12]
 8015c34:	e7da      	b.n	8015bec <_vfiprintf_r+0x20>
 8015c36:	89ab      	ldrh	r3, [r5, #12]
 8015c38:	0598      	lsls	r0, r3, #22
 8015c3a:	d4ed      	bmi.n	8015c18 <_vfiprintf_r+0x4c>
 8015c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c3e:	f7fb fe77 	bl	8011930 <__retarget_lock_release_recursive>
 8015c42:	e7e9      	b.n	8015c18 <_vfiprintf_r+0x4c>
 8015c44:	2300      	movs	r3, #0
 8015c46:	9309      	str	r3, [sp, #36]	; 0x24
 8015c48:	2320      	movs	r3, #32
 8015c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c52:	2330      	movs	r3, #48	; 0x30
 8015c54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015e18 <_vfiprintf_r+0x24c>
 8015c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015c5c:	f04f 0901 	mov.w	r9, #1
 8015c60:	4623      	mov	r3, r4
 8015c62:	469a      	mov	sl, r3
 8015c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c68:	b10a      	cbz	r2, 8015c6e <_vfiprintf_r+0xa2>
 8015c6a:	2a25      	cmp	r2, #37	; 0x25
 8015c6c:	d1f9      	bne.n	8015c62 <_vfiprintf_r+0x96>
 8015c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8015c72:	d00b      	beq.n	8015c8c <_vfiprintf_r+0xc0>
 8015c74:	465b      	mov	r3, fp
 8015c76:	4622      	mov	r2, r4
 8015c78:	4629      	mov	r1, r5
 8015c7a:	4630      	mov	r0, r6
 8015c7c:	f7ff ff93 	bl	8015ba6 <__sfputs_r>
 8015c80:	3001      	adds	r0, #1
 8015c82:	f000 80aa 	beq.w	8015dda <_vfiprintf_r+0x20e>
 8015c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c88:	445a      	add	r2, fp
 8015c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8015c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	f000 80a2 	beq.w	8015dda <_vfiprintf_r+0x20e>
 8015c96:	2300      	movs	r3, #0
 8015c98:	f04f 32ff 	mov.w	r2, #4294967295
 8015c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ca0:	f10a 0a01 	add.w	sl, sl, #1
 8015ca4:	9304      	str	r3, [sp, #16]
 8015ca6:	9307      	str	r3, [sp, #28]
 8015ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015cac:	931a      	str	r3, [sp, #104]	; 0x68
 8015cae:	4654      	mov	r4, sl
 8015cb0:	2205      	movs	r2, #5
 8015cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cb6:	4858      	ldr	r0, [pc, #352]	; (8015e18 <_vfiprintf_r+0x24c>)
 8015cb8:	f7ea fa92 	bl	80001e0 <memchr>
 8015cbc:	9a04      	ldr	r2, [sp, #16]
 8015cbe:	b9d8      	cbnz	r0, 8015cf8 <_vfiprintf_r+0x12c>
 8015cc0:	06d1      	lsls	r1, r2, #27
 8015cc2:	bf44      	itt	mi
 8015cc4:	2320      	movmi	r3, #32
 8015cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015cca:	0713      	lsls	r3, r2, #28
 8015ccc:	bf44      	itt	mi
 8015cce:	232b      	movmi	r3, #43	; 0x2b
 8015cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8015cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8015cda:	d015      	beq.n	8015d08 <_vfiprintf_r+0x13c>
 8015cdc:	9a07      	ldr	r2, [sp, #28]
 8015cde:	4654      	mov	r4, sl
 8015ce0:	2000      	movs	r0, #0
 8015ce2:	f04f 0c0a 	mov.w	ip, #10
 8015ce6:	4621      	mov	r1, r4
 8015ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015cec:	3b30      	subs	r3, #48	; 0x30
 8015cee:	2b09      	cmp	r3, #9
 8015cf0:	d94e      	bls.n	8015d90 <_vfiprintf_r+0x1c4>
 8015cf2:	b1b0      	cbz	r0, 8015d22 <_vfiprintf_r+0x156>
 8015cf4:	9207      	str	r2, [sp, #28]
 8015cf6:	e014      	b.n	8015d22 <_vfiprintf_r+0x156>
 8015cf8:	eba0 0308 	sub.w	r3, r0, r8
 8015cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8015d00:	4313      	orrs	r3, r2
 8015d02:	9304      	str	r3, [sp, #16]
 8015d04:	46a2      	mov	sl, r4
 8015d06:	e7d2      	b.n	8015cae <_vfiprintf_r+0xe2>
 8015d08:	9b03      	ldr	r3, [sp, #12]
 8015d0a:	1d19      	adds	r1, r3, #4
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	9103      	str	r1, [sp, #12]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	bfbb      	ittet	lt
 8015d14:	425b      	neglt	r3, r3
 8015d16:	f042 0202 	orrlt.w	r2, r2, #2
 8015d1a:	9307      	strge	r3, [sp, #28]
 8015d1c:	9307      	strlt	r3, [sp, #28]
 8015d1e:	bfb8      	it	lt
 8015d20:	9204      	strlt	r2, [sp, #16]
 8015d22:	7823      	ldrb	r3, [r4, #0]
 8015d24:	2b2e      	cmp	r3, #46	; 0x2e
 8015d26:	d10c      	bne.n	8015d42 <_vfiprintf_r+0x176>
 8015d28:	7863      	ldrb	r3, [r4, #1]
 8015d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8015d2c:	d135      	bne.n	8015d9a <_vfiprintf_r+0x1ce>
 8015d2e:	9b03      	ldr	r3, [sp, #12]
 8015d30:	1d1a      	adds	r2, r3, #4
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	9203      	str	r2, [sp, #12]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	bfb8      	it	lt
 8015d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8015d3e:	3402      	adds	r4, #2
 8015d40:	9305      	str	r3, [sp, #20]
 8015d42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015e28 <_vfiprintf_r+0x25c>
 8015d46:	7821      	ldrb	r1, [r4, #0]
 8015d48:	2203      	movs	r2, #3
 8015d4a:	4650      	mov	r0, sl
 8015d4c:	f7ea fa48 	bl	80001e0 <memchr>
 8015d50:	b140      	cbz	r0, 8015d64 <_vfiprintf_r+0x198>
 8015d52:	2340      	movs	r3, #64	; 0x40
 8015d54:	eba0 000a 	sub.w	r0, r0, sl
 8015d58:	fa03 f000 	lsl.w	r0, r3, r0
 8015d5c:	9b04      	ldr	r3, [sp, #16]
 8015d5e:	4303      	orrs	r3, r0
 8015d60:	3401      	adds	r4, #1
 8015d62:	9304      	str	r3, [sp, #16]
 8015d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d68:	482c      	ldr	r0, [pc, #176]	; (8015e1c <_vfiprintf_r+0x250>)
 8015d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015d6e:	2206      	movs	r2, #6
 8015d70:	f7ea fa36 	bl	80001e0 <memchr>
 8015d74:	2800      	cmp	r0, #0
 8015d76:	d03f      	beq.n	8015df8 <_vfiprintf_r+0x22c>
 8015d78:	4b29      	ldr	r3, [pc, #164]	; (8015e20 <_vfiprintf_r+0x254>)
 8015d7a:	bb1b      	cbnz	r3, 8015dc4 <_vfiprintf_r+0x1f8>
 8015d7c:	9b03      	ldr	r3, [sp, #12]
 8015d7e:	3307      	adds	r3, #7
 8015d80:	f023 0307 	bic.w	r3, r3, #7
 8015d84:	3308      	adds	r3, #8
 8015d86:	9303      	str	r3, [sp, #12]
 8015d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d8a:	443b      	add	r3, r7
 8015d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8015d8e:	e767      	b.n	8015c60 <_vfiprintf_r+0x94>
 8015d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d94:	460c      	mov	r4, r1
 8015d96:	2001      	movs	r0, #1
 8015d98:	e7a5      	b.n	8015ce6 <_vfiprintf_r+0x11a>
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	3401      	adds	r4, #1
 8015d9e:	9305      	str	r3, [sp, #20]
 8015da0:	4619      	mov	r1, r3
 8015da2:	f04f 0c0a 	mov.w	ip, #10
 8015da6:	4620      	mov	r0, r4
 8015da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015dac:	3a30      	subs	r2, #48	; 0x30
 8015dae:	2a09      	cmp	r2, #9
 8015db0:	d903      	bls.n	8015dba <_vfiprintf_r+0x1ee>
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d0c5      	beq.n	8015d42 <_vfiprintf_r+0x176>
 8015db6:	9105      	str	r1, [sp, #20]
 8015db8:	e7c3      	b.n	8015d42 <_vfiprintf_r+0x176>
 8015dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8015dbe:	4604      	mov	r4, r0
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	e7f0      	b.n	8015da6 <_vfiprintf_r+0x1da>
 8015dc4:	ab03      	add	r3, sp, #12
 8015dc6:	9300      	str	r3, [sp, #0]
 8015dc8:	462a      	mov	r2, r5
 8015dca:	4b16      	ldr	r3, [pc, #88]	; (8015e24 <_vfiprintf_r+0x258>)
 8015dcc:	a904      	add	r1, sp, #16
 8015dce:	4630      	mov	r0, r6
 8015dd0:	f7fb ff86 	bl	8011ce0 <_printf_float>
 8015dd4:	4607      	mov	r7, r0
 8015dd6:	1c78      	adds	r0, r7, #1
 8015dd8:	d1d6      	bne.n	8015d88 <_vfiprintf_r+0x1bc>
 8015dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ddc:	07d9      	lsls	r1, r3, #31
 8015dde:	d405      	bmi.n	8015dec <_vfiprintf_r+0x220>
 8015de0:	89ab      	ldrh	r3, [r5, #12]
 8015de2:	059a      	lsls	r2, r3, #22
 8015de4:	d402      	bmi.n	8015dec <_vfiprintf_r+0x220>
 8015de6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015de8:	f7fb fda2 	bl	8011930 <__retarget_lock_release_recursive>
 8015dec:	89ab      	ldrh	r3, [r5, #12]
 8015dee:	065b      	lsls	r3, r3, #25
 8015df0:	f53f af12 	bmi.w	8015c18 <_vfiprintf_r+0x4c>
 8015df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015df6:	e711      	b.n	8015c1c <_vfiprintf_r+0x50>
 8015df8:	ab03      	add	r3, sp, #12
 8015dfa:	9300      	str	r3, [sp, #0]
 8015dfc:	462a      	mov	r2, r5
 8015dfe:	4b09      	ldr	r3, [pc, #36]	; (8015e24 <_vfiprintf_r+0x258>)
 8015e00:	a904      	add	r1, sp, #16
 8015e02:	4630      	mov	r0, r6
 8015e04:	f7fc fa10 	bl	8012228 <_printf_i>
 8015e08:	e7e4      	b.n	8015dd4 <_vfiprintf_r+0x208>
 8015e0a:	bf00      	nop
 8015e0c:	08016ec4 	.word	0x08016ec4
 8015e10:	08016ee4 	.word	0x08016ee4
 8015e14:	08016ea4 	.word	0x08016ea4
 8015e18:	080172fc 	.word	0x080172fc
 8015e1c:	08017306 	.word	0x08017306
 8015e20:	08011ce1 	.word	0x08011ce1
 8015e24:	08015ba7 	.word	0x08015ba7
 8015e28:	08017302 	.word	0x08017302

08015e2c <_read_r>:
 8015e2c:	b538      	push	{r3, r4, r5, lr}
 8015e2e:	4d07      	ldr	r5, [pc, #28]	; (8015e4c <_read_r+0x20>)
 8015e30:	4604      	mov	r4, r0
 8015e32:	4608      	mov	r0, r1
 8015e34:	4611      	mov	r1, r2
 8015e36:	2200      	movs	r2, #0
 8015e38:	602a      	str	r2, [r5, #0]
 8015e3a:	461a      	mov	r2, r3
 8015e3c:	f7f2 fd2c 	bl	8008898 <_read>
 8015e40:	1c43      	adds	r3, r0, #1
 8015e42:	d102      	bne.n	8015e4a <_read_r+0x1e>
 8015e44:	682b      	ldr	r3, [r5, #0]
 8015e46:	b103      	cbz	r3, 8015e4a <_read_r+0x1e>
 8015e48:	6023      	str	r3, [r4, #0]
 8015e4a:	bd38      	pop	{r3, r4, r5, pc}
 8015e4c:	2000252c 	.word	0x2000252c

08015e50 <nan>:
 8015e50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015e58 <nan+0x8>
 8015e54:	4770      	bx	lr
 8015e56:	bf00      	nop
 8015e58:	00000000 	.word	0x00000000
 8015e5c:	7ff80000 	.word	0x7ff80000

08015e60 <strncmp>:
 8015e60:	b510      	push	{r4, lr}
 8015e62:	b17a      	cbz	r2, 8015e84 <strncmp+0x24>
 8015e64:	4603      	mov	r3, r0
 8015e66:	3901      	subs	r1, #1
 8015e68:	1884      	adds	r4, r0, r2
 8015e6a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015e6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015e72:	4290      	cmp	r0, r2
 8015e74:	d101      	bne.n	8015e7a <strncmp+0x1a>
 8015e76:	42a3      	cmp	r3, r4
 8015e78:	d101      	bne.n	8015e7e <strncmp+0x1e>
 8015e7a:	1a80      	subs	r0, r0, r2
 8015e7c:	bd10      	pop	{r4, pc}
 8015e7e:	2800      	cmp	r0, #0
 8015e80:	d1f3      	bne.n	8015e6a <strncmp+0xa>
 8015e82:	e7fa      	b.n	8015e7a <strncmp+0x1a>
 8015e84:	4610      	mov	r0, r2
 8015e86:	e7f9      	b.n	8015e7c <strncmp+0x1c>

08015e88 <__ascii_wctomb>:
 8015e88:	b149      	cbz	r1, 8015e9e <__ascii_wctomb+0x16>
 8015e8a:	2aff      	cmp	r2, #255	; 0xff
 8015e8c:	bf85      	ittet	hi
 8015e8e:	238a      	movhi	r3, #138	; 0x8a
 8015e90:	6003      	strhi	r3, [r0, #0]
 8015e92:	700a      	strbls	r2, [r1, #0]
 8015e94:	f04f 30ff 	movhi.w	r0, #4294967295
 8015e98:	bf98      	it	ls
 8015e9a:	2001      	movls	r0, #1
 8015e9c:	4770      	bx	lr
 8015e9e:	4608      	mov	r0, r1
 8015ea0:	4770      	bx	lr
	...

08015ea4 <__assert_func>:
 8015ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015ea6:	4614      	mov	r4, r2
 8015ea8:	461a      	mov	r2, r3
 8015eaa:	4b09      	ldr	r3, [pc, #36]	; (8015ed0 <__assert_func+0x2c>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	4605      	mov	r5, r0
 8015eb0:	68d8      	ldr	r0, [r3, #12]
 8015eb2:	b14c      	cbz	r4, 8015ec8 <__assert_func+0x24>
 8015eb4:	4b07      	ldr	r3, [pc, #28]	; (8015ed4 <__assert_func+0x30>)
 8015eb6:	9100      	str	r1, [sp, #0]
 8015eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015ebc:	4906      	ldr	r1, [pc, #24]	; (8015ed8 <__assert_func+0x34>)
 8015ebe:	462b      	mov	r3, r5
 8015ec0:	f000 f80e 	bl	8015ee0 <fiprintf>
 8015ec4:	f000 f86f 	bl	8015fa6 <abort>
 8015ec8:	4b04      	ldr	r3, [pc, #16]	; (8015edc <__assert_func+0x38>)
 8015eca:	461c      	mov	r4, r3
 8015ecc:	e7f3      	b.n	8015eb6 <__assert_func+0x12>
 8015ece:	bf00      	nop
 8015ed0:	200004d0 	.word	0x200004d0
 8015ed4:	0801730d 	.word	0x0801730d
 8015ed8:	0801731a 	.word	0x0801731a
 8015edc:	08017348 	.word	0x08017348

08015ee0 <fiprintf>:
 8015ee0:	b40e      	push	{r1, r2, r3}
 8015ee2:	b503      	push	{r0, r1, lr}
 8015ee4:	4601      	mov	r1, r0
 8015ee6:	ab03      	add	r3, sp, #12
 8015ee8:	4805      	ldr	r0, [pc, #20]	; (8015f00 <fiprintf+0x20>)
 8015eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8015eee:	6800      	ldr	r0, [r0, #0]
 8015ef0:	9301      	str	r3, [sp, #4]
 8015ef2:	f7ff fe6b 	bl	8015bcc <_vfiprintf_r>
 8015ef6:	b002      	add	sp, #8
 8015ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015efc:	b003      	add	sp, #12
 8015efe:	4770      	bx	lr
 8015f00:	200004d0 	.word	0x200004d0

08015f04 <_fstat_r>:
 8015f04:	b538      	push	{r3, r4, r5, lr}
 8015f06:	4d07      	ldr	r5, [pc, #28]	; (8015f24 <_fstat_r+0x20>)
 8015f08:	2300      	movs	r3, #0
 8015f0a:	4604      	mov	r4, r0
 8015f0c:	4608      	mov	r0, r1
 8015f0e:	4611      	mov	r1, r2
 8015f10:	602b      	str	r3, [r5, #0]
 8015f12:	f7f2 fd06 	bl	8008922 <_fstat>
 8015f16:	1c43      	adds	r3, r0, #1
 8015f18:	d102      	bne.n	8015f20 <_fstat_r+0x1c>
 8015f1a:	682b      	ldr	r3, [r5, #0]
 8015f1c:	b103      	cbz	r3, 8015f20 <_fstat_r+0x1c>
 8015f1e:	6023      	str	r3, [r4, #0]
 8015f20:	bd38      	pop	{r3, r4, r5, pc}
 8015f22:	bf00      	nop
 8015f24:	2000252c 	.word	0x2000252c

08015f28 <_isatty_r>:
 8015f28:	b538      	push	{r3, r4, r5, lr}
 8015f2a:	4d06      	ldr	r5, [pc, #24]	; (8015f44 <_isatty_r+0x1c>)
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	4604      	mov	r4, r0
 8015f30:	4608      	mov	r0, r1
 8015f32:	602b      	str	r3, [r5, #0]
 8015f34:	f7f2 fd05 	bl	8008942 <_isatty>
 8015f38:	1c43      	adds	r3, r0, #1
 8015f3a:	d102      	bne.n	8015f42 <_isatty_r+0x1a>
 8015f3c:	682b      	ldr	r3, [r5, #0]
 8015f3e:	b103      	cbz	r3, 8015f42 <_isatty_r+0x1a>
 8015f40:	6023      	str	r3, [r4, #0]
 8015f42:	bd38      	pop	{r3, r4, r5, pc}
 8015f44:	2000252c 	.word	0x2000252c

08015f48 <_realloc_r>:
 8015f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f4c:	4680      	mov	r8, r0
 8015f4e:	4614      	mov	r4, r2
 8015f50:	460e      	mov	r6, r1
 8015f52:	b921      	cbnz	r1, 8015f5e <_realloc_r+0x16>
 8015f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f58:	4611      	mov	r1, r2
 8015f5a:	f7fb bdad 	b.w	8011ab8 <_malloc_r>
 8015f5e:	b92a      	cbnz	r2, 8015f6c <_realloc_r+0x24>
 8015f60:	f7fb fd3e 	bl	80119e0 <_free_r>
 8015f64:	4625      	mov	r5, r4
 8015f66:	4628      	mov	r0, r5
 8015f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f6c:	f000 f822 	bl	8015fb4 <_malloc_usable_size_r>
 8015f70:	4284      	cmp	r4, r0
 8015f72:	4607      	mov	r7, r0
 8015f74:	d802      	bhi.n	8015f7c <_realloc_r+0x34>
 8015f76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015f7a:	d812      	bhi.n	8015fa2 <_realloc_r+0x5a>
 8015f7c:	4621      	mov	r1, r4
 8015f7e:	4640      	mov	r0, r8
 8015f80:	f7fb fd9a 	bl	8011ab8 <_malloc_r>
 8015f84:	4605      	mov	r5, r0
 8015f86:	2800      	cmp	r0, #0
 8015f88:	d0ed      	beq.n	8015f66 <_realloc_r+0x1e>
 8015f8a:	42bc      	cmp	r4, r7
 8015f8c:	4622      	mov	r2, r4
 8015f8e:	4631      	mov	r1, r6
 8015f90:	bf28      	it	cs
 8015f92:	463a      	movcs	r2, r7
 8015f94:	f7fb fcde 	bl	8011954 <memcpy>
 8015f98:	4631      	mov	r1, r6
 8015f9a:	4640      	mov	r0, r8
 8015f9c:	f7fb fd20 	bl	80119e0 <_free_r>
 8015fa0:	e7e1      	b.n	8015f66 <_realloc_r+0x1e>
 8015fa2:	4635      	mov	r5, r6
 8015fa4:	e7df      	b.n	8015f66 <_realloc_r+0x1e>

08015fa6 <abort>:
 8015fa6:	b508      	push	{r3, lr}
 8015fa8:	2006      	movs	r0, #6
 8015faa:	f000 f833 	bl	8016014 <raise>
 8015fae:	2001      	movs	r0, #1
 8015fb0:	f7f2 fc68 	bl	8008884 <_exit>

08015fb4 <_malloc_usable_size_r>:
 8015fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fb8:	1f18      	subs	r0, r3, #4
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	bfbc      	itt	lt
 8015fbe:	580b      	ldrlt	r3, [r1, r0]
 8015fc0:	18c0      	addlt	r0, r0, r3
 8015fc2:	4770      	bx	lr

08015fc4 <_raise_r>:
 8015fc4:	291f      	cmp	r1, #31
 8015fc6:	b538      	push	{r3, r4, r5, lr}
 8015fc8:	4604      	mov	r4, r0
 8015fca:	460d      	mov	r5, r1
 8015fcc:	d904      	bls.n	8015fd8 <_raise_r+0x14>
 8015fce:	2316      	movs	r3, #22
 8015fd0:	6003      	str	r3, [r0, #0]
 8015fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8015fd6:	bd38      	pop	{r3, r4, r5, pc}
 8015fd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015fda:	b112      	cbz	r2, 8015fe2 <_raise_r+0x1e>
 8015fdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015fe0:	b94b      	cbnz	r3, 8015ff6 <_raise_r+0x32>
 8015fe2:	4620      	mov	r0, r4
 8015fe4:	f000 f830 	bl	8016048 <_getpid_r>
 8015fe8:	462a      	mov	r2, r5
 8015fea:	4601      	mov	r1, r0
 8015fec:	4620      	mov	r0, r4
 8015fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ff2:	f000 b817 	b.w	8016024 <_kill_r>
 8015ff6:	2b01      	cmp	r3, #1
 8015ff8:	d00a      	beq.n	8016010 <_raise_r+0x4c>
 8015ffa:	1c59      	adds	r1, r3, #1
 8015ffc:	d103      	bne.n	8016006 <_raise_r+0x42>
 8015ffe:	2316      	movs	r3, #22
 8016000:	6003      	str	r3, [r0, #0]
 8016002:	2001      	movs	r0, #1
 8016004:	e7e7      	b.n	8015fd6 <_raise_r+0x12>
 8016006:	2400      	movs	r4, #0
 8016008:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801600c:	4628      	mov	r0, r5
 801600e:	4798      	blx	r3
 8016010:	2000      	movs	r0, #0
 8016012:	e7e0      	b.n	8015fd6 <_raise_r+0x12>

08016014 <raise>:
 8016014:	4b02      	ldr	r3, [pc, #8]	; (8016020 <raise+0xc>)
 8016016:	4601      	mov	r1, r0
 8016018:	6818      	ldr	r0, [r3, #0]
 801601a:	f7ff bfd3 	b.w	8015fc4 <_raise_r>
 801601e:	bf00      	nop
 8016020:	200004d0 	.word	0x200004d0

08016024 <_kill_r>:
 8016024:	b538      	push	{r3, r4, r5, lr}
 8016026:	4d07      	ldr	r5, [pc, #28]	; (8016044 <_kill_r+0x20>)
 8016028:	2300      	movs	r3, #0
 801602a:	4604      	mov	r4, r0
 801602c:	4608      	mov	r0, r1
 801602e:	4611      	mov	r1, r2
 8016030:	602b      	str	r3, [r5, #0]
 8016032:	f7f2 fc17 	bl	8008864 <_kill>
 8016036:	1c43      	adds	r3, r0, #1
 8016038:	d102      	bne.n	8016040 <_kill_r+0x1c>
 801603a:	682b      	ldr	r3, [r5, #0]
 801603c:	b103      	cbz	r3, 8016040 <_kill_r+0x1c>
 801603e:	6023      	str	r3, [r4, #0]
 8016040:	bd38      	pop	{r3, r4, r5, pc}
 8016042:	bf00      	nop
 8016044:	2000252c 	.word	0x2000252c

08016048 <_getpid_r>:
 8016048:	f7f2 bc04 	b.w	8008854 <_getpid>

0801604c <atan2>:
 801604c:	f000 b800 	b.w	8016050 <__ieee754_atan2>

08016050 <__ieee754_atan2>:
 8016050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016054:	ec57 6b11 	vmov	r6, r7, d1
 8016058:	4273      	negs	r3, r6
 801605a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80161e0 <__ieee754_atan2+0x190>
 801605e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8016062:	4333      	orrs	r3, r6
 8016064:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8016068:	4573      	cmp	r3, lr
 801606a:	ec51 0b10 	vmov	r0, r1, d0
 801606e:	ee11 8a10 	vmov	r8, s2
 8016072:	d80a      	bhi.n	801608a <__ieee754_atan2+0x3a>
 8016074:	4244      	negs	r4, r0
 8016076:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801607a:	4304      	orrs	r4, r0
 801607c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8016080:	4574      	cmp	r4, lr
 8016082:	ee10 9a10 	vmov	r9, s0
 8016086:	468c      	mov	ip, r1
 8016088:	d907      	bls.n	801609a <__ieee754_atan2+0x4a>
 801608a:	4632      	mov	r2, r6
 801608c:	463b      	mov	r3, r7
 801608e:	f7ea f8fd 	bl	800028c <__adddf3>
 8016092:	ec41 0b10 	vmov	d0, r0, r1
 8016096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801609a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801609e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80160a2:	4334      	orrs	r4, r6
 80160a4:	d103      	bne.n	80160ae <__ieee754_atan2+0x5e>
 80160a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160aa:	f000 b89d 	b.w	80161e8 <atan>
 80160ae:	17bc      	asrs	r4, r7, #30
 80160b0:	f004 0402 	and.w	r4, r4, #2
 80160b4:	ea53 0909 	orrs.w	r9, r3, r9
 80160b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80160bc:	d107      	bne.n	80160ce <__ieee754_atan2+0x7e>
 80160be:	2c02      	cmp	r4, #2
 80160c0:	d060      	beq.n	8016184 <__ieee754_atan2+0x134>
 80160c2:	2c03      	cmp	r4, #3
 80160c4:	d1e5      	bne.n	8016092 <__ieee754_atan2+0x42>
 80160c6:	a142      	add	r1, pc, #264	; (adr r1, 80161d0 <__ieee754_atan2+0x180>)
 80160c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160cc:	e7e1      	b.n	8016092 <__ieee754_atan2+0x42>
 80160ce:	ea52 0808 	orrs.w	r8, r2, r8
 80160d2:	d106      	bne.n	80160e2 <__ieee754_atan2+0x92>
 80160d4:	f1bc 0f00 	cmp.w	ip, #0
 80160d8:	da5f      	bge.n	801619a <__ieee754_atan2+0x14a>
 80160da:	a13f      	add	r1, pc, #252	; (adr r1, 80161d8 <__ieee754_atan2+0x188>)
 80160dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160e0:	e7d7      	b.n	8016092 <__ieee754_atan2+0x42>
 80160e2:	4572      	cmp	r2, lr
 80160e4:	d10f      	bne.n	8016106 <__ieee754_atan2+0xb6>
 80160e6:	4293      	cmp	r3, r2
 80160e8:	f104 34ff 	add.w	r4, r4, #4294967295
 80160ec:	d107      	bne.n	80160fe <__ieee754_atan2+0xae>
 80160ee:	2c02      	cmp	r4, #2
 80160f0:	d84c      	bhi.n	801618c <__ieee754_atan2+0x13c>
 80160f2:	4b35      	ldr	r3, [pc, #212]	; (80161c8 <__ieee754_atan2+0x178>)
 80160f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80160f8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80160fc:	e7c9      	b.n	8016092 <__ieee754_atan2+0x42>
 80160fe:	2c02      	cmp	r4, #2
 8016100:	d848      	bhi.n	8016194 <__ieee754_atan2+0x144>
 8016102:	4b32      	ldr	r3, [pc, #200]	; (80161cc <__ieee754_atan2+0x17c>)
 8016104:	e7f6      	b.n	80160f4 <__ieee754_atan2+0xa4>
 8016106:	4573      	cmp	r3, lr
 8016108:	d0e4      	beq.n	80160d4 <__ieee754_atan2+0x84>
 801610a:	1a9b      	subs	r3, r3, r2
 801610c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8016110:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016114:	da1e      	bge.n	8016154 <__ieee754_atan2+0x104>
 8016116:	2f00      	cmp	r7, #0
 8016118:	da01      	bge.n	801611e <__ieee754_atan2+0xce>
 801611a:	323c      	adds	r2, #60	; 0x3c
 801611c:	db1e      	blt.n	801615c <__ieee754_atan2+0x10c>
 801611e:	4632      	mov	r2, r6
 8016120:	463b      	mov	r3, r7
 8016122:	f7ea fb93 	bl	800084c <__aeabi_ddiv>
 8016126:	ec41 0b10 	vmov	d0, r0, r1
 801612a:	f000 f9fd 	bl	8016528 <fabs>
 801612e:	f000 f85b 	bl	80161e8 <atan>
 8016132:	ec51 0b10 	vmov	r0, r1, d0
 8016136:	2c01      	cmp	r4, #1
 8016138:	d013      	beq.n	8016162 <__ieee754_atan2+0x112>
 801613a:	2c02      	cmp	r4, #2
 801613c:	d015      	beq.n	801616a <__ieee754_atan2+0x11a>
 801613e:	2c00      	cmp	r4, #0
 8016140:	d0a7      	beq.n	8016092 <__ieee754_atan2+0x42>
 8016142:	a319      	add	r3, pc, #100	; (adr r3, 80161a8 <__ieee754_atan2+0x158>)
 8016144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016148:	f7ea f89e 	bl	8000288 <__aeabi_dsub>
 801614c:	a318      	add	r3, pc, #96	; (adr r3, 80161b0 <__ieee754_atan2+0x160>)
 801614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016152:	e014      	b.n	801617e <__ieee754_atan2+0x12e>
 8016154:	a118      	add	r1, pc, #96	; (adr r1, 80161b8 <__ieee754_atan2+0x168>)
 8016156:	e9d1 0100 	ldrd	r0, r1, [r1]
 801615a:	e7ec      	b.n	8016136 <__ieee754_atan2+0xe6>
 801615c:	2000      	movs	r0, #0
 801615e:	2100      	movs	r1, #0
 8016160:	e7e9      	b.n	8016136 <__ieee754_atan2+0xe6>
 8016162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016166:	4619      	mov	r1, r3
 8016168:	e793      	b.n	8016092 <__ieee754_atan2+0x42>
 801616a:	a30f      	add	r3, pc, #60	; (adr r3, 80161a8 <__ieee754_atan2+0x158>)
 801616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016170:	f7ea f88a 	bl	8000288 <__aeabi_dsub>
 8016174:	4602      	mov	r2, r0
 8016176:	460b      	mov	r3, r1
 8016178:	a10d      	add	r1, pc, #52	; (adr r1, 80161b0 <__ieee754_atan2+0x160>)
 801617a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801617e:	f7ea f883 	bl	8000288 <__aeabi_dsub>
 8016182:	e786      	b.n	8016092 <__ieee754_atan2+0x42>
 8016184:	a10a      	add	r1, pc, #40	; (adr r1, 80161b0 <__ieee754_atan2+0x160>)
 8016186:	e9d1 0100 	ldrd	r0, r1, [r1]
 801618a:	e782      	b.n	8016092 <__ieee754_atan2+0x42>
 801618c:	a10c      	add	r1, pc, #48	; (adr r1, 80161c0 <__ieee754_atan2+0x170>)
 801618e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016192:	e77e      	b.n	8016092 <__ieee754_atan2+0x42>
 8016194:	2000      	movs	r0, #0
 8016196:	2100      	movs	r1, #0
 8016198:	e77b      	b.n	8016092 <__ieee754_atan2+0x42>
 801619a:	a107      	add	r1, pc, #28	; (adr r1, 80161b8 <__ieee754_atan2+0x168>)
 801619c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161a0:	e777      	b.n	8016092 <__ieee754_atan2+0x42>
 80161a2:	bf00      	nop
 80161a4:	f3af 8000 	nop.w
 80161a8:	33145c07 	.word	0x33145c07
 80161ac:	3ca1a626 	.word	0x3ca1a626
 80161b0:	54442d18 	.word	0x54442d18
 80161b4:	400921fb 	.word	0x400921fb
 80161b8:	54442d18 	.word	0x54442d18
 80161bc:	3ff921fb 	.word	0x3ff921fb
 80161c0:	54442d18 	.word	0x54442d18
 80161c4:	3fe921fb 	.word	0x3fe921fb
 80161c8:	08017350 	.word	0x08017350
 80161cc:	08017368 	.word	0x08017368
 80161d0:	54442d18 	.word	0x54442d18
 80161d4:	c00921fb 	.word	0xc00921fb
 80161d8:	54442d18 	.word	0x54442d18
 80161dc:	bff921fb 	.word	0xbff921fb
 80161e0:	7ff00000 	.word	0x7ff00000
 80161e4:	00000000 	.word	0x00000000

080161e8 <atan>:
 80161e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ec:	ec55 4b10 	vmov	r4, r5, d0
 80161f0:	4bc3      	ldr	r3, [pc, #780]	; (8016500 <atan+0x318>)
 80161f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80161f6:	429e      	cmp	r6, r3
 80161f8:	46ab      	mov	fp, r5
 80161fa:	dd18      	ble.n	801622e <atan+0x46>
 80161fc:	4bc1      	ldr	r3, [pc, #772]	; (8016504 <atan+0x31c>)
 80161fe:	429e      	cmp	r6, r3
 8016200:	dc01      	bgt.n	8016206 <atan+0x1e>
 8016202:	d109      	bne.n	8016218 <atan+0x30>
 8016204:	b144      	cbz	r4, 8016218 <atan+0x30>
 8016206:	4622      	mov	r2, r4
 8016208:	462b      	mov	r3, r5
 801620a:	4620      	mov	r0, r4
 801620c:	4629      	mov	r1, r5
 801620e:	f7ea f83d 	bl	800028c <__adddf3>
 8016212:	4604      	mov	r4, r0
 8016214:	460d      	mov	r5, r1
 8016216:	e006      	b.n	8016226 <atan+0x3e>
 8016218:	f1bb 0f00 	cmp.w	fp, #0
 801621c:	f300 8131 	bgt.w	8016482 <atan+0x29a>
 8016220:	a59b      	add	r5, pc, #620	; (adr r5, 8016490 <atan+0x2a8>)
 8016222:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016226:	ec45 4b10 	vmov	d0, r4, r5
 801622a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801622e:	4bb6      	ldr	r3, [pc, #728]	; (8016508 <atan+0x320>)
 8016230:	429e      	cmp	r6, r3
 8016232:	dc14      	bgt.n	801625e <atan+0x76>
 8016234:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8016238:	429e      	cmp	r6, r3
 801623a:	dc0d      	bgt.n	8016258 <atan+0x70>
 801623c:	a396      	add	r3, pc, #600	; (adr r3, 8016498 <atan+0x2b0>)
 801623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016242:	ee10 0a10 	vmov	r0, s0
 8016246:	4629      	mov	r1, r5
 8016248:	f7ea f820 	bl	800028c <__adddf3>
 801624c:	4baf      	ldr	r3, [pc, #700]	; (801650c <atan+0x324>)
 801624e:	2200      	movs	r2, #0
 8016250:	f7ea fc62 	bl	8000b18 <__aeabi_dcmpgt>
 8016254:	2800      	cmp	r0, #0
 8016256:	d1e6      	bne.n	8016226 <atan+0x3e>
 8016258:	f04f 3aff 	mov.w	sl, #4294967295
 801625c:	e02b      	b.n	80162b6 <atan+0xce>
 801625e:	f000 f963 	bl	8016528 <fabs>
 8016262:	4bab      	ldr	r3, [pc, #684]	; (8016510 <atan+0x328>)
 8016264:	429e      	cmp	r6, r3
 8016266:	ec55 4b10 	vmov	r4, r5, d0
 801626a:	f300 80bf 	bgt.w	80163ec <atan+0x204>
 801626e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016272:	429e      	cmp	r6, r3
 8016274:	f300 80a0 	bgt.w	80163b8 <atan+0x1d0>
 8016278:	ee10 2a10 	vmov	r2, s0
 801627c:	ee10 0a10 	vmov	r0, s0
 8016280:	462b      	mov	r3, r5
 8016282:	4629      	mov	r1, r5
 8016284:	f7ea f802 	bl	800028c <__adddf3>
 8016288:	4ba0      	ldr	r3, [pc, #640]	; (801650c <atan+0x324>)
 801628a:	2200      	movs	r2, #0
 801628c:	f7e9 fffc 	bl	8000288 <__aeabi_dsub>
 8016290:	2200      	movs	r2, #0
 8016292:	4606      	mov	r6, r0
 8016294:	460f      	mov	r7, r1
 8016296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801629a:	4620      	mov	r0, r4
 801629c:	4629      	mov	r1, r5
 801629e:	f7e9 fff5 	bl	800028c <__adddf3>
 80162a2:	4602      	mov	r2, r0
 80162a4:	460b      	mov	r3, r1
 80162a6:	4630      	mov	r0, r6
 80162a8:	4639      	mov	r1, r7
 80162aa:	f7ea facf 	bl	800084c <__aeabi_ddiv>
 80162ae:	f04f 0a00 	mov.w	sl, #0
 80162b2:	4604      	mov	r4, r0
 80162b4:	460d      	mov	r5, r1
 80162b6:	4622      	mov	r2, r4
 80162b8:	462b      	mov	r3, r5
 80162ba:	4620      	mov	r0, r4
 80162bc:	4629      	mov	r1, r5
 80162be:	f7ea f99b 	bl	80005f8 <__aeabi_dmul>
 80162c2:	4602      	mov	r2, r0
 80162c4:	460b      	mov	r3, r1
 80162c6:	4680      	mov	r8, r0
 80162c8:	4689      	mov	r9, r1
 80162ca:	f7ea f995 	bl	80005f8 <__aeabi_dmul>
 80162ce:	a374      	add	r3, pc, #464	; (adr r3, 80164a0 <atan+0x2b8>)
 80162d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d4:	4606      	mov	r6, r0
 80162d6:	460f      	mov	r7, r1
 80162d8:	f7ea f98e 	bl	80005f8 <__aeabi_dmul>
 80162dc:	a372      	add	r3, pc, #456	; (adr r3, 80164a8 <atan+0x2c0>)
 80162de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162e2:	f7e9 ffd3 	bl	800028c <__adddf3>
 80162e6:	4632      	mov	r2, r6
 80162e8:	463b      	mov	r3, r7
 80162ea:	f7ea f985 	bl	80005f8 <__aeabi_dmul>
 80162ee:	a370      	add	r3, pc, #448	; (adr r3, 80164b0 <atan+0x2c8>)
 80162f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162f4:	f7e9 ffca 	bl	800028c <__adddf3>
 80162f8:	4632      	mov	r2, r6
 80162fa:	463b      	mov	r3, r7
 80162fc:	f7ea f97c 	bl	80005f8 <__aeabi_dmul>
 8016300:	a36d      	add	r3, pc, #436	; (adr r3, 80164b8 <atan+0x2d0>)
 8016302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016306:	f7e9 ffc1 	bl	800028c <__adddf3>
 801630a:	4632      	mov	r2, r6
 801630c:	463b      	mov	r3, r7
 801630e:	f7ea f973 	bl	80005f8 <__aeabi_dmul>
 8016312:	a36b      	add	r3, pc, #428	; (adr r3, 80164c0 <atan+0x2d8>)
 8016314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016318:	f7e9 ffb8 	bl	800028c <__adddf3>
 801631c:	4632      	mov	r2, r6
 801631e:	463b      	mov	r3, r7
 8016320:	f7ea f96a 	bl	80005f8 <__aeabi_dmul>
 8016324:	a368      	add	r3, pc, #416	; (adr r3, 80164c8 <atan+0x2e0>)
 8016326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801632a:	f7e9 ffaf 	bl	800028c <__adddf3>
 801632e:	4642      	mov	r2, r8
 8016330:	464b      	mov	r3, r9
 8016332:	f7ea f961 	bl	80005f8 <__aeabi_dmul>
 8016336:	a366      	add	r3, pc, #408	; (adr r3, 80164d0 <atan+0x2e8>)
 8016338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801633c:	4680      	mov	r8, r0
 801633e:	4689      	mov	r9, r1
 8016340:	4630      	mov	r0, r6
 8016342:	4639      	mov	r1, r7
 8016344:	f7ea f958 	bl	80005f8 <__aeabi_dmul>
 8016348:	a363      	add	r3, pc, #396	; (adr r3, 80164d8 <atan+0x2f0>)
 801634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801634e:	f7e9 ff9b 	bl	8000288 <__aeabi_dsub>
 8016352:	4632      	mov	r2, r6
 8016354:	463b      	mov	r3, r7
 8016356:	f7ea f94f 	bl	80005f8 <__aeabi_dmul>
 801635a:	a361      	add	r3, pc, #388	; (adr r3, 80164e0 <atan+0x2f8>)
 801635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016360:	f7e9 ff92 	bl	8000288 <__aeabi_dsub>
 8016364:	4632      	mov	r2, r6
 8016366:	463b      	mov	r3, r7
 8016368:	f7ea f946 	bl	80005f8 <__aeabi_dmul>
 801636c:	a35e      	add	r3, pc, #376	; (adr r3, 80164e8 <atan+0x300>)
 801636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016372:	f7e9 ff89 	bl	8000288 <__aeabi_dsub>
 8016376:	4632      	mov	r2, r6
 8016378:	463b      	mov	r3, r7
 801637a:	f7ea f93d 	bl	80005f8 <__aeabi_dmul>
 801637e:	a35c      	add	r3, pc, #368	; (adr r3, 80164f0 <atan+0x308>)
 8016380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016384:	f7e9 ff80 	bl	8000288 <__aeabi_dsub>
 8016388:	4632      	mov	r2, r6
 801638a:	463b      	mov	r3, r7
 801638c:	f7ea f934 	bl	80005f8 <__aeabi_dmul>
 8016390:	4602      	mov	r2, r0
 8016392:	460b      	mov	r3, r1
 8016394:	4640      	mov	r0, r8
 8016396:	4649      	mov	r1, r9
 8016398:	f7e9 ff78 	bl	800028c <__adddf3>
 801639c:	4622      	mov	r2, r4
 801639e:	462b      	mov	r3, r5
 80163a0:	f7ea f92a 	bl	80005f8 <__aeabi_dmul>
 80163a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80163a8:	4602      	mov	r2, r0
 80163aa:	460b      	mov	r3, r1
 80163ac:	d14b      	bne.n	8016446 <atan+0x25e>
 80163ae:	4620      	mov	r0, r4
 80163b0:	4629      	mov	r1, r5
 80163b2:	f7e9 ff69 	bl	8000288 <__aeabi_dsub>
 80163b6:	e72c      	b.n	8016212 <atan+0x2a>
 80163b8:	ee10 0a10 	vmov	r0, s0
 80163bc:	4b53      	ldr	r3, [pc, #332]	; (801650c <atan+0x324>)
 80163be:	2200      	movs	r2, #0
 80163c0:	4629      	mov	r1, r5
 80163c2:	f7e9 ff61 	bl	8000288 <__aeabi_dsub>
 80163c6:	4b51      	ldr	r3, [pc, #324]	; (801650c <atan+0x324>)
 80163c8:	4606      	mov	r6, r0
 80163ca:	460f      	mov	r7, r1
 80163cc:	2200      	movs	r2, #0
 80163ce:	4620      	mov	r0, r4
 80163d0:	4629      	mov	r1, r5
 80163d2:	f7e9 ff5b 	bl	800028c <__adddf3>
 80163d6:	4602      	mov	r2, r0
 80163d8:	460b      	mov	r3, r1
 80163da:	4630      	mov	r0, r6
 80163dc:	4639      	mov	r1, r7
 80163de:	f7ea fa35 	bl	800084c <__aeabi_ddiv>
 80163e2:	f04f 0a01 	mov.w	sl, #1
 80163e6:	4604      	mov	r4, r0
 80163e8:	460d      	mov	r5, r1
 80163ea:	e764      	b.n	80162b6 <atan+0xce>
 80163ec:	4b49      	ldr	r3, [pc, #292]	; (8016514 <atan+0x32c>)
 80163ee:	429e      	cmp	r6, r3
 80163f0:	da1d      	bge.n	801642e <atan+0x246>
 80163f2:	ee10 0a10 	vmov	r0, s0
 80163f6:	4b48      	ldr	r3, [pc, #288]	; (8016518 <atan+0x330>)
 80163f8:	2200      	movs	r2, #0
 80163fa:	4629      	mov	r1, r5
 80163fc:	f7e9 ff44 	bl	8000288 <__aeabi_dsub>
 8016400:	4b45      	ldr	r3, [pc, #276]	; (8016518 <atan+0x330>)
 8016402:	4606      	mov	r6, r0
 8016404:	460f      	mov	r7, r1
 8016406:	2200      	movs	r2, #0
 8016408:	4620      	mov	r0, r4
 801640a:	4629      	mov	r1, r5
 801640c:	f7ea f8f4 	bl	80005f8 <__aeabi_dmul>
 8016410:	4b3e      	ldr	r3, [pc, #248]	; (801650c <atan+0x324>)
 8016412:	2200      	movs	r2, #0
 8016414:	f7e9 ff3a 	bl	800028c <__adddf3>
 8016418:	4602      	mov	r2, r0
 801641a:	460b      	mov	r3, r1
 801641c:	4630      	mov	r0, r6
 801641e:	4639      	mov	r1, r7
 8016420:	f7ea fa14 	bl	800084c <__aeabi_ddiv>
 8016424:	f04f 0a02 	mov.w	sl, #2
 8016428:	4604      	mov	r4, r0
 801642a:	460d      	mov	r5, r1
 801642c:	e743      	b.n	80162b6 <atan+0xce>
 801642e:	462b      	mov	r3, r5
 8016430:	ee10 2a10 	vmov	r2, s0
 8016434:	4939      	ldr	r1, [pc, #228]	; (801651c <atan+0x334>)
 8016436:	2000      	movs	r0, #0
 8016438:	f7ea fa08 	bl	800084c <__aeabi_ddiv>
 801643c:	f04f 0a03 	mov.w	sl, #3
 8016440:	4604      	mov	r4, r0
 8016442:	460d      	mov	r5, r1
 8016444:	e737      	b.n	80162b6 <atan+0xce>
 8016446:	4b36      	ldr	r3, [pc, #216]	; (8016520 <atan+0x338>)
 8016448:	4e36      	ldr	r6, [pc, #216]	; (8016524 <atan+0x33c>)
 801644a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801644e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8016452:	e9da 2300 	ldrd	r2, r3, [sl]
 8016456:	f7e9 ff17 	bl	8000288 <__aeabi_dsub>
 801645a:	4622      	mov	r2, r4
 801645c:	462b      	mov	r3, r5
 801645e:	f7e9 ff13 	bl	8000288 <__aeabi_dsub>
 8016462:	4602      	mov	r2, r0
 8016464:	460b      	mov	r3, r1
 8016466:	e9d6 0100 	ldrd	r0, r1, [r6]
 801646a:	f7e9 ff0d 	bl	8000288 <__aeabi_dsub>
 801646e:	f1bb 0f00 	cmp.w	fp, #0
 8016472:	4604      	mov	r4, r0
 8016474:	460d      	mov	r5, r1
 8016476:	f6bf aed6 	bge.w	8016226 <atan+0x3e>
 801647a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801647e:	461d      	mov	r5, r3
 8016480:	e6d1      	b.n	8016226 <atan+0x3e>
 8016482:	a51d      	add	r5, pc, #116	; (adr r5, 80164f8 <atan+0x310>)
 8016484:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016488:	e6cd      	b.n	8016226 <atan+0x3e>
 801648a:	bf00      	nop
 801648c:	f3af 8000 	nop.w
 8016490:	54442d18 	.word	0x54442d18
 8016494:	bff921fb 	.word	0xbff921fb
 8016498:	8800759c 	.word	0x8800759c
 801649c:	7e37e43c 	.word	0x7e37e43c
 80164a0:	e322da11 	.word	0xe322da11
 80164a4:	3f90ad3a 	.word	0x3f90ad3a
 80164a8:	24760deb 	.word	0x24760deb
 80164ac:	3fa97b4b 	.word	0x3fa97b4b
 80164b0:	a0d03d51 	.word	0xa0d03d51
 80164b4:	3fb10d66 	.word	0x3fb10d66
 80164b8:	c54c206e 	.word	0xc54c206e
 80164bc:	3fb745cd 	.word	0x3fb745cd
 80164c0:	920083ff 	.word	0x920083ff
 80164c4:	3fc24924 	.word	0x3fc24924
 80164c8:	5555550d 	.word	0x5555550d
 80164cc:	3fd55555 	.word	0x3fd55555
 80164d0:	2c6a6c2f 	.word	0x2c6a6c2f
 80164d4:	bfa2b444 	.word	0xbfa2b444
 80164d8:	52defd9a 	.word	0x52defd9a
 80164dc:	3fadde2d 	.word	0x3fadde2d
 80164e0:	af749a6d 	.word	0xaf749a6d
 80164e4:	3fb3b0f2 	.word	0x3fb3b0f2
 80164e8:	fe231671 	.word	0xfe231671
 80164ec:	3fbc71c6 	.word	0x3fbc71c6
 80164f0:	9998ebc4 	.word	0x9998ebc4
 80164f4:	3fc99999 	.word	0x3fc99999
 80164f8:	54442d18 	.word	0x54442d18
 80164fc:	3ff921fb 	.word	0x3ff921fb
 8016500:	440fffff 	.word	0x440fffff
 8016504:	7ff00000 	.word	0x7ff00000
 8016508:	3fdbffff 	.word	0x3fdbffff
 801650c:	3ff00000 	.word	0x3ff00000
 8016510:	3ff2ffff 	.word	0x3ff2ffff
 8016514:	40038000 	.word	0x40038000
 8016518:	3ff80000 	.word	0x3ff80000
 801651c:	bff00000 	.word	0xbff00000
 8016520:	080173a0 	.word	0x080173a0
 8016524:	08017380 	.word	0x08017380

08016528 <fabs>:
 8016528:	ec51 0b10 	vmov	r0, r1, d0
 801652c:	ee10 2a10 	vmov	r2, s0
 8016530:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016534:	ec43 2b10 	vmov	d0, r2, r3
 8016538:	4770      	bx	lr
	...

0801653c <_init>:
 801653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801653e:	bf00      	nop
 8016540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016542:	bc08      	pop	{r3}
 8016544:	469e      	mov	lr, r3
 8016546:	4770      	bx	lr

08016548 <_fini>:
 8016548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801654a:	bf00      	nop
 801654c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801654e:	bc08      	pop	{r3}
 8016550:	469e      	mov	lr, r3
 8016552:	4770      	bx	lr
